"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _vue = require("vue");
var _ui = require("../../ui");
var _util = require("./util");
var _xeUtils = _interopRequireDefault(require("xe-utils"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = exports.default = (0, _vue.defineComponent)({
  name: 'VxeSplitItem',
  props: {
    width: [Number, String],
    height: [Number, String],
    minWidth: {
      type: [Number, String],
      default: () => null
    },
    minHeight: {
      type: [Number, String],
      default: () => null
    }
  },
  emits: [],
  setup(props, context) {
    const {
      emit,
      slots
    } = context;
    const xID = _xeUtils.default.uniqueId();
    const $xeSplit = (0, _vue.inject)('$xeSplit', null);
    const refElem = (0, _vue.ref)();
    const chunkConfig = (0, _vue.reactive)({
      id: xID,
      width: props.width,
      height: props.height,
      minWidth: props.minWidth,
      minHeight: props.minHeight,
      renderWidth: 0,
      renderHeight: 0,
      slots: slots
    });
    const reactData = (0, _vue.reactive)({});
    const internalData = {};
    const computeMaps = {};
    const refMaps = {
      refElem
    };
    const $xeSplitItem = {
      xID,
      props,
      context,
      reactData,
      internalData,
      getRefMaps: () => refMaps,
      getComputeMaps: () => computeMaps
    };
    const dispatchEvent = (type, params, evnt) => {
      emit(type, (0, _ui.createEvent)(evnt, {
        $splitItem: $xeSplitItem
      }, params));
    };
    const splitItemMethods = {
      dispatchEvent
    };
    const splitItemPrivateMethods = {};
    Object.assign($xeSplitItem, splitItemMethods, splitItemPrivateMethods);
    const renderVN = () => {
      return (0, _vue.h)('div', {
        ref: refElem
      });
    };
    (0, _vue.watch)(() => props.width, val => {
      chunkConfig.width = val;
    });
    (0, _vue.watch)(() => props.height, val => {
      chunkConfig.height = val;
    });
    (0, _vue.watch)(() => props.minWidth, val => {
      chunkConfig.minWidth = val;
    });
    (0, _vue.watch)(() => props.minHeight, val => {
      chunkConfig.minHeight = val;
    });
    (0, _vue.onMounted)(() => {
      const elem = refElem.value;
      if ($xeSplit && elem) {
        (0, _util.assembleSplitItem)($xeSplit, elem, chunkConfig);
      }
    });
    (0, _vue.onUnmounted)(() => {
      if ($xeSplit) {
        (0, _util.destroySplitItem)($xeSplit, chunkConfig);
      }
    });
    (0, _vue.provide)('$xeSplitItem', $xeSplitItem);
    $xeSplitItem.renderVN = renderVN;
    return $xeSplitItem;
  },
  render() {
    return this.renderVN();
  }
});