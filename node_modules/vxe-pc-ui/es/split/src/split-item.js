import { defineComponent, ref, h, reactive, watch, provide, inject, onMounted, onUnmounted } from 'vue';
import { createEvent } from '../../ui';
import { assembleSplitItem, destroySplitItem } from './util';
import XEUtils from 'xe-utils';
export default defineComponent({
    name: 'VxeSplitItem',
    props: {
        width: [Number, String],
        height: [Number, String],
        minWidth: {
            type: [Number, String],
            default: () => null
        },
        minHeight: {
            type: [Number, String],
            default: () => null
        }
    },
    emits: [],
    setup(props, context) {
        const { emit, slots } = context;
        const xID = XEUtils.uniqueId();
        const $xeSplit = inject('$xeSplit', null);
        const refElem = ref();
        const chunkConfig = reactive({
            id: xID,
            width: props.width,
            height: props.height,
            minWidth: props.minWidth,
            minHeight: props.minHeight,
            renderWidth: 0,
            renderHeight: 0,
            slots: slots
        });
        const reactData = reactive({});
        const internalData = {};
        const computeMaps = {};
        const refMaps = {
            refElem
        };
        const $xeSplitItem = {
            xID,
            props,
            context,
            reactData,
            internalData,
            getRefMaps: () => refMaps,
            getComputeMaps: () => computeMaps
        };
        const dispatchEvent = (type, params, evnt) => {
            emit(type, createEvent(evnt, { $splitItem: $xeSplitItem }, params));
        };
        const splitItemMethods = {
            dispatchEvent
        };
        const splitItemPrivateMethods = {};
        Object.assign($xeSplitItem, splitItemMethods, splitItemPrivateMethods);
        const renderVN = () => {
            return h('div', {
                ref: refElem
            });
        };
        watch(() => props.width, (val) => {
            chunkConfig.width = val;
        });
        watch(() => props.height, (val) => {
            chunkConfig.height = val;
        });
        watch(() => props.minWidth, (val) => {
            chunkConfig.minWidth = val;
        });
        watch(() => props.minHeight, (val) => {
            chunkConfig.minHeight = val;
        });
        onMounted(() => {
            const elem = refElem.value;
            if ($xeSplit && elem) {
                assembleSplitItem($xeSplit, elem, chunkConfig);
            }
        });
        onUnmounted(() => {
            if ($xeSplit) {
                destroySplitItem($xeSplit, chunkConfig);
            }
        });
        provide('$xeSplitItem', $xeSplitItem);
        $xeSplitItem.renderVN = renderVN;
        return $xeSplitItem;
    },
    render() {
        return this.renderVN();
    }
});
