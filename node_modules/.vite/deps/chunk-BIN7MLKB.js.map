{
  "version": 3,
  "sources": ["../../vxe-table/es/table/src/table.js", "../../vxe-table/es/table/src/body.js", "../../vxe-table/es/table/src/header.js", "../../vxe-table/es/table/src/footer.js", "../../vxe-table/es/table/src/props.js", "../../vxe-table/es/table/src/emits.js", "../../vxe-table/es/table/module/custom/panel.js", "../../vxe-table/es/table/module/filter/panel.js", "../../vxe-table/es/table/module/export/import-panel.js", "../../vxe-table/es/table/module/export/export-panel.js", "../../vxe-table/es/table/module/menu/panel.js", "../../vxe-table/es/table/src/use/cell-view.js", "../../vxe-table/es/table/module/filter/hook.js", "../../vxe-table/es/table/module/menu/hook.js", "../../vxe-table/es/table/module/edit/hook.js", "../../vxe-table/es/table/module/export/hook.js", "../../vxe-table/es/table/module/export/util.js", "../../vxe-table/es/table/module/keyboard/hook.js", "../../vxe-table/es/table/module/validator/hook.js", "../../vxe-table/es/table/module/custom/hook.js", "../../vxe-table/es/table/render/index.js", "../../vxe-table/es/table/index.js", "../../vxe-table/es/grid/src/grid.js", "../../vxe-table/es/grid/index.js"],
  "sourcesContent": ["import { defineComponent, h, reactive, ref, provide, inject, nextTick, onActivated, onDeactivated, onBeforeUnmount, onUnmounted, watch, computed, onMounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { initTpImg, getTpImg, isPx, isScale, hasClass, addClass, removeClass, getEventTargetNode, getPaddingTopBottomSize, getOffsetPos, setScrollTop, setScrollLeft, toCssUnit } from '../../ui/src/dom';\nimport { getLastZIndex, nextZIndex, hasChildrenList, getFuncText, isEnableConf, formatText, eqEmptyValue } from '../../ui/src/utils';\nimport { VxeUI } from '../../ui';\nimport Cell from './cell';\nimport TableBodyComponent from './body';\nimport TableHeaderComponent from './header';\nimport TableFooterComponent from './footer';\nimport tableProps from './props';\nimport tableEmits from './emits';\nimport { getRowUniqueId, clearTableAllStatus, getRowkey, getRowid, rowToVisible, colToVisible, getCellValue, setCellValue, handleRowidOrRow, handleFieldOrColumn, toTreePathSeq, restoreScrollLocation, getRootColumn, getRefElem, getColReMinWidth, createHandleUpdateRowId, createHandleGetRowId } from './util';\nimport { getSlotVNs } from '../../ui/src/vn';\nimport { warnLog, errLog } from '../../ui/src/log';\nimport TableCustomPanelComponent from '../module/custom/panel';\nimport TableFilterPanelComponent from '../module/filter/panel';\nimport TableImportPanelComponent from '../module/export/import-panel';\nimport TableExportPanelComponent from '../module/export/export-panel';\nimport TableMenuPanelComponent from '../module/menu/panel';\nconst { getConfig, getIcon, getI18n, renderer, formats, createEvent, globalResize, interceptor, hooks, globalEvents, GLOBAL_EVENT_KEYS, useFns, renderEmptyElement } = VxeUI;\nconst supportMaxRow = 5e6;\nconst customStorageKey = 'VXE_CUSTOM_STORE';\nconst maxYHeight = 5e6;\nconst maxXWidth = 5e6;\nexport default defineComponent({\n    name: 'VxeTable',\n    props: tableProps,\n    emits: tableEmits,\n    setup(props, context) {\n        const { slots, emit } = context;\n        const xID = XEUtils.uniqueId();\n        const browseObj = XEUtils.browse();\n        // 使用已安装的组件，如果未安装则不渲染\n        const VxeUILoadingComponent = VxeUI.getComponent('VxeLoading');\n        const VxeUITooltipComponent = VxeUI.getComponent('VxeTooltip');\n        const $xeTabs = inject('$xeTabs', null);\n        const { computeSize } = useFns.useSize(props);\n        const reactData = reactive({\n            // 低性能的静态列\n            staticColumns: [],\n            // 渲染的列分组\n            tableGroupColumn: [],\n            // 可视区渲染的列\n            tableColumn: [],\n            // 渲染中的数据\n            tableData: [],\n            // 是否启用了横向 X 可视渲染方式加载\n            scrollXLoad: false,\n            // 是否启用了纵向 Y 可视渲染方式加载\n            scrollYLoad: false,\n            // 是否存在纵向滚动条\n            overflowY: true,\n            // 是否存在横向滚动条\n            overflowX: false,\n            // 纵向滚动条的宽度\n            scrollbarWidth: 0,\n            // 横向滚动条的高度\n            scrollbarHeight: 0,\n            // 最后滚动时间戳\n            lastScrollTime: 0,\n            // 行高\n            rowHeight: 0,\n            // 表格父容器的高度\n            parentHeight: 0,\n            // 是否使用分组表头\n            isGroup: false,\n            isAllOverflow: false,\n            // 复选框属性，是否全选\n            isAllSelected: false,\n            // 复选框属性，有选中且非全选状态\n            isIndeterminate: false,\n            // 当前行\n            currentRow: null,\n            // 单选框属性，选中列\n            currentColumn: null,\n            // 单选框属性，选中行\n            selectRadioRow: null,\n            // 表尾合计数据\n            footerTableData: [],\n            // 展开列信息\n            expandColumn: null,\n            // 树节点列信息\n            treeNodeColumn: null,\n            hasFixedColumn: false,\n            // 合并单元格的对象集\n            mergeList: [],\n            // 合并表尾数据的对象集\n            mergeFooterList: [],\n            // 刷新列标识，当列筛选被改变时，触发表格刷新数据\n            upDataFlag: 0,\n            // 刷新列标识，当列的特定属性被改变时，触发表格刷新列\n            reColumnFlag: 0,\n            // 初始化标识\n            initStore: {\n                filter: false,\n                import: false,\n                export: false,\n                custom: false\n            },\n            // 自定义列相关的信息\n            customStore: {\n                btnEl: null,\n                isAll: false,\n                isIndeterminate: false,\n                activeBtn: false,\n                activeWrapper: false,\n                visible: false,\n                maxHeight: 0,\n                oldSortMaps: {},\n                oldFixedMaps: {},\n                oldVisibleMaps: {}\n            },\n            customColumnList: [],\n            // 当前选中的筛选列\n            filterStore: {\n                isAllSelected: false,\n                isIndeterminate: false,\n                style: null,\n                options: [],\n                column: null,\n                multiple: false,\n                visible: false,\n                maxHeight: null\n            },\n            // 存放列相关的信息\n            columnStore: {\n                leftList: [],\n                centerList: [],\n                rightList: [],\n                resizeList: [],\n                pxList: [],\n                pxMinList: [],\n                autoMinList: [],\n                scaleList: [],\n                scaleMinList: [],\n                autoList: [],\n                remainList: []\n            },\n            // 存放快捷菜单的信息\n            ctxMenuStore: {\n                selected: null,\n                visible: false,\n                showChild: false,\n                selectChild: null,\n                list: [],\n                style: null\n            },\n            // 存放可编辑相关信息\n            editStore: {\n                indexs: {\n                    columns: []\n                },\n                titles: {\n                    columns: []\n                },\n                // 选中源\n                selected: {\n                    row: null,\n                    column: null\n                },\n                // 已复制源\n                copyed: {\n                    cut: false,\n                    rows: [],\n                    columns: []\n                },\n                // 激活\n                actived: {\n                    row: null,\n                    column: null\n                },\n                // 当前被强制聚焦单元格，只会在鼠标点击后算聚焦\n                focused: {\n                    row: null,\n                    column: null\n                }\n            },\n            // 存放 tooltip 相关信息\n            tooltipStore: {\n                row: null,\n                column: null,\n                content: null,\n                visible: false,\n                currOpts: {}\n            },\n            // 存放数据校验相关信息\n            validStore: {\n                visible: false\n            },\n            validErrorMaps: {},\n            // 导入相关信息\n            importStore: {\n                inited: false,\n                file: null,\n                type: '',\n                modeList: [],\n                typeList: [],\n                filename: '',\n                visible: false\n            },\n            importParams: {\n                mode: '',\n                types: null,\n                message: true\n            },\n            // 导出相关信息\n            exportStore: {\n                inited: false,\n                name: '',\n                modeList: [],\n                typeList: [],\n                columns: [],\n                isPrint: false,\n                hasFooter: false,\n                hasMerge: false,\n                hasTree: false,\n                hasColgroup: false,\n                visible: false\n            },\n            exportParams: {\n                filename: '',\n                sheetName: '',\n                mode: '',\n                type: '',\n                isColgroup: false,\n                isMerge: false,\n                isAllExpand: false,\n                useStyle: false,\n                original: false,\n                message: true,\n                isHeader: false,\n                isFooter: false\n            },\n            rowExpandedFlag: 1,\n            treeExpandedFlag: 1,\n            updateCheckboxFlag: 1,\n            pendingRowFlag: 1,\n            insertRowFlag: 1,\n            removeRowFlag: 1,\n            rowHeightStore: {\n                default: 48,\n                medium: 44,\n                small: 40,\n                mini: 36\n            },\n            scrollVMLoading: false,\n            scrollYHeight: 0,\n            scrollYTop: 0,\n            isScrollYBig: false,\n            scrollXLeft: 0,\n            scrollXWidth: 0,\n            isScrollXBig: false,\n            rowExpandHeightFlag: 1,\n            calcCellHeightFlag: 1,\n            resizeHeightFlag: 1,\n            resizeWidthFlag: 1,\n            isCustomStatus: false,\n            isDragRowMove: false,\n            dragRow: null,\n            isDragColMove: false,\n            dragCol: null,\n            dragTipText: '',\n            isDragResize: false,\n            isRowLoading: false,\n            isColLoading: false\n        });\n        const internalData = {\n            tZindex: 0,\n            elemStore: {},\n            // 存放横向 X 虚拟滚动相关的信息\n            scrollXStore: {\n                preloadSize: 0,\n                offsetSize: 0,\n                visibleSize: 0,\n                visibleStartIndex: 0,\n                visibleEndIndex: 0,\n                startIndex: 0,\n                endIndex: 0\n            },\n            // 存放纵向 Y 虚拟滚动相关信息\n            scrollYStore: {\n                preloadSize: 0,\n                offsetSize: 0,\n                visibleSize: 0,\n                visibleStartIndex: 0,\n                visibleEndIndex: 0,\n                startIndex: 0,\n                endIndex: 0\n            },\n            // 表格宽度\n            tableWidth: 0,\n            // 表格高度\n            tableHeight: 0,\n            // 表头高度\n            headerHeight: 0,\n            // 表尾高度\n            footerHeight: 0,\n            customHeight: 0,\n            customMinHeight: 0,\n            customMaxHeight: 0,\n            // 当前 hover 行\n            hoverRow: null,\n            // 最后滚动位置\n            lastScrollLeft: 0,\n            lastScrollTop: 0,\n            // 单选框属性，已选中保留的行\n            radioReserveRow: null,\n            // 复选框属性，已选中保留的行集合\n            checkboxReserveRowMap: {},\n            // 行数据，已展开保留的行集合\n            rowExpandedReserveRowMap: {},\n            // 树结构数据，已展开保留的行集合\n            treeExpandedReserveRowMap: {},\n            // 树结构数据，不确定状态的集合\n            treeIndeterminateRowMaps: {},\n            // 列表完整数据、条件处理后\n            tableFullData: [],\n            afterFullData: [],\n            afterTreeFullData: [],\n            // 列表条件处理后数据集合\n            afterFullRowMaps: {},\n            // 树结构完整数据、条件处理后\n            tableFullTreeData: [],\n            tableSynchData: [],\n            tableSourceData: [],\n            // 收集的列配置（带分组）\n            collectColumn: [],\n            // 完整所有列（不带分组）\n            tableFullColumn: [],\n            // 渲染所有列\n            visibleColumn: [],\n            // 总的缓存数据集\n            fullAllDataRowIdData: {},\n            // 渲染中缓存数据\n            sourceDataRowIdData: {},\n            fullDataRowIdData: {},\n            fullColumnIdData: {},\n            fullColumnFieldData: {},\n            // 已展开的行集合\n            rowExpandedMaps: {},\n            // 懒加载中的展开行的集合\n            rowExpandLazyLoadedMaps: {},\n            // 已展开树节点集合\n            treeExpandedMaps: {},\n            // 懒加载中的树节点的集合\n            treeExpandLazyLoadedMaps: {},\n            // 复选框属性，已选中的行集合\n            selectCheckboxMaps: {},\n            // 已标记的对象集\n            pendingRowMaps: {},\n            // 已新增的临时行\n            insertRowMaps: {},\n            // 已删除行\n            removeRowMaps: {},\n            inited: false,\n            tooltipTimeout: null,\n            initStatus: false,\n            isActivated: false\n        };\n        let tableMethods = {};\n        let tablePrivateMethods = {};\n        const refElem = ref();\n        const refVarElem = ref();\n        const refTooltip = ref();\n        const refCommTooltip = ref();\n        const refValidTooltip = ref();\n        const refTableMenu = ref();\n        const refTableFilter = ref();\n        const refTableCustom = ref();\n        const refTableViewportElem = ref();\n        const refTableHeader = ref();\n        const refTableBody = ref();\n        const refTableFooter = ref();\n        const refTableLeftHeader = ref();\n        const refTableLeftBody = ref();\n        const refTableLeftFooter = ref();\n        const refTableRightHeader = ref();\n        const refTableRightBody = ref();\n        const refTableRightFooter = ref();\n        const refLeftContainer = ref();\n        const refRightContainer = ref();\n        const refColResizeBar = ref();\n        const refRowResizeBar = ref();\n        const refEmptyPlaceholder = ref();\n        const refDragTipElem = ref();\n        const refDragRowLineElem = ref();\n        const refDragColLineElem = ref();\n        const refRowExpandElem = ref();\n        const refRowExpandYSpaceElem = ref();\n        const refScrollXVirtualElem = ref();\n        const refScrollYVirtualElem = ref();\n        const refScrollXHandleElem = ref();\n        const refScrollXLeftCornerElem = ref();\n        const refScrollXRightCornerElem = ref();\n        const refScrollYHandleElem = ref();\n        const refScrollYTopCornerElem = ref();\n        const refScrollXWrapperElem = ref();\n        const refScrollYWrapperElem = ref();\n        const refScrollYBottomCornerElem = ref();\n        const refScrollXSpaceElem = ref();\n        const refScrollYSpaceElem = ref();\n        const $xeGrid = inject('$xeGrid', null);\n        let $xeToolbar;\n        const computeTableId = computed(() => {\n            const { id } = props;\n            if (id) {\n                if (XEUtils.isFunction(id)) {\n                    return `${id({ $table: $xeTable, $grid: $xeGrid }) || ''}`;\n                }\n                return `${id}`;\n            }\n            return '';\n        });\n        const computeValidOpts = computed(() => {\n            return Object.assign({}, getConfig().table.validConfig, props.validConfig);\n        });\n        /**\n         * @deprecated\n         */\n        const computeSXOpts = computed(() => {\n            const virtualXOpts = computeVirtualXOpts.value;\n            return virtualXOpts;\n        });\n        const computeScrollXThreshold = computed(() => {\n            const virtualXOpts = computeVirtualXOpts.value;\n            const { threshold } = virtualXOpts;\n            if (threshold) {\n                return XEUtils.toNumber(threshold);\n            }\n            return 0;\n        });\n        /**\n         * @deprecated\n         */\n        const computeSYOpts = computed(() => {\n            const virtualYOpts = computeVirtualYOpts.value;\n            return virtualYOpts;\n        });\n        const computeVirtualXOpts = computed(() => {\n            return Object.assign({}, getConfig().table.scrollX, getConfig().table.virtualXConfig, props.scrollX, props.virtualXConfig);\n        });\n        const computeVirtualYOpts = computed(() => {\n            return Object.assign({}, getConfig().table.scrollY, getConfig().table.virtualYConfig, props.scrollY, props.virtualYConfig);\n        });\n        const computeScrollbarOpts = computed(() => {\n            return Object.assign({}, getConfig().table.scrollbarConfig, props.scrollbarConfig);\n        });\n        const computeScrollbarXToTop = computed(() => {\n            const scrollbarOpts = computeScrollbarOpts.value;\n            return !!(scrollbarOpts.x && scrollbarOpts.x.position === 'top');\n        });\n        const computeScrollbarYToLeft = computed(() => {\n            const scrollbarOpts = computeScrollbarOpts.value;\n            return !!(scrollbarOpts.y && scrollbarOpts.y.position === 'left');\n        });\n        const computeScrollYThreshold = computed(() => {\n            const virtualYOpts = computeVirtualYOpts.value;\n            const { threshold } = virtualYOpts;\n            if (threshold) {\n                return XEUtils.toNumber(threshold);\n            }\n            return 0;\n        });\n        const computeRowHeightMaps = computed(() => {\n            return reactData.rowHeightStore;\n        });\n        const computeDefaultRowHeight = computed(() => {\n            const vSize = computeSize.value;\n            const rowHeightMaps = computeRowHeightMaps.value;\n            return rowHeightMaps[vSize || 'default'] || 18;\n        });\n        const computeColumnOpts = computed(() => {\n            return Object.assign({}, getConfig().table.columnConfig, props.columnConfig);\n        });\n        const computeCurrentColumnOpts = computed(() => {\n            return Object.assign({}, getConfig().table.currentColumnConfig, props.currentColumnConfig);\n        });\n        const computeCellOpts = computed(() => {\n            const cellOpts = Object.assign({}, getConfig().table.cellConfig, props.cellConfig);\n            if (cellOpts.height) {\n                cellOpts.height = XEUtils.toNumber(cellOpts.height);\n            }\n            return cellOpts;\n        });\n        const computeHeaderCellOpts = computed(() => {\n            const headerCellOpts = Object.assign({}, getConfig().table.headerCellConfig, props.headerCellConfig);\n            if (headerCellOpts.height) {\n                headerCellOpts.height = XEUtils.toNumber(headerCellOpts.height);\n            }\n            return headerCellOpts;\n        });\n        const computeFooterCellOpts = computed(() => {\n            const footerCellOpts = Object.assign({}, getConfig().table.footerCellConfig, props.footerCellConfig);\n            if (footerCellOpts.height) {\n                footerCellOpts.height = XEUtils.toNumber(footerCellOpts.height);\n            }\n            return footerCellOpts;\n        });\n        const computeRowOpts = computed(() => {\n            return Object.assign({}, getConfig().table.rowConfig, props.rowConfig);\n        });\n        const computeCurrentRowOpts = computed(() => {\n            return Object.assign({}, getConfig().table.currentRowConfig, props.currentRowConfig);\n        });\n        const computeRowDragOpts = computed(() => {\n            return Object.assign({}, getConfig().table.rowDragConfig, props.rowDragConfig);\n        });\n        const computeColumnDragOpts = computed(() => {\n            return Object.assign({}, getConfig().table.columnDragConfig, props.columnDragConfig);\n        });\n        const computeResizeOpts = computed(() => {\n            return Object.assign({}, getConfig().table.resizeConfig, props.resizeConfig);\n        });\n        const computeResizableOpts = computed(() => {\n            return Object.assign({}, getConfig().table.resizableConfig, props.resizableConfig);\n        });\n        const computeSeqOpts = computed(() => {\n            return Object.assign({ startIndex: 0 }, getConfig().table.seqConfig, props.seqConfig);\n        });\n        const computeRadioOpts = computed(() => {\n            return Object.assign({}, getConfig().table.radioConfig, props.radioConfig);\n        });\n        const computeCheckboxOpts = computed(() => {\n            return Object.assign({}, getConfig().table.checkboxConfig, props.checkboxConfig);\n        });\n        const computeTooltipOpts = computed(() => {\n            return Object.assign({}, getConfig().tooltip, getConfig().table.tooltipConfig, props.tooltipConfig);\n        });\n        const computeTableTipConfig = computed(() => {\n            const { tooltipStore } = reactData;\n            const tooltipOpts = computeTooltipOpts.value;\n            return Object.assign({}, tooltipOpts, tooltipStore.currOpts);\n        });\n        const computeValidTipConfig = computed(() => {\n            const tooltipOpts = computeTooltipOpts.value;\n            return Object.assign({}, tooltipOpts);\n        });\n        const computeEditOpts = computed(() => {\n            return Object.assign({}, getConfig().table.editConfig, props.editConfig);\n        });\n        const computeSortOpts = computed(() => {\n            return Object.assign({ orders: ['asc', 'desc', null] }, getConfig().table.sortConfig, props.sortConfig);\n        });\n        const computeFilterOpts = computed(() => {\n            return Object.assign({}, getConfig().table.filterConfig, props.filterConfig);\n        });\n        const computeMouseOpts = computed(() => {\n            return Object.assign({}, getConfig().table.mouseConfig, props.mouseConfig);\n        });\n        const computeAreaOpts = computed(() => {\n            return Object.assign({}, getConfig().table.areaConfig, props.areaConfig);\n        });\n        const computeKeyboardOpts = computed(() => {\n            return Object.assign({}, getConfig().table.keyboardConfig, props.keyboardConfig);\n        });\n        const computeClipOpts = computed(() => {\n            return Object.assign({}, getConfig().table.clipConfig, props.clipConfig);\n        });\n        const computeFNROpts = computed(() => {\n            return Object.assign({}, getConfig().table.fnrConfig, props.fnrConfig);\n        });\n        const computeMenuOpts = computed(() => {\n            return Object.assign({}, getConfig().table.menuConfig, props.menuConfig);\n        });\n        const computeLeftFixedWidth = computed(() => {\n            const { columnStore } = reactData;\n            const { leftList } = columnStore;\n            let leftWidth = 0;\n            for (let i = 0; i < leftList.length; i++) {\n                const column = leftList[i];\n                leftWidth += column.renderWidth;\n            }\n            return leftWidth;\n        });\n        const computeRightFixedWidth = computed(() => {\n            const { columnStore } = reactData;\n            const { rightList } = columnStore;\n            let leftWidth = 0;\n            for (let i = 0; i < rightList.length; i++) {\n                const column = rightList[i];\n                leftWidth += column.renderWidth;\n            }\n            return leftWidth;\n        });\n        const computeHeaderMenu = computed(() => {\n            const menuOpts = computeMenuOpts.value;\n            const headerOpts = menuOpts.header;\n            return headerOpts && headerOpts.options ? headerOpts.options : [];\n        });\n        const computeBodyMenu = computed(() => {\n            const menuOpts = computeMenuOpts.value;\n            const bodyOpts = menuOpts.body;\n            return bodyOpts && bodyOpts.options ? bodyOpts.options : [];\n        });\n        const computeFooterMenu = computed(() => {\n            const menuOpts = computeMenuOpts.value;\n            const footerOpts = menuOpts.footer;\n            return footerOpts && footerOpts.options ? footerOpts.options : [];\n        });\n        const computeIsMenu = computed(() => {\n            const menuOpts = computeMenuOpts.value;\n            const headerMenu = computeHeaderMenu.value;\n            const bodyMenu = computeBodyMenu.value;\n            const footerMenu = computeFooterMenu.value;\n            return !!(props.menuConfig && isEnableConf(menuOpts) && (headerMenu.length || bodyMenu.length || footerMenu.length));\n        });\n        const computeMenuList = computed(() => {\n            const { ctxMenuStore } = reactData;\n            const rest = [];\n            ctxMenuStore.list.forEach((list) => {\n                list.forEach((item) => {\n                    rest.push(item);\n                });\n            });\n            return rest;\n        });\n        const computeExportOpts = computed(() => {\n            return Object.assign({}, getConfig().table.exportConfig, props.exportConfig);\n        });\n        const computeImportOpts = computed(() => {\n            return Object.assign({}, getConfig().table.importConfig, props.importConfig);\n        });\n        const computePrintOpts = computed(() => {\n            return Object.assign({}, getConfig().table.printConfig, props.printConfig);\n        });\n        const computeExpandOpts = computed(() => {\n            return Object.assign({}, getConfig().table.expandConfig, props.expandConfig);\n        });\n        const computeTreeOpts = computed(() => {\n            return Object.assign({}, getConfig().table.treeConfig, props.treeConfig);\n        });\n        const computeEmptyOpts = computed(() => {\n            return Object.assign({}, getConfig().table.emptyRender, props.emptyRender);\n        });\n        const computeLoadingOpts = computed(() => {\n            return Object.assign({}, getConfig().table.loadingConfig, props.loadingConfig);\n        });\n        const computeCellOffsetWidth = computed(() => {\n            return props.border ? Math.max(2, Math.ceil(reactData.scrollbarWidth / reactData.tableColumn.length)) : 1;\n        });\n        const computeCustomOpts = computed(() => {\n            return Object.assign({}, getConfig().table.customConfig, props.customConfig);\n        });\n        const computeTableRowExpandedList = computed(() => {\n            const { rowExpandedFlag, tableData, expandColumn } = reactData;\n            const { rowExpandedMaps } = internalData;\n            const { handleGetRowId } = createHandleGetRowId($xeTable);\n            const expandList = [];\n            if (expandColumn && rowExpandedFlag) {\n                const rowKeys = {};\n                tableData.forEach(row => {\n                    rowKeys[handleGetRowId(row)] = true;\n                });\n                XEUtils.each(rowExpandedMaps, (row, rowid) => {\n                    if (rowKeys[rowid]) {\n                        expandList.push(row);\n                    }\n                });\n            }\n            return expandList;\n        });\n        const computeAutoWidthColumnList = computed(() => {\n            const { visibleColumn } = internalData;\n            const { tableColumn } = reactData;\n            return tableColumn.length || visibleColumn.length ? visibleColumn.filter(column => column.width === 'auto' || column.minWidth === 'auto') : [];\n        });\n        const computeFixedColumnSize = computed(() => {\n            const { tableColumn } = reactData;\n            const { collectColumn } = internalData;\n            let fixedSize = 0;\n            // 只判断第一层\n            if (tableColumn.length && collectColumn.length) {\n                collectColumn.forEach((column) => {\n                    if (column.renderFixed) {\n                        fixedSize++;\n                    }\n                });\n            }\n            return fixedSize;\n        });\n        const computeIsMaxFixedColumn = computed(() => {\n            const fixedColumnSize = computeFixedColumnSize.value;\n            const columnOpts = computeColumnOpts.value;\n            const { maxFixedSize } = columnOpts;\n            if (maxFixedSize) {\n                return fixedColumnSize >= maxFixedSize;\n            }\n            return false;\n        });\n        const computeTableBorder = computed(() => {\n            const { border } = props;\n            if (border === true) {\n                return 'full';\n            }\n            if (border) {\n                return border;\n            }\n            return 'default';\n        });\n        const computeIsAllCheckboxDisabled = computed(() => {\n            const { treeConfig } = props;\n            const { tableData } = reactData;\n            const { tableFullData } = internalData;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const { strict, checkMethod } = checkboxOpts;\n            if (strict) {\n                if (tableData.length || tableFullData.length) {\n                    if (checkMethod) {\n                        if (treeConfig) {\n                            // 暂时不支持树形结构\n                        }\n                        // 如果所有行都被禁用\n                        return tableFullData.every((row) => !checkMethod({ row }));\n                    }\n                    return false;\n                }\n                return true;\n            }\n            return false;\n        });\n        const computeVirtualScrollBars = computed(() => {\n            const { overflowX, scrollXLoad, overflowY, scrollYLoad } = reactData;\n            return {\n                x: overflowX && scrollXLoad,\n                y: overflowY && scrollYLoad\n            };\n        });\n        const refMaps = {\n            refElem,\n            refTooltip,\n            refValidTooltip,\n            refTableFilter,\n            refTableCustom,\n            refTableMenu,\n            refTableHeader,\n            refTableBody,\n            refTableFooter,\n            refTableLeftHeader,\n            refTableLeftBody,\n            refTableLeftFooter,\n            refTableRightHeader,\n            refTableRightBody,\n            refTableRightFooter,\n            refLeftContainer,\n            refRightContainer,\n            refColResizeBar,\n            refRowResizeBar,\n            refScrollXVirtualElem,\n            refScrollYVirtualElem,\n            refScrollXHandleElem,\n            refScrollYHandleElem,\n            refScrollXSpaceElem,\n            refScrollYSpaceElem\n        };\n        const computeMaps = {\n            computeSize,\n            computeTableId,\n            computeValidOpts,\n            computeVirtualXOpts,\n            computeVirtualYOpts,\n            computeScrollbarOpts,\n            computeScrollbarXToTop,\n            computeScrollbarYToLeft,\n            computeColumnOpts,\n            computeCurrentColumnOpts,\n            computeScrollXThreshold,\n            computeScrollYThreshold,\n            computeRowHeightMaps,\n            computeDefaultRowHeight,\n            computeCellOpts,\n            computeHeaderCellOpts,\n            computeFooterCellOpts,\n            computeRowOpts,\n            computeCurrentRowOpts,\n            computeRowDragOpts,\n            computeColumnDragOpts,\n            computeResizeOpts,\n            computeResizableOpts,\n            computeSeqOpts,\n            computeRadioOpts,\n            computeCheckboxOpts,\n            computeTooltipOpts,\n            computeEditOpts,\n            computeSortOpts,\n            computeFilterOpts,\n            computeMouseOpts,\n            computeAreaOpts,\n            computeKeyboardOpts,\n            computeClipOpts,\n            computeFNROpts,\n            computeHeaderMenu,\n            computeBodyMenu,\n            computeFooterMenu,\n            computeIsMenu,\n            computeMenuOpts,\n            computeExportOpts,\n            computeImportOpts,\n            computePrintOpts,\n            computeExpandOpts,\n            computeTreeOpts,\n            computeEmptyOpts,\n            computeLoadingOpts,\n            computeCellOffsetWidth,\n            computeCustomOpts,\n            computeLeftFixedWidth,\n            computeRightFixedWidth,\n            computeFixedColumnSize,\n            computeIsMaxFixedColumn,\n            computeIsAllCheckboxDisabled,\n            computeVirtualScrollBars,\n            computeSXOpts,\n            computeSYOpts\n        };\n        const $xeTable = {\n            xID,\n            props: props,\n            context,\n            reactData,\n            internalData,\n            getRefMaps: () => refMaps,\n            getComputeMaps: () => computeMaps,\n            xeGrid: $xeGrid,\n            xegrid: $xeGrid\n        };\n        const eqCellValue = (row1, row2, field) => {\n            const val1 = XEUtils.get(row1, field);\n            const val2 = XEUtils.get(row2, field);\n            if (eqEmptyValue(val1) && eqEmptyValue(val2)) {\n                return true;\n            }\n            if (XEUtils.isString(val1) || XEUtils.isNumber(val1)) {\n                return ('' + val1) === ('' + val2);\n            }\n            return XEUtils.isEqual(val1, val2);\n        };\n        const getNextSortOrder = (column) => {\n            const sortOpts = computeSortOpts.value;\n            const { orders } = sortOpts;\n            const currOrder = column.order || null;\n            const oIndex = orders.indexOf(currOrder) + 1;\n            return orders[oIndex < orders.length ? oIndex : 0];\n        };\n        const getCustomStorageMap = (id) => {\n            const version = getConfig().version;\n            const rest = XEUtils.toStringJSON(localStorage.getItem(customStorageKey) || '');\n            const maps = rest && rest._v === version ? rest : { _v: version };\n            return (id ? maps[id] : maps) || {};\n        };\n        const setCustomStorageMap = (id, data) => {\n            const version = getConfig().version;\n            const maps = getCustomStorageMap();\n            maps[id] = data || undefined;\n            maps._v = version;\n            localStorage.setItem(customStorageKey, XEUtils.toJSONString(maps));\n        };\n        const getRecoverRowMaps = (keyMaps) => {\n            const { fullAllDataRowIdData } = internalData;\n            const restKeys = {};\n            XEUtils.each(keyMaps, (row, rowid) => {\n                if (fullAllDataRowIdData[rowid]) {\n                    restKeys[rowid] = row;\n                }\n            });\n            return restKeys;\n        };\n        const handleReserveRow = (reserveRowMap) => {\n            const { fullDataRowIdData } = internalData;\n            const reserveList = [];\n            XEUtils.each(reserveRowMap, (item, rowid) => {\n                if (fullDataRowIdData[rowid] && $xeTable.findRowIndexOf(reserveList, fullDataRowIdData[rowid].row) === -1) {\n                    reserveList.push(fullDataRowIdData[rowid].row);\n                }\n            });\n            return reserveList;\n        };\n        const handleVirtualXVisible = () => {\n            const { isScrollXBig, scrollXWidth } = reactData;\n            const { elemStore, visibleColumn, fullColumnIdData } = internalData;\n            const leftFixedWidth = computeLeftFixedWidth.value;\n            const rightFixedWidth = computeRightFixedWidth.value;\n            const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n            if (bodyScrollElem) {\n                const clientWidth = bodyScrollElem.clientWidth;\n                let scrollLeft = bodyScrollElem.scrollLeft;\n                if (isScrollXBig) {\n                    scrollLeft = Math.ceil((scrollXWidth - clientWidth) * Math.min(1, (scrollLeft / (maxXWidth - clientWidth))));\n                }\n                const startLeft = scrollLeft + leftFixedWidth;\n                const endLeft = scrollLeft + clientWidth - rightFixedWidth;\n                let leftIndex = 0;\n                let rightIndex = visibleColumn.length;\n                while (leftIndex < rightIndex) {\n                    const cIndex = Math.floor((leftIndex + rightIndex) / 2);\n                    const column = visibleColumn[cIndex];\n                    const colid = column.id;\n                    const colRest = fullColumnIdData[colid] || {};\n                    if (colRest.oLeft <= startLeft) {\n                        leftIndex = cIndex + 1;\n                    }\n                    else {\n                        rightIndex = cIndex;\n                    }\n                }\n                let visibleSize = 0;\n                const toVisibleIndex = Math.max(0, leftIndex < visibleColumn.length ? leftIndex - 2 : 0);\n                for (let cIndex = toVisibleIndex, cLen = visibleColumn.length; cIndex < cLen; cIndex++) {\n                    const column = visibleColumn[cIndex];\n                    const colid = column.id;\n                    const colRest = fullColumnIdData[colid] || {};\n                    visibleSize++;\n                    if (colRest.oLeft > endLeft || visibleSize >= 60) {\n                        break;\n                    }\n                }\n                return { toVisibleIndex: Math.max(0, toVisibleIndex), visibleSize: Math.max(1, visibleSize) };\n            }\n            return { toVisibleIndex: 0, visibleSize: 6 };\n        };\n        const calcVarRowHeightConfig = (sizeKey, sizeEl) => {\n            const { rowHeightStore } = reactData;\n            if (sizeEl && sizeEl.clientHeight) {\n                rowHeightStore[sizeKey] = sizeEl.clientHeight;\n            }\n        };\n        const computeRowHeight = () => {\n            const { isAllOverflow } = reactData;\n            const tableHeader = refTableHeader.value;\n            const tableBody = refTableBody.value;\n            const tableBodyElem = tableBody ? tableBody.$el : null;\n            const defaultRowHeight = computeDefaultRowHeight.value;\n            let rowHeight = 0;\n            if (isAllOverflow) {\n                if (tableBodyElem) {\n                    const tableHeaderElem = tableHeader ? tableHeader.$el : null;\n                    let firstTrElem;\n                    firstTrElem = tableBodyElem.querySelector('tr');\n                    if (!firstTrElem && tableHeaderElem) {\n                        firstTrElem = tableHeaderElem.querySelector('tr');\n                    }\n                    if (firstTrElem) {\n                        rowHeight = firstTrElem.clientHeight;\n                    }\n                }\n                if (!rowHeight) {\n                    rowHeight = defaultRowHeight;\n                }\n            }\n            else {\n                rowHeight = defaultRowHeight;\n            }\n            // 最低支持 18px 行高\n            return Math.max(18, rowHeight);\n        };\n        const handleVirtualYVisible = () => {\n            const { isAllOverflow, expandColumn, isScrollYBig, scrollYHeight } = reactData;\n            const { elemStore, isResizeCellHeight, afterFullData, fullAllDataRowIdData } = internalData;\n            const rowOpts = computeRowOpts.value;\n            const cellOpts = computeCellOpts.value;\n            const defaultRowHeight = computeDefaultRowHeight.value;\n            const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n            if (bodyScrollElem) {\n                const clientHeight = bodyScrollElem.clientHeight;\n                let scrollTop = bodyScrollElem.scrollTop;\n                if (isScrollYBig) {\n                    scrollTop = Math.ceil((scrollYHeight - clientHeight) * Math.min(1, (scrollTop / (maxYHeight - clientHeight))));\n                }\n                const startTop = scrollTop;\n                const endTop = scrollTop + clientHeight;\n                let toVisibleIndex = -1;\n                let visibleSize = 0;\n                const isCustomCellHeight = isResizeCellHeight || cellOpts.height || rowOpts.height;\n                if (!isCustomCellHeight && !expandColumn && isAllOverflow) {\n                    toVisibleIndex = Math.floor(startTop / defaultRowHeight) - 1;\n                    visibleSize = Math.ceil(clientHeight / defaultRowHeight) + 1;\n                }\n                else {\n                    const { handleGetRowId } = createHandleGetRowId($xeTable);\n                    let leftIndex = 0;\n                    let rightIndex = afterFullData.length;\n                    while (leftIndex < rightIndex) {\n                        const rIndex = Math.floor((leftIndex + rightIndex) / 2);\n                        const row = afterFullData[rIndex];\n                        const rowid = handleGetRowId(row);\n                        const rowRest = fullAllDataRowIdData[rowid] || {};\n                        if (rowRest.oTop <= startTop) {\n                            leftIndex = rIndex + 1;\n                        }\n                        else {\n                            rightIndex = rIndex;\n                        }\n                    }\n                    toVisibleIndex = Math.max(0, leftIndex < afterFullData.length ? leftIndex - 2 : 0);\n                    for (let rIndex = toVisibleIndex, rLen = afterFullData.length; rIndex < rLen; rIndex++) {\n                        const row = afterFullData[rIndex];\n                        const rowid = handleGetRowId(row);\n                        const rowRest = fullAllDataRowIdData[rowid] || {};\n                        visibleSize++;\n                        if (rowRest.oTop > endTop || visibleSize >= 100) {\n                            break;\n                        }\n                    }\n                }\n                return { toVisibleIndex: Math.max(0, toVisibleIndex), visibleSize: Math.max(6, visibleSize) };\n            }\n            return { toVisibleIndex: 0, visibleSize: 6 };\n        };\n        const calculateMergerOffsetIndex = (list, offsetItem, type) => {\n            for (let mcIndex = 0, len = list.length; mcIndex < len; mcIndex++) {\n                const mergeItem = list[mcIndex];\n                const { startIndex, endIndex } = offsetItem;\n                const mergeStartIndex = mergeItem[type];\n                const mergeSpanNumber = mergeItem[type + 'span'];\n                const mergeEndIndex = mergeStartIndex + mergeSpanNumber;\n                if (mergeStartIndex < startIndex && startIndex < mergeEndIndex) {\n                    offsetItem.startIndex = mergeStartIndex;\n                }\n                if (mergeStartIndex < endIndex && endIndex < mergeEndIndex) {\n                    offsetItem.endIndex = mergeEndIndex;\n                }\n                if (offsetItem.startIndex !== startIndex || offsetItem.endIndex !== endIndex) {\n                    mcIndex = -1;\n                }\n            }\n        };\n        const setMerges = (merges, mList, rowList) => {\n            if (merges) {\n                // const { treeConfig } = props\n                const { visibleColumn } = internalData;\n                if (!XEUtils.isArray(merges)) {\n                    merges = [merges];\n                }\n                // if (treeConfig && merges.length) {\n                //   errLog('vxe.error.noTree', ['merge-cells | merge-footer-items'])\n                // }\n                merges.forEach((item) => {\n                    let { row, col, rowspan, colspan } = item;\n                    if (rowList && XEUtils.isNumber(row)) {\n                        row = rowList[row];\n                    }\n                    if (XEUtils.isNumber(col)) {\n                        col = visibleColumn[col];\n                    }\n                    if ((rowList ? row : XEUtils.isNumber(row)) && col && (rowspan || colspan)) {\n                        rowspan = XEUtils.toNumber(rowspan) || 1;\n                        colspan = XEUtils.toNumber(colspan) || 1;\n                        if (rowspan > 1 || colspan > 1) {\n                            const mcIndex = XEUtils.findIndexOf(mList, item => (item._row === row || getRowid($xeTable, item._row) === getRowid($xeTable, row)) && (item._col.id === col || item._col.id === col.id));\n                            const mergeItem = mList[mcIndex];\n                            if (mergeItem) {\n                                mergeItem.rowspan = rowspan;\n                                mergeItem.colspan = colspan;\n                                mergeItem._rowspan = rowspan;\n                                mergeItem._colspan = colspan;\n                            }\n                            else {\n                                const mergeRowIndex = rowList ? $xeTable.findRowIndexOf(rowList, row) : row;\n                                const mergeColIndex = tableMethods.getVTColumnIndex(col);\n                                mList.push({\n                                    row: mergeRowIndex,\n                                    col: mergeColIndex,\n                                    rowspan,\n                                    colspan,\n                                    _row: row,\n                                    _col: col,\n                                    _rowspan: rowspan,\n                                    _colspan: colspan\n                                });\n                            }\n                        }\n                    }\n                });\n            }\n        };\n        const removeMerges = (merges, mList, rowList) => {\n            const rest = [];\n            if (merges) {\n                // const { treeConfig } = props\n                const { visibleColumn } = internalData;\n                if (!XEUtils.isArray(merges)) {\n                    merges = [merges];\n                }\n                // if (treeConfig && merges.length) {\n                //   errLog('vxe.error.noTree', ['merge-cells | merge-footer-items'])\n                // }\n                merges.forEach((item) => {\n                    let { row, col } = item;\n                    if (rowList && XEUtils.isNumber(row)) {\n                        row = rowList[row];\n                    }\n                    if (XEUtils.isNumber(col)) {\n                        col = visibleColumn[col];\n                    }\n                    const mcIndex = XEUtils.findIndexOf(mList, item => (item._row === row || getRowid($xeTable, item._row) === getRowid($xeTable, row)) && (item._col.id === col || item._col.id === col.id));\n                    if (mcIndex > -1) {\n                        const rItems = mList.splice(mcIndex, 1);\n                        rest.push(rItems[0]);\n                    }\n                });\n            }\n            return rest;\n        };\n        const clearAllSort = () => {\n            const { tableFullColumn } = internalData;\n            tableFullColumn.forEach((column) => {\n                column.order = null;\n            });\n        };\n        const calcTableHeight = (key) => {\n            const { parentHeight } = reactData;\n            const val = props[key];\n            let num = 0;\n            if (val) {\n                if (val === '100%' || val === 'auto') {\n                    num = parentHeight;\n                }\n                else {\n                    const excludeHeight = $xeTable.getExcludeHeight();\n                    if (isScale(val)) {\n                        num = Math.floor((XEUtils.toInteger(val) || 1) / 100 * parentHeight);\n                    }\n                    else {\n                        num = XEUtils.toNumber(val);\n                    }\n                    num = Math.max(40, num - excludeHeight);\n                }\n            }\n            return num;\n        };\n        const handleCustomRestore = (storeData) => {\n            let { collectColumn } = internalData;\n            const { resizableData, sortData, visibleData, fixedData } = storeData;\n            let hasCustomSort = false;\n            // 处理还原\n            if (resizableData || sortData || visibleData || fixedData) {\n                XEUtils.eachTree(collectColumn, (column, index, items, path, parentColumn) => {\n                    const colKey = column.getKey();\n                    // 支持一级\n                    if (!parentColumn) {\n                        if (fixedData && fixedData[colKey] !== undefined) {\n                            column.fixed = fixedData[colKey];\n                        }\n                        if (sortData && XEUtils.isNumber(sortData[colKey])) {\n                            hasCustomSort = true;\n                            column.renderSortNumber = sortData[colKey];\n                        }\n                    }\n                    if (resizableData && XEUtils.isNumber(resizableData[colKey])) {\n                        column.resizeWidth = resizableData[colKey];\n                    }\n                    if (visibleData && XEUtils.isBoolean(visibleData[colKey])) {\n                        column.visible = visibleData[colKey];\n                    }\n                });\n                // 如果自定义了顺序\n                if (hasCustomSort) {\n                    collectColumn = XEUtils.orderBy(collectColumn, 'renderSortNumber');\n                    internalData.collectColumn = collectColumn;\n                    internalData.tableFullColumn = getColumnList(collectColumn);\n                }\n                reactData.isCustomStatus = true;\n            }\n            else {\n                reactData.isCustomStatus = false;\n            }\n        };\n        /**\n         * 还原自定义列操作状态\n         */\n        const restoreCustomStorage = () => {\n            const { customConfig } = props;\n            const tableId = computeTableId.value;\n            const customOpts = computeCustomOpts.value;\n            const { storage, restoreStore } = customOpts;\n            const isAllCustom = storage === true;\n            const storageOpts = isAllCustom ? {} : Object.assign({}, storage || {});\n            const isCustomResizable = isAllCustom || storageOpts.resizable;\n            const isCustomVisible = isAllCustom || storageOpts.visible;\n            const isCustomFixed = isAllCustom || storageOpts.fixed;\n            const isCustomSort = isAllCustom || storageOpts.sort;\n            if ((customConfig ? isEnableConf(customOpts) : customOpts.enabled) && (isCustomResizable || isCustomVisible || isCustomFixed || isCustomSort)) {\n                if (!tableId) {\n                    errLog('vxe.error.reqProp', ['id']);\n                    return;\n                }\n                const storeData = getCustomStorageMap(tableId);\n                if (restoreStore) {\n                    return Promise.resolve(restoreStore({ id: tableId, type: 'restore', storeData })).then(storeData => {\n                        if (!storeData) {\n                            return;\n                        }\n                        return handleCustomRestore(storeData);\n                    }).catch(e => e);\n                }\n                else {\n                    return handleCustomRestore(storeData);\n                }\n            }\n        };\n        /**\n         * 更新数据列的 Map\n         * 牺牲数据组装的耗时，用来换取使用过程中的流畅\n         */\n        const cacheColumnMap = () => {\n            const { tableFullColumn, collectColumn } = internalData;\n            const fullColumnIdData = internalData.fullColumnIdData = {};\n            const fullColumnFieldData = internalData.fullColumnFieldData = {};\n            const mouseOpts = computeMouseOpts.value;\n            const expandOpts = computeExpandOpts.value;\n            const columnOpts = computeColumnOpts.value;\n            const columnDragOpts = computeColumnDragOpts.value;\n            const { isCrossDrag, isSelfToChildDrag } = columnDragOpts;\n            const customOpts = computeCustomOpts.value;\n            const { storage } = customOpts;\n            const rowOpts = computeRowOpts.value;\n            const isGroup = collectColumn.some(hasChildrenList);\n            let isAllOverflow = !!props.showOverflow;\n            let expandColumn;\n            let treeNodeColumn;\n            let checkboxColumn;\n            let radioColumn;\n            let htmlColumn;\n            let hasFixed;\n            const handleFunc = (column, index, items, path, parentColumn) => {\n                const { id: colid, field, fixed, type, treeNode } = column;\n                const rest = { $index: -1, _index: -1, column, colid, index, items, parent: parentColumn || null, width: 0, oLeft: 0 };\n                if (field) {\n                    if (fullColumnFieldData[field]) {\n                        errLog('vxe.error.colRepet', ['field', field]);\n                    }\n                    fullColumnFieldData[field] = rest;\n                }\n                else {\n                    if ((storage && !type) || (columnOpts.drag && (isCrossDrag || isSelfToChildDrag))) {\n                        errLog('vxe.error.reqProp', [`${column.getTitle() || type || ''} -> column.field=?`]);\n                    }\n                }\n                if (!hasFixed && fixed) {\n                    hasFixed = fixed;\n                }\n                if (!htmlColumn && type === 'html') {\n                    htmlColumn = column;\n                }\n                if (treeNode) {\n                    if (process.env.NODE_ENV === 'development') {\n                        if (treeNodeColumn) {\n                            warnLog('vxe.error.colRepet', ['tree-node', treeNode]);\n                        }\n                    }\n                    if (!treeNodeColumn) {\n                        treeNodeColumn = column;\n                    }\n                }\n                else if (type === 'expand') {\n                    if (process.env.NODE_ENV === 'development') {\n                        if (expandColumn) {\n                            warnLog('vxe.error.colRepet', ['type', type]);\n                        }\n                    }\n                    if (!expandColumn) {\n                        expandColumn = column;\n                    }\n                }\n                if (process.env.NODE_ENV === 'development') {\n                    if (type === 'checkbox') {\n                        if (checkboxColumn) {\n                            warnLog('vxe.error.colRepet', ['type', type]);\n                        }\n                        if (!checkboxColumn) {\n                            checkboxColumn = column;\n                        }\n                    }\n                    else if (type === 'radio') {\n                        if (radioColumn) {\n                            warnLog('vxe.error.colRepet', ['type', type]);\n                        }\n                        if (!radioColumn) {\n                            radioColumn = column;\n                        }\n                    }\n                }\n                if (isAllOverflow && column.showOverflow === false) {\n                    isAllOverflow = false;\n                }\n                if (fullColumnIdData[colid]) {\n                    errLog('vxe.error.colRepet', ['colId', colid]);\n                }\n                fullColumnIdData[colid] = rest;\n            };\n            if (isGroup) {\n                XEUtils.eachTree(collectColumn, (column, index, items, path, parentColumn, nodes) => {\n                    column.level = nodes.length;\n                    handleFunc(column, index, items, path, parentColumn);\n                });\n            }\n            else {\n                tableFullColumn.forEach(handleFunc);\n            }\n            if ((expandColumn && expandOpts.mode !== 'fixed') && mouseOpts.area) {\n                errLog('vxe.error.errConflicts', ['mouse-config.area', 'column.type=expand']);\n            }\n            if (htmlColumn) {\n                if (!columnOpts.useKey) {\n                    errLog('vxe.error.reqProp', ['column-config.useKey & column.type=html']);\n                }\n                if (!rowOpts.useKey) {\n                    errLog('vxe.error.reqProp', ['row-config.useKey & column.type=html']);\n                }\n            }\n            reactData.isGroup = isGroup;\n            reactData.treeNodeColumn = treeNodeColumn;\n            reactData.expandColumn = expandColumn;\n            reactData.isAllOverflow = isAllOverflow;\n        };\n        const updateHeight = () => {\n            internalData.customHeight = calcTableHeight('height');\n            internalData.customMinHeight = calcTableHeight('minHeight');\n            internalData.customMaxHeight = calcTableHeight('maxHeight');\n        };\n        const calcColumnAutoWidth = (column, wrapperEl) => {\n            const cellElemList = wrapperEl.querySelectorAll(`.vxe-cell--wrapper[colid=\"${column.id}\"]`);\n            let leftRightPadding = 0;\n            const firstCellEl = cellElemList[0];\n            if (firstCellEl && firstCellEl.parentElement) {\n                const cellStyle = getComputedStyle(firstCellEl.parentElement);\n                leftRightPadding = Math.ceil(XEUtils.toNumber(cellStyle.paddingLeft) + XEUtils.toNumber(cellStyle.paddingRight));\n            }\n            let colWidth = column.renderAutoWidth - leftRightPadding;\n            for (let i = 0; i < cellElemList.length; i++) {\n                const celEl = cellElemList[i];\n                colWidth = Math.max(colWidth, celEl ? Math.ceil(celEl.scrollWidth) + 4 : 0);\n            }\n            return colWidth + leftRightPadding;\n        };\n        const calcCellWidth = () => {\n            const autoWidthColumnList = computeAutoWidthColumnList.value;\n            const { fullColumnIdData } = internalData;\n            const el = refElem.value;\n            if (el) {\n                el.setAttribute('data-calc-col', 'Y');\n                autoWidthColumnList.forEach(column => {\n                    const colid = column.id;\n                    const colRest = fullColumnIdData[colid];\n                    const colWidth = calcColumnAutoWidth(column, el);\n                    if (colRest) {\n                        colRest.width = Math.max(colWidth, colRest.width);\n                    }\n                    column.renderAutoWidth = colWidth;\n                });\n                $xeTable.analyColumnWidth();\n                el.removeAttribute('data-calc-col');\n            }\n        };\n        /**\n         * 列宽算法，计算单元格列宽，动态分配可用剩余空间\n         * 支持 px、%、固定 混合分配\n         * 支持动态列表调整分配\n         * 支持自动分配偏移量\n         * 支持 width=60 width=60px width=10% min-width=60 min-width=60px min-width=10%\n         */\n        const autoCellWidth = () => {\n            const { elemStore } = internalData;\n            const scrollbarOpts = computeScrollbarOpts.value;\n            const tableBody = refTableBody.value;\n            const bodyElem = tableBody ? tableBody.$el : null;\n            if (!bodyElem) {\n                return;\n            }\n            const yHandleEl = refScrollYHandleElem.value;\n            if (!yHandleEl) {\n                return;\n            }\n            const xHandleEl = refScrollXHandleElem.value;\n            if (!xHandleEl) {\n                return;\n            }\n            let tWidth = 0;\n            const minCellWidth = 40; // 列宽最少限制 40px\n            const bodyWidth = bodyElem.clientWidth;\n            let remainWidth = bodyWidth;\n            let meanWidth = remainWidth / 100;\n            const { fit } = props;\n            const { columnStore } = reactData;\n            const { resizeList, pxMinList, autoMinList, pxList, scaleList, scaleMinList, autoList, remainList } = columnStore;\n            // 最小宽\n            pxMinList.forEach((column) => {\n                const minWidth = XEUtils.toInteger(column.minWidth);\n                tWidth += minWidth;\n                column.renderWidth = minWidth;\n            });\n            // 最小自适应\n            autoMinList.forEach((column) => {\n                const caWidth = Math.max(60, XEUtils.toInteger(column.renderAutoWidth));\n                tWidth += caWidth;\n                column.renderWidth = caWidth;\n            });\n            // 最小百分比\n            scaleMinList.forEach((column) => {\n                const smWidth = Math.floor(XEUtils.toInteger(column.minWidth) * meanWidth);\n                tWidth += smWidth;\n                column.renderWidth = smWidth;\n            });\n            // 固定百分比\n            scaleList.forEach((column) => {\n                const sfWidth = Math.floor(XEUtils.toInteger(column.width) * meanWidth);\n                tWidth += sfWidth;\n                column.renderWidth = sfWidth;\n            });\n            // 固定宽\n            pxList.forEach((column) => {\n                const pWidth = XEUtils.toInteger(column.width);\n                tWidth += pWidth;\n                column.renderWidth = pWidth;\n            });\n            // 自适应宽\n            autoList.forEach((column) => {\n                const aWidth = Math.max(60, XEUtils.toInteger(column.renderAutoWidth));\n                tWidth += aWidth;\n                column.renderWidth = aWidth;\n            });\n            // 调整了列宽\n            resizeList.forEach((column) => {\n                const reWidth = XEUtils.toInteger(column.resizeWidth);\n                tWidth += reWidth;\n                column.renderWidth = reWidth;\n            });\n            remainWidth -= tWidth;\n            meanWidth = remainWidth > 0 ? Math.floor(remainWidth / (scaleMinList.length + pxMinList.length + autoMinList.length + remainList.length)) : 0;\n            if (fit) {\n                if (remainWidth > 0) {\n                    scaleMinList.concat(pxMinList).concat(autoMinList).forEach((column) => {\n                        tWidth += meanWidth;\n                        column.renderWidth += meanWidth;\n                    });\n                }\n            }\n            else {\n                meanWidth = minCellWidth;\n            }\n            // 剩余均分\n            remainList.forEach((column) => {\n                const width = Math.max(meanWidth, minCellWidth);\n                column.renderWidth = width;\n                tWidth += width;\n            });\n            if (fit) {\n                /**\n                 * 偏移量算法\n                 * 如果所有列足够放的情况下，从最后动态列开始分配\n                 */\n                const dynamicList = scaleList.concat(scaleMinList).concat(pxMinList).concat(autoMinList).concat(remainList);\n                let dynamicSize = dynamicList.length - 1;\n                if (dynamicSize > 0) {\n                    let i = bodyWidth - tWidth;\n                    if (i > 0) {\n                        while (i > 0 && dynamicSize >= 0) {\n                            i--;\n                            dynamicList[dynamicSize--].renderWidth++;\n                        }\n                        tWidth = bodyWidth;\n                    }\n                }\n            }\n            const tableHeight = bodyElem.offsetHeight;\n            const overflowY = yHandleEl.scrollHeight > yHandleEl.clientHeight;\n            reactData.scrollbarWidth = Math.max(scrollbarOpts.width || 0, yHandleEl.offsetWidth - yHandleEl.clientWidth);\n            reactData.overflowY = overflowY;\n            reactData.scrollXWidth = tWidth;\n            internalData.tableHeight = tableHeight;\n            const headerTableElem = getRefElem(elemStore['main-header-table']);\n            const footerTableElem = getRefElem(elemStore['main-footer-table']);\n            const headerHeight = headerTableElem ? headerTableElem.clientHeight : 0;\n            const overflowX = tWidth > bodyWidth;\n            const footerHeight = footerTableElem ? footerTableElem.clientHeight : 0;\n            reactData.scrollbarHeight = Math.max(scrollbarOpts.height || 0, xHandleEl.offsetHeight - xHandleEl.clientHeight);\n            internalData.headerHeight = headerHeight;\n            internalData.footerHeight = footerHeight;\n            reactData.overflowX = overflowX;\n            reactData.resizeWidthFlag++;\n            updateColumnOffsetLeft();\n            updateHeight();\n            reactData.parentHeight = Math.max(internalData.headerHeight + footerHeight + 20, $xeTable.getParentHeight());\n            if (overflowX) {\n                $xeTable.checkScrolling();\n            }\n        };\n        const calcCellAutoHeight = (rowRest, wrapperEl) => {\n            const cellElemList = wrapperEl.querySelectorAll(`.vxe-cell--wrapper[rowid=\"${rowRest.rowid}\"]`);\n            let colHeight = rowRest.height;\n            for (let i = 0; i < cellElemList.length; i++) {\n                const cellElem = cellElemList[i];\n                const tdEl = cellElem.parentElement;\n                const topBottomPadding = Math.ceil(XEUtils.toNumber(tdEl.style.paddingTop) + XEUtils.toNumber(tdEl.style.paddingBottom));\n                const cellHeight = cellElem ? cellElem.clientHeight : 0;\n                colHeight = Math.max(colHeight - topBottomPadding, Math.ceil(cellHeight));\n            }\n            return colHeight;\n        };\n        const calcCellHeight = () => {\n            const { tableData, isAllOverflow, scrollYLoad, scrollXLoad } = reactData;\n            const { fullAllDataRowIdData } = internalData;\n            const defaultRowHeight = computeDefaultRowHeight.value;\n            const el = refElem.value;\n            if (!isAllOverflow && scrollYLoad && el) {\n                const { handleGetRowId } = createHandleGetRowId($xeTable);\n                el.setAttribute('data-calc-row', 'Y');\n                tableData.forEach(row => {\n                    const rowid = handleGetRowId(row);\n                    const rowRest = fullAllDataRowIdData[rowid];\n                    if (rowRest) {\n                        const reHeight = calcCellAutoHeight(rowRest, el);\n                        rowRest.height = Math.max(defaultRowHeight, scrollXLoad ? Math.max(rowRest.height, reHeight) : reHeight);\n                    }\n                    el.removeAttribute('data-calc-row');\n                });\n                reactData.calcCellHeightFlag++;\n            }\n        };\n        const getOrderField = (column) => {\n            const { sortBy, sortType } = column;\n            return (row) => {\n                let cellValue;\n                if (sortBy) {\n                    cellValue = XEUtils.isFunction(sortBy) ? sortBy({ row, column }) : XEUtils.get(row, sortBy);\n                }\n                else {\n                    cellValue = tableMethods.getCellLabel(row, column);\n                }\n                if (!sortType || sortType === 'auto') {\n                    return isNaN(cellValue) ? cellValue : XEUtils.toNumber(cellValue);\n                }\n                else if (sortType === 'number') {\n                    return XEUtils.toNumber(cellValue);\n                }\n                else if (sortType === 'string') {\n                    return XEUtils.toValueString(cellValue);\n                }\n                return cellValue;\n            };\n        };\n        const updateAfterListIndex = () => {\n            const { treeConfig } = props;\n            const { afterFullData, fullDataRowIdData, fullAllDataRowIdData } = internalData;\n            const { handleGetRowId } = createHandleGetRowId($xeTable);\n            const fullMaps = {};\n            afterFullData.forEach((row, index) => {\n                const rowid = handleGetRowId(row);\n                const rowRest = fullAllDataRowIdData[rowid];\n                const seq = index + 1;\n                if (rowRest) {\n                    if (!treeConfig) {\n                        rowRest.seq = seq;\n                    }\n                    rowRest._index = index;\n                }\n                else {\n                    const rest = { row, rowid, seq, index: -1, $index: -1, _index: index, treeIndex: -1, items: [], parent: null, level: 0, height: 0, resizeHeight: 0, oTop: 0, expandHeight: 0 };\n                    fullAllDataRowIdData[rowid] = rest;\n                    fullDataRowIdData[rowid] = rest;\n                }\n                fullMaps[rowid] = row;\n            });\n            internalData.afterFullRowMaps = fullMaps;\n        };\n        /**\n         * 预编译\n         * 对渲染中的数据提前解析序号及索引。牺牲提前编译耗时换取渲染中额外损耗，使运行时更加流畅\n         */\n        const updateAfterDataIndex = () => {\n            const { treeConfig } = props;\n            const { fullDataRowIdData, fullAllDataRowIdData, afterTreeFullData } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const { transform } = treeOpts;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const fullMaps = {};\n            if (treeConfig) {\n                const { handleGetRowId } = createHandleGetRowId($xeTable);\n                XEUtils.eachTree(afterTreeFullData, (row, index, items, path) => {\n                    const rowid = handleGetRowId(row);\n                    const rowRest = fullAllDataRowIdData[rowid];\n                    const seq = path.map((num, i) => i % 2 === 0 ? (Number(num) + 1) : '.').join('');\n                    if (rowRest) {\n                        rowRest.seq = seq;\n                        rowRest.treeIndex = index;\n                    }\n                    else {\n                        const rest = { row, rowid, seq, index: -1, $index: -1, _index: -1, treeIndex: -1, items: [], parent: null, level: 0, height: 0, resizeHeight: 0, oTop: 0, expandHeight: 0 };\n                        fullAllDataRowIdData[rowid] = rest;\n                        fullDataRowIdData[rowid] = rest;\n                    }\n                    fullMaps[rowid] = row;\n                }, { children: transform ? treeOpts.mapChildrenField : childrenField });\n                internalData.afterFullRowMaps = fullMaps;\n                updateAfterListIndex();\n            }\n            else {\n                updateAfterListIndex();\n            }\n        };\n        /**\n         * 如果为虚拟树，将树结构拍平\n         * @returns\n         */\n        const handleVirtualTreeToList = () => {\n            const { treeConfig } = props;\n            const { fullAllDataRowIdData, treeExpandedMaps } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            if (treeConfig && treeOpts.transform) {\n                const { handleGetRowId } = createHandleGetRowId($xeTable);\n                const fullData = [];\n                const expandMaps = {};\n                XEUtils.eachTree(internalData.afterTreeFullData, (row, index, items, path, parentRow) => {\n                    const rowid = handleGetRowId(row);\n                    const parentRowid = handleGetRowId(parentRow);\n                    if (!parentRow || (expandMaps[parentRowid] && treeExpandedMaps[parentRowid])) {\n                        const rowRest = fullAllDataRowIdData[rowid];\n                        if (rowRest) {\n                            rowRest._index = fullData.length;\n                        }\n                        expandMaps[rowid] = 1;\n                        fullData.push(row);\n                    }\n                }, { children: childrenField });\n                internalData.afterFullData = fullData;\n                updateScrollYStatus(fullData);\n                return fullData;\n            }\n            return internalData.afterFullData;\n        };\n        /**\n         * 获取处理后全量的表格数据\n         * 如果存在筛选条件，继续处理\n         */\n        const updateAfterFullData = () => {\n            const { treeConfig } = props;\n            const { tableFullColumn, tableFullData, tableFullTreeData } = internalData;\n            const filterOpts = computeFilterOpts.value;\n            const sortOpts = computeSortOpts.value;\n            const treeOpts = computeTreeOpts.value;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const { transform, rowField, parentField, mapChildrenField } = treeOpts;\n            const { isEvery, remote: allRemoteFilter, filterMethod: allFilterMethod } = filterOpts;\n            const { remote: allRemoteSort, sortMethod: allSortMethod, multiple: sortMultiple, chronological } = sortOpts;\n            let tableData = [];\n            let tableTree = [];\n            // 处理数据\n            if (!allRemoteFilter || !allRemoteSort) {\n                const filterColumns = [];\n                let orderColumns = [];\n                tableFullColumn.forEach((column) => {\n                    const { field, sortable, order, filters } = column;\n                    if (!allRemoteFilter && filters && filters.length) {\n                        const valueList = [];\n                        const itemList = [];\n                        filters.forEach((item) => {\n                            if (item.checked) {\n                                itemList.push(item);\n                                valueList.push(item.value);\n                            }\n                        });\n                        if (itemList.length) {\n                            filterColumns.push({ column, valueList, itemList });\n                        }\n                    }\n                    if (!allRemoteSort && sortable && order) {\n                        orderColumns.push({ column, field, property: field, order: order, sortTime: column.sortTime });\n                    }\n                });\n                if (sortMultiple && chronological && orderColumns.length > 1) {\n                    orderColumns = XEUtils.orderBy(orderColumns, 'sortTime');\n                }\n                // 处理筛选\n                // 支持单列、多列、组合筛选\n                if (!allRemoteFilter && filterColumns.length) {\n                    const handleFilter = (row) => {\n                        return filterColumns.every(({ column, valueList, itemList }) => {\n                            const { filterMethod, filterRender } = column;\n                            const compConf = isEnableConf(filterRender) ? renderer.get(filterRender.name) : null;\n                            const compFilterMethod = compConf ? (compConf.tableFilterMethod || compConf.filterMethod) : null;\n                            const tdFilterMethod = compConf ? (compConf.tableFilterDefaultMethod || compConf.defaultTableFilterMethod || compConf.defaultFilterMethod) : null;\n                            const cellValue = getCellValue(row, column);\n                            if (filterMethod) {\n                                return itemList.some((item) => filterMethod({ value: item.value, option: item, cellValue, row, column, $table: $xeTable }));\n                            }\n                            else if (compFilterMethod) {\n                                return itemList.some((item) => compFilterMethod({ value: item.value, option: item, cellValue, row, column, $table: $xeTable }));\n                            }\n                            else if (allFilterMethod) {\n                                return allFilterMethod({ options: itemList, values: valueList, cellValue, row, column });\n                            }\n                            else if (tdFilterMethod) {\n                                return itemList.some((item) => tdFilterMethod({ value: item.value, option: item, cellValue, row, column, $table: $xeTable }));\n                            }\n                            return valueList.indexOf(XEUtils.get(row, column.field)) > -1;\n                        });\n                    };\n                    if (treeConfig && transform) {\n                        // 筛选虚拟树\n                        tableTree = XEUtils.searchTree(tableFullTreeData, handleFilter, {\n                            original: true,\n                            isEvery,\n                            children: mapChildrenField,\n                            mapChildren: childrenField\n                        });\n                        tableData = tableTree;\n                    }\n                    else {\n                        tableData = treeConfig ? tableFullTreeData.filter(handleFilter) : tableFullData.filter(handleFilter);\n                        tableTree = tableData;\n                    }\n                }\n                else {\n                    if (treeConfig && transform) {\n                        // 还原虚拟树\n                        tableTree = XEUtils.searchTree(tableFullTreeData, () => true, {\n                            original: true,\n                            isEvery,\n                            children: mapChildrenField,\n                            mapChildren: childrenField\n                        });\n                        tableData = tableTree;\n                    }\n                    else {\n                        tableData = treeConfig ? tableFullTreeData.slice(0) : tableFullData.slice(0);\n                        tableTree = tableData;\n                    }\n                }\n                // 处理排序（不能用于树形结构）\n                // 支持单列、多列、组合排序\n                if (!allRemoteSort && orderColumns.length) {\n                    if (treeConfig && transform) {\n                        // 虚拟树和列表一样，只能排序根级节点\n                        if (allSortMethod) {\n                            const sortRests = allSortMethod({ data: tableTree, sortList: orderColumns, $table: $xeTable });\n                            tableTree = XEUtils.isArray(sortRests) ? sortRests : tableTree;\n                        }\n                        else {\n                            const treeList = XEUtils.toTreeArray(tableTree, {\n                                children: mapChildrenField\n                            });\n                            tableTree = XEUtils.toArrayTree(XEUtils.orderBy(treeList, orderColumns.map(({ column, order }) => [getOrderField(column), order])), {\n                                key: rowField,\n                                parentKey: parentField,\n                                children: childrenField,\n                                mapChildren: mapChildrenField\n                            });\n                        }\n                        tableData = tableTree;\n                    }\n                    else {\n                        if (allSortMethod) {\n                            const sortRests = allSortMethod({ data: tableData, sortList: orderColumns, $table: $xeTable });\n                            tableData = XEUtils.isArray(sortRests) ? sortRests : tableData;\n                        }\n                        else {\n                            tableData = XEUtils.orderBy(tableData, orderColumns.map(({ column, order }) => [getOrderField(column), order]));\n                        }\n                        tableTree = tableData;\n                    }\n                }\n            }\n            else {\n                if (treeConfig && transform) {\n                    // 还原虚拟树\n                    tableTree = XEUtils.searchTree(tableFullTreeData, () => true, {\n                        original: true,\n                        isEvery,\n                        children: treeOpts.mapChildrenField,\n                        mapChildren: childrenField\n                    });\n                    tableData = tableTree;\n                }\n                else {\n                    tableData = treeConfig ? tableFullTreeData.slice(0) : tableFullData.slice(0);\n                    tableTree = tableData;\n                }\n            }\n            internalData.afterFullData = tableData;\n            internalData.afterTreeFullData = tableTree;\n            updateAfterDataIndex();\n        };\n        const updateStyle = () => {\n            const { showHeaderOverflow: allColumnHeaderOverflow, showFooterOverflow: allColumnFooterOverflow, mouseConfig, spanMethod, footerSpanMethod } = props;\n            const { isGroup, currentRow, tableColumn, scrollXLoad, scrollYLoad, overflowX, scrollbarWidth, overflowY, scrollbarHeight, scrollXWidth, columnStore, editStore, isAllOverflow, expandColumn } = reactData;\n            const { visibleColumn, tableHeight, headerHeight, footerHeight, elemStore, customHeight, customMinHeight, customMaxHeight } = internalData;\n            const el = refElem.value;\n            if (!el) {\n                return;\n            }\n            const containerList = ['main', 'left', 'right'];\n            const osbWidth = overflowY ? scrollbarWidth : 0;\n            const osbHeight = overflowX ? scrollbarHeight : 0;\n            const emptyPlaceholderElem = refEmptyPlaceholder.value;\n            const mouseOpts = computeMouseOpts.value;\n            const expandOpts = computeExpandOpts.value;\n            const bodyWrapperElem = getRefElem(elemStore['main-body-wrapper']);\n            const bodyTableElem = getRefElem(elemStore['main-body-table']);\n            if (emptyPlaceholderElem) {\n                emptyPlaceholderElem.style.top = `${headerHeight}px`;\n                emptyPlaceholderElem.style.height = bodyWrapperElem ? `${bodyWrapperElem.offsetHeight - osbHeight}px` : '';\n            }\n            let bodyHeight = 0;\n            let bodyMaxHeight = 0;\n            const bodyMinHeight = customMinHeight - headerHeight - footerHeight - osbHeight;\n            if (customMaxHeight) {\n                bodyMaxHeight = Math.max(bodyMinHeight, customMaxHeight - headerHeight - footerHeight - osbHeight);\n            }\n            if (customHeight) {\n                bodyHeight = customHeight - headerHeight - footerHeight - osbHeight;\n            }\n            if (!bodyHeight) {\n                if (bodyTableElem) {\n                    bodyHeight = bodyTableElem.clientHeight;\n                }\n            }\n            if (bodyHeight) {\n                if (bodyMaxHeight) {\n                    bodyHeight = Math.min(bodyMaxHeight, bodyHeight);\n                }\n                bodyHeight = Math.max(bodyMinHeight, bodyHeight);\n            }\n            const scrollbarXToTop = computeScrollbarXToTop.value;\n            const xLeftCornerEl = refScrollXLeftCornerElem.value;\n            const xRightCornerEl = refScrollXRightCornerElem.value;\n            const scrollXVirtualEl = refScrollXVirtualElem.value;\n            if (scrollXVirtualEl) {\n                scrollXVirtualEl.style.height = `${osbHeight}px`;\n                scrollXVirtualEl.style.visibility = overflowX ? 'visible' : 'hidden';\n            }\n            const xWrapperEl = refScrollXWrapperElem.value;\n            if (xWrapperEl) {\n                xWrapperEl.style.left = scrollbarXToTop ? `${osbWidth}px` : '';\n                xWrapperEl.style.width = `${el.clientWidth - osbWidth}px`;\n            }\n            if (xLeftCornerEl) {\n                xLeftCornerEl.style.width = scrollbarXToTop ? `${osbWidth}px` : '';\n                xLeftCornerEl.style.display = scrollbarXToTop ? (osbWidth && osbHeight ? 'block' : '') : '';\n            }\n            if (xRightCornerEl) {\n                xRightCornerEl.style.width = scrollbarXToTop ? '' : `${osbWidth}px`;\n                xRightCornerEl.style.display = scrollbarXToTop ? '' : (osbWidth && osbHeight ? 'block' : '');\n            }\n            const scrollYVirtualEl = refScrollYVirtualElem.value;\n            if (scrollYVirtualEl) {\n                scrollYVirtualEl.style.width = `${osbWidth}px`;\n                scrollYVirtualEl.style.height = `${bodyHeight + headerHeight + footerHeight}px`;\n                scrollYVirtualEl.style.visibility = overflowY ? 'visible' : 'hidden';\n            }\n            const yTopCornerEl = refScrollYTopCornerElem.value;\n            if (yTopCornerEl) {\n                yTopCornerEl.style.height = `${headerHeight}px`;\n                yTopCornerEl.style.display = headerHeight ? 'block' : '';\n            }\n            const yWrapperEl = refScrollYWrapperElem.value;\n            if (yWrapperEl) {\n                yWrapperEl.style.height = `${bodyHeight}px`;\n                yWrapperEl.style.top = `${headerHeight}px`;\n            }\n            const yBottomCornerEl = refScrollYBottomCornerElem.value;\n            if (yBottomCornerEl) {\n                yBottomCornerEl.style.height = `${footerHeight}px`;\n                yBottomCornerEl.style.top = `${headerHeight + bodyHeight}px`;\n                yBottomCornerEl.style.display = footerHeight ? 'block' : '';\n            }\n            const rowExpandEl = refRowExpandElem.value;\n            if (rowExpandEl) {\n                rowExpandEl.style.height = `${bodyHeight}px`;\n                rowExpandEl.style.top = `${headerHeight}px`;\n            }\n            containerList.forEach((name, index) => {\n                const fixedType = index > 0 ? name : '';\n                const layoutList = ['header', 'body', 'footer'];\n                const isFixedLeft = fixedType === 'left';\n                let fixedColumn = [];\n                let fixedWrapperElem;\n                if (fixedType) {\n                    fixedColumn = isFixedLeft ? columnStore.leftList : columnStore.rightList;\n                    fixedWrapperElem = isFixedLeft ? refLeftContainer.value : refRightContainer.value;\n                }\n                layoutList.forEach(layout => {\n                    const wrapperElem = getRefElem(elemStore[`${name}-${layout}-wrapper`]);\n                    const currScrollElem = getRefElem(elemStore[`${name}-${layout}-scroll`]);\n                    const tableElem = getRefElem(elemStore[`${name}-${layout}-table`]);\n                    if (layout === 'header') {\n                        // 表头体样式处理\n                        // 横向滚动渲染\n                        let renderColumnList = tableColumn;\n                        let isOptimizeMode = false;\n                        if (isGroup) {\n                            renderColumnList = visibleColumn;\n                        }\n                        else {\n                            // 如果是使用优化模式\n                            if (scrollXLoad || scrollYLoad || allColumnHeaderOverflow) {\n                                if (spanMethod || footerSpanMethod) {\n                                    // 如果不支持优化模式\n                                }\n                                else {\n                                    isOptimizeMode = true;\n                                }\n                            }\n                            if (fixedType) {\n                                renderColumnList = visibleColumn;\n                                // 如果是使用优化模式\n                                if (isOptimizeMode) {\n                                    renderColumnList = fixedColumn || [];\n                                }\n                            }\n                        }\n                        const tWidth = renderColumnList.reduce((previous, column) => previous + column.renderWidth, 0);\n                        if (fixedType) {\n                            if (isGroup) {\n                                if (wrapperElem) {\n                                    wrapperElem.style.width = scrollXWidth ? `${scrollXWidth}px` : '';\n                                }\n                            }\n                            else {\n                                if (isOptimizeMode) {\n                                    if (wrapperElem) {\n                                        wrapperElem.style.width = tWidth ? `${tWidth}px` : '';\n                                    }\n                                }\n                                else {\n                                    if (wrapperElem) {\n                                        wrapperElem.style.width = scrollXWidth ? `${scrollXWidth}px` : '';\n                                    }\n                                }\n                            }\n                        }\n                        if (currScrollElem) {\n                            currScrollElem.style.height = `${headerHeight}px`;\n                        }\n                        if (tableElem) {\n                            tableElem.style.width = tWidth ? `${tWidth}px` : '';\n                        }\n                    }\n                    else if (layout === 'body') {\n                        if (currScrollElem) {\n                            currScrollElem.style.maxHeight = customMaxHeight ? `${bodyMaxHeight}px` : '';\n                            currScrollElem.style.height = customHeight ? `${bodyHeight}px` : '';\n                            currScrollElem.style.minHeight = `${bodyMinHeight}px`;\n                        }\n                        // 如果是固定列\n                        if (fixedWrapperElem) {\n                            if (wrapperElem) {\n                                wrapperElem.style.top = `${headerHeight}px`;\n                            }\n                            fixedWrapperElem.style.height = `${customHeight > 0 ? customHeight : (tableHeight + headerHeight + footerHeight + osbHeight)}px`;\n                            fixedWrapperElem.style.width = `${fixedColumn.reduce((previous, column) => previous + column.renderWidth, 0)}px`;\n                        }\n                        let renderColumnList = tableColumn;\n                        let isOptimizeMode = false;\n                        // 如果是使用优化模式\n                        if (scrollXLoad || scrollYLoad || isAllOverflow) {\n                            if ((expandColumn && expandOpts.mode !== 'fixed') || spanMethod || footerSpanMethod) {\n                                // 如果不支持优化模式\n                            }\n                            else {\n                                isOptimizeMode = true;\n                            }\n                        }\n                        if (fixedType) {\n                            renderColumnList = visibleColumn;\n                            if (isOptimizeMode) {\n                                renderColumnList = fixedColumn || [];\n                            }\n                        }\n                        const tWidth = renderColumnList.reduce((previous, column) => previous + column.renderWidth, 0);\n                        if (fixedType) {\n                            if (isOptimizeMode) {\n                                if (wrapperElem) {\n                                    wrapperElem.style.width = tWidth ? `${tWidth}px` : '';\n                                }\n                            }\n                            else {\n                                if (wrapperElem) {\n                                    wrapperElem.style.width = scrollXWidth ? `${scrollXWidth}px` : '';\n                                }\n                            }\n                        }\n                        if (tableElem) {\n                            tableElem.style.width = tWidth ? `${tWidth}px` : '';\n                            // 兼容性处理\n                            tableElem.style.paddingRight = osbWidth && fixedType && (browseObj['-moz'] || browseObj.safari) ? `${osbWidth}px` : '';\n                        }\n                        const emptyBlockElem = getRefElem(elemStore[`${name}-${layout}-emptyBlock`]);\n                        if (emptyBlockElem) {\n                            emptyBlockElem.style.width = tWidth ? `${tWidth}px` : '';\n                        }\n                    }\n                    else if (layout === 'footer') {\n                        let renderColumnList = tableColumn;\n                        let isOptimizeMode = false;\n                        // 如果是使用优化模式\n                        if (scrollXLoad || scrollYLoad || allColumnFooterOverflow) {\n                            if (spanMethod || footerSpanMethod) {\n                                // 如果不支持优化模式\n                            }\n                            else {\n                                isOptimizeMode = true;\n                            }\n                        }\n                        if (fixedType) {\n                            renderColumnList = visibleColumn;\n                            if (isOptimizeMode) {\n                                renderColumnList = fixedColumn || [];\n                            }\n                        }\n                        const tWidth = renderColumnList.reduce((previous, column) => previous + column.renderWidth, 0);\n                        if (fixedType) {\n                            if (isOptimizeMode) {\n                                if (wrapperElem) {\n                                    wrapperElem.style.width = tWidth ? `${tWidth}px` : '';\n                                }\n                            }\n                            else {\n                                if (wrapperElem) {\n                                    wrapperElem.style.width = scrollXWidth ? `${scrollXWidth}px` : '';\n                                }\n                            }\n                        }\n                        if (currScrollElem) {\n                            currScrollElem.style.height = `${footerHeight}px`;\n                            // 如果是固定列\n                            if (fixedWrapperElem) {\n                                if (wrapperElem) {\n                                    wrapperElem.style.top = `${customHeight > 0 ? customHeight - footerHeight - osbHeight : tableHeight + headerHeight}px`;\n                                }\n                            }\n                        }\n                        if (tableElem) {\n                            tableElem.style.width = tWidth ? `${tWidth}px` : '';\n                        }\n                    }\n                });\n            });\n            if (currentRow) {\n                $xeTable.setCurrentRow(currentRow);\n            }\n            if (mouseConfig && mouseOpts.selected && editStore.selected.row && editStore.selected.column) {\n                $xeTable.addCellSelectedClass();\n            }\n            return nextTick();\n        };\n        const checkValidate = (type) => {\n            if ($xeTable.triggerValidate) {\n                return $xeTable.triggerValidate(type);\n            }\n            return nextTick();\n        };\n        /**\n         * 当单元格发生改变时\n         * 如果存在规则，则校验\n         */\n        const handleChangeCell = (evnt, params) => {\n            checkValidate('blur')\n                .catch((e) => e)\n                .then(() => {\n                $xeTable.handleEdit(params, evnt)\n                    .then(() => checkValidate('change'))\n                    .catch((e) => e);\n            });\n        };\n        const handleDefaultSort = () => {\n            const { sortConfig } = props;\n            if (sortConfig) {\n                const sortOpts = computeSortOpts.value;\n                let { defaultSort } = sortOpts;\n                if (defaultSort) {\n                    if (!XEUtils.isArray(defaultSort)) {\n                        defaultSort = [defaultSort];\n                    }\n                    if (defaultSort.length) {\n                        (sortConfig.multiple ? defaultSort : defaultSort.slice(0, 1)).forEach((item, index) => {\n                            const { field, order } = item;\n                            if (field && order) {\n                                const column = $xeTable.getColumnByField(field);\n                                if (column && column.sortable) {\n                                    column.order = order;\n                                    column.sortTime = Date.now() + index;\n                                }\n                            }\n                        });\n                        if (!sortOpts.remote) {\n                            $xeTable.handleTableData(true).then(updateStyle);\n                        }\n                    }\n                }\n            }\n        };\n        /**\n         * 处理默认勾选\n         */\n        const handleDefaultSelectionChecked = () => {\n            const { checkboxConfig } = props;\n            if (checkboxConfig) {\n                const { fullDataRowIdData } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkAll, checkRowKeys } = checkboxOpts;\n                if (checkAll) {\n                    handleCheckedAllCheckboxRow(true, true);\n                }\n                else if (checkRowKeys) {\n                    const defSelection = [];\n                    checkRowKeys.forEach((rowid) => {\n                        if (fullDataRowIdData[rowid]) {\n                            defSelection.push(fullDataRowIdData[rowid].row);\n                        }\n                    });\n                    handleCheckedCheckboxRow(defSelection, true, true);\n                }\n            }\n        };\n        /**\n         * 处理单选框默认勾选\n         */\n        const handleDefaultRadioChecked = () => {\n            const { radioConfig } = props;\n            if (radioConfig) {\n                const { fullDataRowIdData } = internalData;\n                const radioOpts = computeRadioOpts.value;\n                const { checkRowKey: rowid, reserve } = radioOpts;\n                if (rowid) {\n                    if (fullDataRowIdData[rowid]) {\n                        handleCheckedRadioRow(fullDataRowIdData[rowid].row, true);\n                    }\n                    if (reserve) {\n                        const rowkey = getRowkey($xeTable);\n                        internalData.radioReserveRow = { [rowkey]: rowid };\n                    }\n                }\n            }\n        };\n        /**\n         * 处理默认展开行\n         */\n        const handleDefaultRowExpand = () => {\n            const { expandConfig } = props;\n            if (expandConfig) {\n                const { fullDataRowIdData } = internalData;\n                const expandOpts = computeExpandOpts.value;\n                const { expandAll, expandRowKeys } = expandOpts;\n                if (expandAll) {\n                    $xeTable.setAllRowExpand(true);\n                }\n                else if (expandRowKeys) {\n                    const defExpandeds = [];\n                    expandRowKeys.forEach((rowid) => {\n                        if (fullDataRowIdData[rowid]) {\n                            defExpandeds.push(fullDataRowIdData[rowid].row);\n                        }\n                    });\n                    $xeTable.setRowExpand(defExpandeds, true);\n                }\n            }\n        };\n        const handleRadioReserveRow = (row) => {\n            const radioOpts = computeRadioOpts.value;\n            if (radioOpts.reserve) {\n                internalData.radioReserveRow = row;\n            }\n        };\n        const handleCheckboxReserveRow = (row, checked) => {\n            const { checkboxReserveRowMap } = internalData;\n            const checkboxOpts = computeCheckboxOpts.value;\n            if (checkboxOpts.reserve) {\n                const rowid = getRowid($xeTable, row);\n                if (checked) {\n                    checkboxReserveRowMap[rowid] = row;\n                }\n                else if (checkboxReserveRowMap[rowid]) {\n                    delete checkboxReserveRowMap[rowid];\n                }\n            }\n        };\n        const handleCheckedRadioRow = (row, isForce) => {\n            const radioOpts = computeRadioOpts.value;\n            const { checkMethod } = radioOpts;\n            if (row && (isForce || (!checkMethod || checkMethod({ row })))) {\n                reactData.selectRadioRow = row;\n                handleRadioReserveRow(row);\n            }\n            return nextTick();\n        };\n        const handleCheckedCheckboxRow = (rows, value, isForce) => {\n            if (rows && !XEUtils.isArray(rows)) {\n                rows = [rows];\n            }\n            $xeTable.handleBatchSelectRows(rows, !!value, isForce);\n            $xeTable.checkSelectionStatus();\n            return nextTick();\n        };\n        const handleCheckedAllCheckboxRow = (checked, isForce) => {\n            const { treeConfig } = props;\n            const { afterFullData, checkboxReserveRowMap, selectCheckboxMaps } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const { checkField, reserve, checkMethod } = checkboxOpts;\n            const { handleGetRowId } = createHandleGetRowId($xeTable);\n            // indeterminateField 仅支持读取\n            const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField;\n            const selectRowMaps = {};\n            /**\n             * 绑定属性方式（高性能，有污染）\n             * 必须在行数据存在对应的属性，否则将不响应\n             */\n            if (checkField) {\n                const checkValFn = (row) => {\n                    if (isForce || (!checkMethod || checkMethod({ row }))) {\n                        if (checked) {\n                            selectRowMaps[handleGetRowId(row)] = row;\n                        }\n                        XEUtils.set(row, checkField, checked);\n                    }\n                    if (treeConfig && indeterminateField) {\n                        XEUtils.set(row, indeterminateField, false);\n                    }\n                };\n                // 如果存在选中方法\n                // 如果方法成立，则更新值，否则忽略该数据\n                if (treeConfig) {\n                    XEUtils.eachTree(afterFullData, checkValFn, { children: childrenField });\n                }\n                else {\n                    afterFullData.forEach(checkValFn);\n                }\n            }\n            else {\n                /**\n                   * 默认方式（低性能，无污染）\n                   * 无需任何属性，直接绑定\n                   */\n                if (treeConfig) {\n                    if (checked) {\n                        /**\n                           * 如果是树勾选\n                           * 如果方法成立，则添加到临时集合中\n                           */\n                        XEUtils.eachTree(afterFullData, (row) => {\n                            if (isForce || (!checkMethod || checkMethod({ row }))) {\n                                const rowid = handleGetRowId(row);\n                                selectRowMaps[rowid] = row;\n                            }\n                        }, { children: childrenField });\n                    }\n                    else {\n                        /**\n                           * 如果是树取消\n                           * 如果方法成立，则不添加到临时集合中\n                           */\n                        if (!isForce && checkMethod) {\n                            XEUtils.eachTree(afterFullData, (row) => {\n                                const rowid = handleGetRowId(row);\n                                if (checkMethod({ row }) ? 0 : selectCheckboxMaps[rowid]) {\n                                    selectRowMaps[rowid] = row;\n                                }\n                            }, { children: childrenField });\n                        }\n                    }\n                }\n                else {\n                    if (checked) {\n                        /**\n                           * 如果是行勾选\n                           * 如果存在选中方法且成立或者本身已勾选，则添加到临时集合中\n                           * 如果不存在选中方法，则添加所有数据到临时集合中\n                           */\n                        if (!isForce && checkMethod) {\n                            afterFullData.forEach((row) => {\n                                const rowid = handleGetRowId(row);\n                                if (selectCheckboxMaps[rowid] || checkMethod({ row })) {\n                                    selectRowMaps[rowid] = row;\n                                }\n                            });\n                        }\n                        else {\n                            afterFullData.forEach(row => {\n                                const rowid = handleGetRowId(row);\n                                selectRowMaps[rowid] = row;\n                            });\n                        }\n                    }\n                    else {\n                        /**\n                           * 如果是行取消\n                           * 如果方法成立，则不添加到临时集合中；如果方法不成立则判断当前是否已勾选，如果已被勾选则添加到新集合中\n                           * 如果不存在选中方法，无需处理，临时集合默认为空\n                           */\n                        if (!isForce && checkMethod) {\n                            afterFullData.forEach((row) => {\n                                const rowid = handleGetRowId(row);\n                                if (checkMethod({ row }) ? 0 : selectCheckboxMaps[rowid]) {\n                                    selectRowMaps[rowid] = row;\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n            if (reserve) {\n                if (checked) {\n                    XEUtils.each(selectRowMaps, (row, rowid) => {\n                        checkboxReserveRowMap[rowid] = row;\n                    });\n                }\n                else {\n                    afterFullData.forEach((row) => handleCheckboxReserveRow(row, false));\n                }\n            }\n            reactData.updateCheckboxFlag++;\n            internalData.selectCheckboxMaps = checkField ? {} : selectRowMaps;\n            reactData.isAllSelected = checked;\n            reactData.isIndeterminate = false;\n            internalData.treeIndeterminateRowMaps = {};\n            $xeTable.checkSelectionStatus();\n            return nextTick();\n        };\n        // 还原展开、选中等相关状态\n        const handleReserveStatus = () => {\n            const { treeConfig } = props;\n            const { expandColumn, currentRow, selectRadioRow } = reactData;\n            const { fullDataRowIdData, fullAllDataRowIdData, radioReserveRow, selectCheckboxMaps, treeExpandedMaps, rowExpandedMaps } = internalData;\n            const expandOpts = computeExpandOpts.value;\n            const treeOpts = computeTreeOpts.value;\n            const radioOpts = computeRadioOpts.value;\n            const checkboxOpts = computeCheckboxOpts.value;\n            // 单选框\n            if (selectRadioRow && !fullAllDataRowIdData[getRowid($xeTable, selectRadioRow)]) {\n                reactData.selectRadioRow = null; // 刷新单选行状态\n            }\n            // 还原保留选中状态\n            if (radioOpts.reserve && radioReserveRow) {\n                const rowid = getRowid($xeTable, radioReserveRow);\n                if (fullDataRowIdData[rowid]) {\n                    handleCheckedRadioRow(fullDataRowIdData[rowid].row, true);\n                }\n            }\n            // 复选框\n            internalData.selectCheckboxMaps = getRecoverRowMaps(selectCheckboxMaps); // 刷新多选行状态\n            reactData.updateCheckboxFlag++;\n            // 还原保留选中状态\n            if (checkboxOpts.reserve) {\n                handleCheckedCheckboxRow(handleReserveRow(internalData.checkboxReserveRowMap), true, true);\n            }\n            if (currentRow && !fullAllDataRowIdData[getRowid($xeTable, currentRow)]) {\n                reactData.currentRow = null; // 刷新当前行状态\n            }\n            // 行展开\n            internalData.rowExpandedMaps = expandColumn ? getRecoverRowMaps(rowExpandedMaps) : {}; // 刷新行展开状态\n            reactData.rowExpandedFlag++;\n            // 还原保留状态\n            if (expandColumn && expandOpts.reserve) {\n                $xeTable.setRowExpand(handleReserveRow(internalData.rowExpandedReserveRowMap), true);\n            }\n            // 树展开\n            internalData.treeExpandedMaps = treeConfig ? getRecoverRowMaps(treeExpandedMaps) : {}; // 刷新树展开状态\n            reactData.treeExpandedFlag++;\n            if (treeConfig && treeOpts.reserve) {\n                $xeTable.setTreeExpand(handleReserveRow(internalData.treeExpandedReserveRowMap), true);\n            }\n        };\n        /**\n         * 处理默认展开树节点\n         */\n        const handleDefaultTreeExpand = () => {\n            const { treeConfig } = props;\n            if (treeConfig) {\n                const { tableFullData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { expandAll, expandRowKeys } = treeOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                if (expandAll) {\n                    $xeTable.setAllTreeExpand(true);\n                }\n                else if (expandRowKeys) {\n                    const defExpandeds = [];\n                    const rowkey = getRowkey($xeTable);\n                    expandRowKeys.forEach((rowid) => {\n                        const matchObj = XEUtils.findTree(tableFullData, item => rowid === XEUtils.get(item, rowkey), { children: childrenField });\n                        if (matchObj) {\n                            defExpandeds.push(matchObj.item);\n                        }\n                    });\n                    $xeTable.setTreeExpand(defExpandeds, true);\n                }\n            }\n        };\n        const handleAsyncTreeExpandChilds = (row) => {\n            const treeOpts = computeTreeOpts.value;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const { transform, loadMethod } = treeOpts;\n            const { checkStrictly } = checkboxOpts;\n            return new Promise(resolve => {\n                if (loadMethod) {\n                    const { fullAllDataRowIdData, treeExpandLazyLoadedMaps } = internalData;\n                    const rowid = getRowid($xeTable, row);\n                    const rowRest = fullAllDataRowIdData[rowid];\n                    treeExpandLazyLoadedMaps[rowid] = row;\n                    Promise.resolve(loadMethod({ $table: $xeTable, row })).then((childRecords) => {\n                        if (rowRest) {\n                            rowRest.treeLoaded = true;\n                        }\n                        if (treeExpandLazyLoadedMaps[rowid]) {\n                            delete treeExpandLazyLoadedMaps[rowid];\n                        }\n                        if (!XEUtils.isArray(childRecords)) {\n                            childRecords = [];\n                        }\n                        if (childRecords) {\n                            return $xeTable.loadTreeChildren(row, childRecords).then(childRows => {\n                                const { treeExpandedMaps } = internalData;\n                                if (childRows.length && !treeExpandedMaps[rowid]) {\n                                    treeExpandedMaps[rowid] = row;\n                                }\n                                reactData.treeExpandedFlag++;\n                                // 如果当前节点已选中，则展开后子节点也被选中\n                                if (!checkStrictly && $xeTable.isCheckedByCheckboxRow(row)) {\n                                    handleCheckedCheckboxRow(childRows, true);\n                                }\n                                return nextTick().then(() => {\n                                    if (transform) {\n                                        $xeTable.handleTableData();\n                                        updateAfterDataIndex();\n                                        return nextTick();\n                                    }\n                                });\n                            });\n                        }\n                    }).catch(() => {\n                        const { treeExpandLazyLoadedMaps } = internalData;\n                        if (rowRest) {\n                            rowRest.treeLoaded = false;\n                        }\n                        if (treeExpandLazyLoadedMaps[rowid]) {\n                            delete treeExpandLazyLoadedMaps[rowid];\n                        }\n                    }).finally(() => {\n                        reactData.treeExpandedFlag++;\n                        nextTick().then(() => $xeTable.recalculate()).then(() => resolve());\n                    });\n                }\n                else {\n                    resolve();\n                }\n            });\n        };\n        const handleTreeExpandReserve = (row, expanded) => {\n            const { treeExpandedReserveRowMap } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            if (treeOpts.reserve) {\n                const rowid = getRowid($xeTable, row);\n                if (expanded) {\n                    treeExpandedReserveRowMap[rowid] = row;\n                }\n                else if (treeExpandedReserveRowMap[rowid]) {\n                    delete treeExpandedReserveRowMap[rowid];\n                }\n            }\n        };\n        const handleAsyncRowExpand = (row) => {\n            return new Promise(resolve => {\n                const expandOpts = computeExpandOpts.value;\n                const { loadMethod } = expandOpts;\n                if (loadMethod) {\n                    const { fullAllDataRowIdData, rowExpandLazyLoadedMaps } = internalData;\n                    const rowid = getRowid($xeTable, row);\n                    const rowRest = fullAllDataRowIdData[rowid];\n                    rowExpandLazyLoadedMaps[rowid] = row;\n                    loadMethod({ $table: $xeTable, row, rowIndex: $xeTable.getRowIndex(row), $rowIndex: $xeTable.getVMRowIndex(row) }).then(() => {\n                        const { rowExpandedMaps } = internalData;\n                        if (rowRest) {\n                            rowRest.expandLoaded = true;\n                        }\n                        rowExpandedMaps[rowid] = row;\n                        reactData.rowExpandedFlag++;\n                    }).catch(() => {\n                        if (rowRest) {\n                            rowRest.expandLoaded = false;\n                        }\n                    }).finally(() => {\n                        const { rowExpandLazyLoadedMaps } = internalData;\n                        if (rowExpandLazyLoadedMaps[rowid]) {\n                            delete rowExpandLazyLoadedMaps[rowid];\n                        }\n                        reactData.rowExpandedFlag++;\n                        nextTick()\n                            .then(() => $xeTable.recalculate())\n                            .then(() => $xeTable.updateCellAreas())\n                            .then(() => resolve());\n                    });\n                }\n                else {\n                    resolve();\n                }\n            });\n        };\n        const handleRowExpandReserve = (row, expanded) => {\n            const { rowExpandedReserveRowMap } = internalData;\n            const expandOpts = computeExpandOpts.value;\n            if (expandOpts.reserve) {\n                const rowid = getRowid($xeTable, row);\n                if (expanded) {\n                    rowExpandedReserveRowMap[rowid] = row;\n                }\n                else if (rowExpandedReserveRowMap[rowid]) {\n                    delete rowExpandedReserveRowMap[rowid];\n                }\n            }\n        };\n        const handleDefaultMergeCells = () => {\n            const { mergeCells } = props;\n            if (mergeCells) {\n                $xeTable.setMergeCells(mergeCells);\n            }\n        };\n        const handleDefaultMergeFooterItems = () => {\n            const { mergeFooterItems } = props;\n            if (mergeFooterItems) {\n                $xeTable.setMergeFooterItems(mergeFooterItems);\n            }\n        };\n        // 计算可视渲染相关数据\n        const computeScrollLoad = () => {\n            return nextTick().then(() => {\n                const { scrollXLoad, scrollYLoad } = reactData;\n                const { scrollXStore, scrollYStore } = internalData;\n                const virtualYOpts = computeVirtualYOpts.value;\n                const virtualXOpts = computeVirtualXOpts.value;\n                // 计算 X 逻辑\n                if (scrollXLoad) {\n                    const { toVisibleIndex: toXVisibleIndex, visibleSize: visibleXSize } = handleVirtualXVisible();\n                    const offsetXSize = Math.max(0, virtualXOpts.oSize ? XEUtils.toNumber(virtualXOpts.oSize) : 0);\n                    scrollXStore.preloadSize = XEUtils.toNumber(virtualXOpts.preSize);\n                    scrollXStore.offsetSize = offsetXSize;\n                    scrollXStore.visibleSize = visibleXSize;\n                    scrollXStore.endIndex = Math.max(scrollXStore.startIndex + scrollXStore.visibleSize + offsetXSize, scrollXStore.endIndex);\n                    scrollXStore.visibleStartIndex = Math.max(scrollXStore.startIndex, toXVisibleIndex);\n                    scrollXStore.visibleEndIndex = Math.min(scrollXStore.endIndex, toXVisibleIndex + visibleXSize);\n                    $xeTable.updateScrollXData().then(() => {\n                        loadScrollXData();\n                    });\n                }\n                else {\n                    $xeTable.updateScrollXSpace();\n                }\n                // 计算 Y 逻辑\n                const rowHeight = computeRowHeight();\n                scrollYStore.rowHeight = rowHeight;\n                reactData.rowHeight = rowHeight;\n                const { toVisibleIndex: toYVisibleIndex, visibleSize: visibleYSize } = handleVirtualYVisible();\n                if (scrollYLoad) {\n                    const offsetYSize = Math.max(0, virtualYOpts.oSize ? XEUtils.toNumber(virtualYOpts.oSize) : 0);\n                    scrollYStore.preloadSize = XEUtils.toNumber(virtualYOpts.preSize);\n                    scrollYStore.offsetSize = offsetYSize;\n                    scrollYStore.visibleSize = visibleYSize;\n                    scrollYStore.endIndex = Math.max(scrollYStore.startIndex + visibleYSize + offsetYSize, scrollYStore.endIndex);\n                    scrollYStore.visibleStartIndex = Math.max(scrollYStore.startIndex, toYVisibleIndex);\n                    scrollYStore.visibleEndIndex = Math.min(scrollYStore.endIndex, toYVisibleIndex + visibleYSize);\n                    $xeTable.updateScrollYData().then(() => {\n                        loadScrollYData();\n                    });\n                }\n                else {\n                    $xeTable.updateScrollYSpace();\n                }\n                nextTick(() => {\n                    updateStyle();\n                });\n            });\n        };\n        const handleRecalculateLayout = (reFull) => {\n            const el = refElem.value;\n            internalData.rceRunTime = Date.now();\n            if (!el || !el.clientWidth) {\n                return nextTick();\n            }\n            const varEl = refVarElem.value;\n            if (varEl) {\n                const [defEl, mediumEl, smallEl, miniEl] = varEl.children;\n                calcVarRowHeightConfig('default', defEl);\n                calcVarRowHeightConfig('medium', mediumEl);\n                calcVarRowHeightConfig('small', smallEl);\n                calcVarRowHeightConfig('mini', miniEl);\n            }\n            calcCellWidth();\n            autoCellWidth();\n            updateStyle();\n            updateRowExpandStyle();\n            return computeScrollLoad().then(() => {\n                if (reFull === true) {\n                    // 初始化时需要在列计算之后再执行优化运算，达到最优显示效果\n                    calcCellWidth();\n                    autoCellWidth();\n                    updateStyle();\n                    if (reFull) {\n                        updateRowOffsetTop();\n                    }\n                    updateRowExpandStyle();\n                    return computeScrollLoad();\n                }\n            });\n        };\n        /**\n         * 加载表格数据\n         * @param {Array} datas 数据\n         */\n        const loadTableData = (datas, isReset) => {\n            const { keepSource, treeConfig } = props;\n            const { scrollYLoad: oldScrollYLoad } = reactData;\n            const { scrollYStore, scrollXStore, lastScrollLeft, lastScrollTop } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const { transform } = treeOpts;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            let treeData = [];\n            let fullData = reactive(datas ? datas.slice(0) : []); // 转为响应式数据\n            if (fullData.length > supportMaxRow) {\n                errLog('vxe.error.errMaxRow', [supportMaxRow]);\n            }\n            if (treeConfig) {\n                if (transform) {\n                    // 树结构自动转换\n                    if (!treeOpts.rowField) {\n                        errLog('vxe.error.reqProp', ['tree-config.rowField']);\n                    }\n                    if (!treeOpts.parentField) {\n                        errLog('vxe.error.reqProp', ['tree-config.parentField']);\n                    }\n                    if (!childrenField) {\n                        errLog('vxe.error.reqProp', ['tree-config.childrenField']);\n                    }\n                    if (!treeOpts.mapChildrenField) {\n                        errLog('vxe.error.reqProp', ['tree-config.mapChildrenField']);\n                    }\n                    if (childrenField === treeOpts.mapChildrenField) {\n                        errLog('vxe.error.errConflicts', ['tree-config.childrenField', 'tree-config.mapChildrenField']);\n                    }\n                    // fullData.forEach(row => {\n                    //   if (row[treeOpts.children] && row[treeOpts.children].length) {\n                    //     warnLog('vxe.error.errConflicts', ['tree-config.transform', `row.${treeOpts.children}`])\n                    //   }\n                    // })\n                    treeData = XEUtils.toArrayTree(fullData, {\n                        key: treeOpts.rowField,\n                        parentKey: treeOpts.parentField,\n                        children: childrenField,\n                        mapChildren: treeOpts.mapChildrenField\n                    });\n                    fullData = treeData.slice(0);\n                }\n                else {\n                    treeData = fullData.slice(0);\n                }\n            }\n            scrollYStore.startIndex = 0;\n            scrollYStore.endIndex = 1;\n            scrollXStore.startIndex = 0;\n            scrollXStore.endIndex = 1;\n            reactData.isRowLoading = true;\n            reactData.scrollVMLoading = false;\n            internalData.insertRowMaps = {};\n            internalData.removeRowMaps = {};\n            const sYLoad = updateScrollYStatus(fullData);\n            reactData.isDragColMove = false;\n            reactData.isDragRowMove = false;\n            // 全量数据\n            internalData.tableFullData = fullData;\n            internalData.tableFullTreeData = treeData;\n            // 缓存数据\n            $xeTable.cacheRowMap(true);\n            // 原始数据\n            internalData.tableSynchData = datas;\n            if (isReset) {\n                internalData.isResizeCellHeight = false;\n            }\n            // 克隆原数据，用于显示编辑状态，与编辑值做对比\n            if (keepSource) {\n                $xeTable.cacheSourceMap(fullData);\n            }\n            if ($xeTable.clearCellAreas && props.mouseConfig) {\n                $xeTable.clearCellAreas();\n                $xeTable.clearCopyCellArea();\n            }\n            $xeTable.clearMergeCells();\n            $xeTable.clearMergeFooterItems();\n            $xeTable.handleTableData(true);\n            $xeTable.updateFooter();\n            return nextTick().then(() => {\n                updateHeight();\n                updateStyle();\n            }).then(() => {\n                computeScrollLoad();\n            }).then(() => {\n                // 是否启用了虚拟滚动\n                if (sYLoad) {\n                    scrollYStore.endIndex = scrollYStore.visibleSize;\n                }\n                if (sYLoad) {\n                    // if (showOverflow) {\n                    //   if (!rowOpts.height) {\n                    //     const errColumn = internalData.tableFullColumn.find(column => column.showOverflow === false)\n                    //     if (errColumn) {\n                    //       errLog('vxe.error.errProp', [`column[field=\"${errColumn.field}\"].show-overflow=false`, 'show-overflow=true'])\n                    //     }\n                    //   }\n                    // }\n                    if (!(props.height || props.maxHeight)) {\n                        errLog('vxe.error.reqProp', ['table.height | table.max-height | table.scroll-y={enabled: false}']);\n                    }\n                    // if (!props.showOverflow) {\n                    //   warnLog('vxe.error.reqProp', ['table.show-overflow'])\n                    // }\n                    if (props.spanMethod) {\n                        errLog('vxe.error.scrollErrProp', ['table.span-method']);\n                    }\n                }\n                handleReserveStatus();\n                $xeTable.checkSelectionStatus();\n                return new Promise(resolve => {\n                    nextTick()\n                        .then(() => $xeTable.recalculate())\n                        .then(() => {\n                        let targetScrollLeft = lastScrollLeft;\n                        let targetScrollTop = lastScrollTop;\n                        const virtualXOpts = computeVirtualXOpts.value;\n                        const virtualYOpts = computeVirtualYOpts.value;\n                        // 是否在更新数据之后自动滚动重置滚动条\n                        if (virtualXOpts.scrollToLeftOnChange) {\n                            targetScrollLeft = 0;\n                        }\n                        if (virtualYOpts.scrollToTopOnChange) {\n                            targetScrollTop = 0;\n                        }\n                        reactData.isRowLoading = false;\n                        calcCellHeight();\n                        updateRowOffsetTop();\n                        // 是否变更虚拟滚动\n                        if (oldScrollYLoad === sYLoad) {\n                            restoreScrollLocation($xeTable, targetScrollLeft, targetScrollTop)\n                                .then(() => {\n                                resolve();\n                            });\n                        }\n                        else {\n                            setTimeout(() => {\n                                restoreScrollLocation($xeTable, targetScrollLeft, targetScrollTop)\n                                    .then(() => {\n                                    resolve();\n                                });\n                            });\n                        }\n                    });\n                });\n            });\n        };\n        /**\n         * 处理数据加载默认行为\n         * 默认执行一次，除非被重置\n         */\n        const handleLoadDefaults = () => {\n            handleDefaultSelectionChecked();\n            handleDefaultRadioChecked();\n            handleDefaultRowExpand();\n            handleDefaultTreeExpand();\n            handleDefaultMergeCells();\n            handleDefaultMergeFooterItems();\n            nextTick(() => setTimeout(() => $xeTable.recalculate()));\n        };\n        /**\n         * 处理初始化的默认行为\n         * 只会执行一次\n         */\n        const handleInitDefaults = () => {\n            handleDefaultSort();\n        };\n        const handleTableColumn = () => {\n            const { scrollXLoad } = reactData;\n            const { visibleColumn, scrollXStore, fullColumnIdData } = internalData;\n            const tableColumn = scrollXLoad ? visibleColumn.slice(scrollXStore.startIndex, scrollXStore.endIndex) : visibleColumn.slice(0);\n            tableColumn.forEach((column, $index) => {\n                const colid = column.id;\n                const colRest = fullColumnIdData[colid];\n                if (colRest) {\n                    colRest.$index = $index;\n                }\n            });\n            reactData.tableColumn = tableColumn;\n        };\n        const handleUpdateColumn = () => {\n            const columnList = XEUtils.orderBy(internalData.collectColumn, 'renderSortNumber');\n            internalData.collectColumn = columnList;\n            const tableFullColumn = getColumnList(columnList);\n            internalData.tableFullColumn = tableFullColumn;\n            cacheColumnMap();\n        };\n        const loadScrollXData = () => {\n            const { mergeList, mergeFooterList, isScrollXBig } = reactData;\n            const { scrollXStore } = internalData;\n            const { preloadSize, startIndex, endIndex, offsetSize } = scrollXStore;\n            const { toVisibleIndex, visibleSize } = handleVirtualXVisible();\n            const offsetItem = {\n                startIndex: Math.max(0, isScrollXBig ? toVisibleIndex - 1 : toVisibleIndex - 1 - offsetSize - preloadSize),\n                endIndex: isScrollXBig ? toVisibleIndex + visibleSize : toVisibleIndex + visibleSize + offsetSize + preloadSize\n            };\n            scrollXStore.visibleStartIndex = toVisibleIndex - 1;\n            scrollXStore.visibleEndIndex = toVisibleIndex + visibleSize + 1;\n            calculateMergerOffsetIndex(mergeList.concat(mergeFooterList), offsetItem, 'col');\n            const { startIndex: offsetStartIndex, endIndex: offsetEndIndex } = offsetItem;\n            if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {\n                if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {\n                    scrollXStore.startIndex = offsetStartIndex;\n                    scrollXStore.endIndex = offsetEndIndex;\n                    $xeTable.updateScrollXData();\n                }\n            }\n            $xeTable.closeTooltip();\n        };\n        // 获取所有的列，排除分组\n        const getColumnList = (columns) => {\n            const result = [];\n            columns.forEach((column) => {\n                result.push(...(column.children && column.children.length ? getColumnList(column.children) : [column]));\n            });\n            return result;\n        };\n        const parseColumns = (isReset) => {\n            // const { showOverflow } = props\n            // const rowOpts = computeRowOpts.value\n            const leftList = [];\n            const centerList = [];\n            const rightList = [];\n            const { isGroup, columnStore } = reactData;\n            const virtualXOpts = computeVirtualXOpts.value;\n            const { collectColumn, tableFullColumn, scrollXStore, fullColumnIdData } = internalData;\n            // 如果是分组表头，如果子列全部被隐藏，则根列也隐藏\n            if (isGroup) {\n                const leftGroupList = [];\n                const centerGroupList = [];\n                const rightGroupList = [];\n                XEUtils.eachTree(collectColumn, (column, index, items, path, parentColumn) => {\n                    const isColGroup = hasChildrenList(column);\n                    // 如果是分组，必须按组设置固定列，不允许给子列设置固定\n                    if (parentColumn && parentColumn.fixed) {\n                        column.fixed = parentColumn.fixed;\n                    }\n                    if (parentColumn && column.fixed !== parentColumn.fixed) {\n                        errLog('vxe.error.groupFixed');\n                    }\n                    if (isColGroup) {\n                        column.visible = !!XEUtils.findTree(column.children, (subColumn) => hasChildrenList(subColumn) ? false : subColumn.visible);\n                    }\n                    else if (column.visible) {\n                        if (column.fixed === 'left') {\n                            leftList.push(column);\n                        }\n                        else if (column.fixed === 'right') {\n                            rightList.push(column);\n                        }\n                        else {\n                            centerList.push(column);\n                        }\n                    }\n                });\n                collectColumn.forEach((column) => {\n                    if (column.visible) {\n                        if (column.fixed === 'left') {\n                            leftGroupList.push(column);\n                        }\n                        else if (column.fixed === 'right') {\n                            rightGroupList.push(column);\n                        }\n                        else {\n                            centerGroupList.push(column);\n                        }\n                    }\n                });\n                reactData.tableGroupColumn = leftGroupList.concat(centerGroupList).concat(rightGroupList);\n            }\n            else {\n                // 重新分配列\n                tableFullColumn.forEach((column) => {\n                    if (column.visible) {\n                        if (column.fixed === 'left') {\n                            leftList.push(column);\n                        }\n                        else if (column.fixed === 'right') {\n                            rightList.push(column);\n                        }\n                        else {\n                            centerList.push(column);\n                        }\n                    }\n                });\n            }\n            const visibleColumn = leftList.concat(centerList).concat(rightList);\n            // 如果gt为0，则总是启用\n            const scrollXLoad = !!virtualXOpts.enabled && virtualXOpts.gt > -1 && (virtualXOpts.gt === 0 || virtualXOpts.gt < tableFullColumn.length);\n            reactData.hasFixedColumn = leftList.length > 0 || rightList.length > 0;\n            Object.assign(columnStore, { leftList, centerList, rightList });\n            if (scrollXLoad) {\n                // if (showOverflow) {\n                //   if (!rowOpts.height) {\n                //     const errColumn = internalData.tableFullColumn.find(column => column.showOverflow === false)\n                //     if (errColumn) {\n                //       errLog('vxe.error.errProp', [`column[field=\"${errColumn.field}\"].show-overflow=false`, 'show-overflow=true'])\n                //     }\n                //   }\n                // }\n                // if (process.env.NODE_ENV === 'development') {\n                // if (props.showHeader && !props.showHeaderOverflow) {\n                //   warnLog('vxe.error.reqProp', ['show-header-overflow'])\n                // }\n                // if (props.showFooter && !props.showFooterOverflow) {\n                //   warnLog('vxe.error.reqProp', ['show-footer-overflow'])\n                // }\n                if (props.spanMethod) {\n                    warnLog('vxe.error.scrollErrProp', ['span-method']);\n                }\n                if (props.footerSpanMethod) {\n                    warnLog('vxe.error.scrollErrProp', ['footer-span-method']);\n                }\n                // }\n                if (isReset) {\n                    const { visibleSize } = handleVirtualXVisible();\n                    scrollXStore.startIndex = 0;\n                    scrollXStore.endIndex = visibleSize;\n                    scrollXStore.visibleSize = visibleSize;\n                    scrollXStore.visibleStartIndex = 0;\n                    scrollXStore.visibleEndIndex = visibleSize;\n                }\n            }\n            // 如果列被显示/隐藏，则清除合并状态\n            // 如果列被设置为固定，则清除合并状态\n            if (visibleColumn.length !== internalData.visibleColumn.length || !internalData.visibleColumn.every((column, index) => column === visibleColumn[index])) {\n                $xeTable.clearMergeCells();\n                $xeTable.clearMergeFooterItems();\n            }\n            reactData.scrollXLoad = scrollXLoad;\n            visibleColumn.forEach((column, index) => {\n                const colid = column.id;\n                const colRest = fullColumnIdData[colid];\n                if (colRest) {\n                    colRest._index = index;\n                }\n            });\n            internalData.visibleColumn = visibleColumn;\n            handleTableColumn();\n            if (isReset) {\n                updateColumnOffsetLeft();\n                return $xeTable.updateFooter().then(() => {\n                    return $xeTable.recalculate();\n                }).then(() => {\n                    $xeTable.updateCellAreas();\n                    return $xeTable.recalculate();\n                });\n            }\n            return $xeTable.updateFooter();\n        };\n        const initColumnSort = () => {\n            const { collectColumn } = internalData;\n            collectColumn.forEach((column, index) => {\n                const sortIndex = index + 1;\n                column.sortNumber = sortIndex;\n                column.renderSortNumber = sortIndex;\n            });\n        };\n        const handleColumn = (collectColumn) => {\n            const expandOpts = computeExpandOpts.value;\n            internalData.collectColumn = collectColumn;\n            const tableFullColumn = getColumnList(collectColumn);\n            internalData.tableFullColumn = tableFullColumn;\n            reactData.isColLoading = true;\n            reactData.isDragColMove = false;\n            initColumnSort();\n            return Promise.resolve(restoreCustomStorage()).then(() => {\n                const { scrollXLoad, scrollYLoad, expandColumn } = reactData;\n                cacheColumnMap();\n                parseColumns(true).then(() => {\n                    if (reactData.scrollXLoad) {\n                        loadScrollXData();\n                    }\n                });\n                $xeTable.clearMergeCells();\n                $xeTable.clearMergeFooterItems();\n                $xeTable.handleTableData(true);\n                if ((scrollXLoad || scrollYLoad) && (expandColumn && expandOpts.mode !== 'fixed')) {\n                    warnLog('vxe.error.scrollErrProp', ['column.type=expand']);\n                }\n                return nextTick().then(() => {\n                    if ($xeToolbar) {\n                        $xeToolbar.syncUpdate({\n                            collectColumn: internalData.collectColumn,\n                            $table: $xeTable\n                        });\n                    }\n                    if ($xeTable.handleUpdateCustomColumn) {\n                        $xeTable.handleUpdateCustomColumn();\n                    }\n                    reactData.isColLoading = false;\n                    return $xeTable.recalculate();\n                });\n            });\n        };\n        const updateScrollYStatus = (fullData) => {\n            const { treeConfig } = props;\n            const virtualYOpts = computeVirtualYOpts.value;\n            const treeOpts = computeTreeOpts.value;\n            const { transform } = treeOpts;\n            const allList = fullData || internalData.tableFullData;\n            // 如果gt为0，则总是启用\n            const scrollYLoad = (transform || !treeConfig) && !!virtualYOpts.enabled && virtualYOpts.gt > -1 && (virtualYOpts.gt === 0 || virtualYOpts.gt < allList.length);\n            reactData.scrollYLoad = scrollYLoad;\n            return scrollYLoad;\n        };\n        /**\n         * 展开与收起树节点\n         * @param rows\n         * @param expanded\n         * @returns\n         */\n        const handleBaseTreeExpand = (rows, expanded) => {\n            const { treeNodeColumn } = reactData;\n            const { fullAllDataRowIdData, tableFullData, treeExpandedMaps, treeExpandLazyLoadedMaps } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const { reserve, lazy, accordion, toggleMethod } = treeOpts;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const hasChildField = treeOpts.hasChild || treeOpts.hasChildField;\n            const result = [];\n            const columnIndex = tableMethods.getColumnIndex(treeNodeColumn);\n            const $columnIndex = tableMethods.getVMColumnIndex(treeNodeColumn);\n            const { handleGetRowId } = createHandleGetRowId($xeTable);\n            let validRows = toggleMethod ? rows.filter((row) => toggleMethod({ $table: $xeTable, expanded, column: treeNodeColumn, columnIndex, $columnIndex, row })) : rows;\n            if (accordion) {\n                validRows = validRows.length ? [validRows[validRows.length - 1]] : [];\n                // 同一级只能展开一个\n                const matchObj = XEUtils.findTree(tableFullData, item => item === validRows[0], { children: childrenField });\n                if (matchObj) {\n                    matchObj.items.forEach(item => {\n                        const rowid = handleGetRowId(item);\n                        if (treeExpandedMaps[rowid]) {\n                            delete treeExpandedMaps[rowid];\n                        }\n                    });\n                }\n            }\n            if (expanded) {\n                validRows.forEach((row) => {\n                    const rowid = handleGetRowId(row);\n                    if (!treeExpandedMaps[rowid]) {\n                        const rowRest = fullAllDataRowIdData[rowid];\n                        if (rowRest) {\n                            const isLoad = lazy && row[hasChildField] && !rowRest.treeLoaded && !treeExpandLazyLoadedMaps[rowid];\n                            // 是否使用懒加载\n                            if (isLoad) {\n                                result.push(handleAsyncTreeExpandChilds(row));\n                            }\n                            else {\n                                if (row[childrenField] && row[childrenField].length) {\n                                    treeExpandedMaps[rowid] = row;\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n            else {\n                validRows.forEach(item => {\n                    const rowid = handleGetRowId(item);\n                    if (treeExpandedMaps[rowid]) {\n                        delete treeExpandedMaps[rowid];\n                    }\n                });\n            }\n            if (reserve) {\n                validRows.forEach((row) => handleTreeExpandReserve(row, expanded));\n            }\n            reactData.treeExpandedFlag++;\n            return Promise.all(result).then(() => {\n                return tableMethods.recalculate();\n            });\n        };\n        /**\n         * 虚拟树的展开与收起\n         * @param rows\n         * @param expanded\n         * @returns\n         */\n        const handleVirtualTreeExpand = (rows, expanded) => {\n            return handleBaseTreeExpand(rows, expanded).then(() => {\n                handleVirtualTreeToList();\n                tablePrivateMethods.handleTableData();\n                updateAfterDataIndex();\n                return nextTick();\n            }).then(() => {\n                return tableMethods.recalculate(true);\n            }).then(() => {\n                setTimeout(() => {\n                    tableMethods.updateCellAreas();\n                }, 30);\n            });\n        };\n        const handleCheckAllEvent = (evnt, value) => {\n            handleCheckedAllCheckboxRow(value);\n            if (evnt) {\n                dispatchEvent('checkbox-all', {\n                    records: () => $xeTable.getCheckboxRecords(),\n                    reserves: () => $xeTable.getCheckboxReserveRecords(),\n                    indeterminates: () => $xeTable.getCheckboxIndeterminateRecords(),\n                    checked: value\n                }, evnt);\n            }\n        };\n        /**\n         * 纵向 Y 可视渲染处理\n         */\n        const loadScrollYData = () => {\n            const { mergeList, isAllOverflow, isScrollYBig } = reactData;\n            const { scrollYStore } = internalData;\n            const { preloadSize, startIndex, endIndex, offsetSize } = scrollYStore;\n            const autoOffsetYSize = isAllOverflow ? offsetSize : offsetSize + 1;\n            const { toVisibleIndex, visibleSize } = handleVirtualYVisible();\n            const offsetItem = {\n                startIndex: Math.max(0, isScrollYBig ? toVisibleIndex - 1 : toVisibleIndex - 1 - offsetSize - preloadSize),\n                endIndex: isScrollYBig ? (toVisibleIndex + visibleSize) : (toVisibleIndex + visibleSize + autoOffsetYSize + preloadSize)\n            };\n            scrollYStore.visibleStartIndex = toVisibleIndex - 1;\n            scrollYStore.visibleEndIndex = toVisibleIndex + visibleSize + 1;\n            calculateMergerOffsetIndex(mergeList, offsetItem, 'row');\n            const { startIndex: offsetStartIndex, endIndex: offsetEndIndex } = offsetItem;\n            if (toVisibleIndex <= startIndex || toVisibleIndex >= endIndex - visibleSize - 1) {\n                if (startIndex !== offsetStartIndex || endIndex !== offsetEndIndex) {\n                    scrollYStore.startIndex = offsetStartIndex;\n                    scrollYStore.endIndex = offsetEndIndex;\n                    $xeTable.updateScrollYData();\n                }\n            }\n        };\n        const createGetRowCacheProp = (prop) => {\n            const { handleGetRowId } = createHandleGetRowId($xeTable);\n            return function (row) {\n                const { fullAllDataRowIdData } = internalData;\n                if (row) {\n                    const rowid = handleGetRowId(row);\n                    const rowRest = fullAllDataRowIdData[rowid];\n                    if (rowRest) {\n                        return rowRest[prop];\n                    }\n                }\n                return -1;\n            };\n        };\n        const createGetColumnCacheProp = (prop) => {\n            return function (column) {\n                const { fullColumnIdData } = internalData;\n                if (column) {\n                    const colRest = fullColumnIdData[column.id];\n                    if (colRest) {\n                        return colRest[prop];\n                    }\n                }\n                return -1;\n            };\n        };\n        const lazyScrollXData = () => {\n            const { lxTimeout, lxRunTime, scrollXStore } = internalData;\n            const { visibleSize } = scrollXStore;\n            const fpsTime = Math.max(5, Math.min(10, Math.floor(visibleSize / 3)));\n            if (lxTimeout) {\n                clearTimeout(lxTimeout);\n            }\n            if (!lxRunTime || lxRunTime + fpsTime < Date.now()) {\n                internalData.lxRunTime = Date.now();\n                loadScrollXData();\n            }\n            internalData.lxTimeout = setTimeout(() => {\n                internalData.lxTimeout = undefined;\n                internalData.lxRunTime = undefined;\n                loadScrollXData();\n            }, fpsTime);\n        };\n        const lazyScrollYData = () => {\n            const { lyTimeout, lyRunTime, scrollYStore } = internalData;\n            const { visibleSize } = scrollYStore;\n            const fpsTime = Math.floor(Math.max(4, Math.min(10, visibleSize / 3)));\n            if (lyTimeout) {\n                clearTimeout(lyTimeout);\n            }\n            if (!lyRunTime || lyRunTime + fpsTime < Date.now()) {\n                internalData.lyRunTime = Date.now();\n                loadScrollYData();\n            }\n            internalData.lyTimeout = setTimeout(() => {\n                internalData.lyTimeout = undefined;\n                internalData.lyRunTime = undefined;\n                loadScrollYData();\n            }, fpsTime);\n        };\n        const checkLastSyncScroll = (isRollX, isRollY) => {\n            const { scrollXLoad, scrollYLoad } = reactData;\n            const { lcsTimeout } = internalData;\n            if (lcsTimeout) {\n                clearTimeout(lcsTimeout);\n            }\n            internalData.lcsTimeout = setTimeout(() => {\n                internalData.lcsRunTime = Date.now();\n                internalData.lcsTimeout = undefined;\n                internalData.intoRunScroll = false;\n                internalData.inVirtualScroll = false;\n                internalData.inWheelScroll = false;\n                internalData.inHeaderScroll = false;\n                internalData.inBodyScroll = false;\n                internalData.inFooterScroll = false;\n                internalData.scrollRenderType = '';\n                calcCellHeight();\n                if (isRollX && scrollXLoad) {\n                    $xeTable.updateScrollXData();\n                }\n                if (isRollY && scrollYLoad) {\n                    $xeTable.updateScrollYData().then(() => {\n                        calcCellHeight();\n                        $xeTable.updateScrollYSpace();\n                    });\n                }\n                updateRowExpandStyle();\n                $xeTable.updateCellAreas();\n            }, 200);\n        };\n        const getWheelSpeed = (lastScrollTime) => {\n            let multiple = 1;\n            const currTime = Date.now();\n            if (lastScrollTime + 25 > currTime) {\n                multiple = 1.18;\n            }\n            else if (lastScrollTime + 30 > currTime) {\n                multiple = 1.15;\n            }\n            else if (lastScrollTime + 40 > currTime) {\n                multiple = 1.12;\n            }\n            else if (lastScrollTime + 55 > currTime) {\n                multiple = 1.09;\n            }\n            else if (lastScrollTime + 75 > currTime) {\n                multiple = 1.06;\n            }\n            else if (lastScrollTime + 100 > currTime) {\n                multiple = 1.03;\n            }\n            return multiple;\n        };\n        const wheelScrollLeftTo = (scrollLeft, cb) => {\n            requestAnimationFrame(() => {\n                cb(scrollLeft);\n            });\n        };\n        const wheelScrollTopTo = (diffNum, cb) => {\n            const duration = Math.abs(diffNum);\n            const startTime = performance.now();\n            let countTop = 0;\n            const step = (timestamp) => {\n                let progress = (timestamp - startTime) / duration;\n                if (progress > 1) {\n                    progress = 1;\n                }\n                const easedProgress = Math.pow(progress, 2);\n                const offsetTop = Math.floor((diffNum * easedProgress)) - countTop;\n                countTop += offsetTop;\n                cb(offsetTop);\n                if (progress < 1) {\n                    requestAnimationFrame(step);\n                }\n            };\n            requestAnimationFrame(step);\n        };\n        const dispatchEvent = (type, params, evnt) => {\n            emit(type, createEvent(evnt, { $table: $xeTable, $grid: $xeGrid }, params));\n        };\n        const handleScrollToRowColumn = (fieldOrColumn, row) => {\n            const { fullColumnIdData } = internalData;\n            const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n            if (column && fullColumnIdData[column.id]) {\n                return colToVisible($xeTable, column, row);\n            }\n            return nextTick();\n        };\n        const handleUpdateResize = () => {\n            const el = refElem.value;\n            if (el && el.clientWidth && el.clientHeight) {\n                tableMethods.recalculate();\n            }\n        };\n        const handleUpdateColResize = (evnt, params) => {\n            $xeTable.analyColumnWidth();\n            $xeTable.recalculate().then(() => {\n                $xeTable.saveCustomStore('update:width');\n                $xeTable.updateCellAreas();\n                $xeTable.dispatchEvent('column-resizable-change', params, evnt);\n                // 已废弃 resizable-change\n                $xeTable.dispatchEvent('resizable-change', params, evnt);\n                setTimeout(() => $xeTable.recalculate(true), 300);\n            });\n        };\n        const handleUpdateRowResize = (evnt, params) => {\n            reactData.resizeHeightFlag++;\n            $xeTable.recalculate().then(() => {\n                $xeTable.updateCellAreas();\n                $xeTable.dispatchEvent('row-resizable-change', params, evnt);\n                setTimeout(() => $xeTable.recalculate(true), 300);\n            });\n        };\n        const updateColumnOffsetLeft = () => {\n            const { visibleColumn, fullColumnIdData } = internalData;\n            let offsetLeft = 0;\n            for (let cIndex = 0, rLen = visibleColumn.length; cIndex < rLen; cIndex++) {\n                const column = visibleColumn[cIndex];\n                const colid = column.id;\n                const colRest = fullColumnIdData[colid];\n                colRest.oLeft = offsetLeft;\n                offsetLeft += column.renderWidth;\n            }\n        };\n        const updateRowOffsetTop = () => {\n            const { expandColumn } = reactData;\n            const { afterFullData, fullAllDataRowIdData, rowExpandedMaps } = internalData;\n            const expandOpts = computeExpandOpts.value;\n            const rowOpts = computeRowOpts.value;\n            const cellOpts = computeCellOpts.value;\n            const defaultRowHeight = computeDefaultRowHeight.value;\n            const { handleGetRowId } = createHandleGetRowId($xeTable);\n            let offsetTop = 0;\n            for (let rIndex = 0, rLen = afterFullData.length; rIndex < rLen; rIndex++) {\n                const row = afterFullData[rIndex];\n                const rowid = handleGetRowId(row);\n                const rowRest = fullAllDataRowIdData[rowid] || {};\n                rowRest.oTop = offsetTop;\n                offsetTop += rowRest.resizeHeight || cellOpts.height || rowOpts.height || rowRest.height || defaultRowHeight;\n                // 是否展开行\n                if (expandColumn && rowExpandedMaps[rowid]) {\n                    offsetTop += rowRest.expandHeight || expandOpts.height || 0;\n                }\n            }\n        };\n        const updateRowExpandStyle = () => {\n            const { expandColumn, scrollYLoad, scrollYTop, isScrollYBig } = reactData;\n            const expandOpts = computeExpandOpts.value;\n            const rowOpts = computeRowOpts.value;\n            const cellOpts = computeCellOpts.value;\n            const defaultRowHeight = computeDefaultRowHeight.value;\n            const { mode } = expandOpts;\n            if (expandColumn && mode === 'fixed') {\n                const { elemStore, fullAllDataRowIdData } = internalData;\n                const rowExpandEl = refRowExpandElem.value;\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                if (rowExpandEl && bodyScrollElem) {\n                    let isUpdateHeight = false;\n                    XEUtils.arrayEach(rowExpandEl.children, reEl => {\n                        const expandEl = reEl;\n                        const rowid = expandEl.getAttribute('rowid') || '';\n                        const rowRest = fullAllDataRowIdData[rowid];\n                        if (rowRest) {\n                            const expandHeight = expandEl.offsetHeight + 1;\n                            const trEl = bodyScrollElem.querySelector(`.vxe-body--row[rowid=\"${rowid}\"]`);\n                            let offsetTop = 0;\n                            if (scrollYLoad) {\n                                if (isScrollYBig && trEl) {\n                                    offsetTop = trEl.offsetTop + trEl.offsetHeight;\n                                }\n                                else {\n                                    offsetTop = rowRest.oTop + (rowRest.resizeHeight || cellOpts.height || rowOpts.height || rowRest.height || defaultRowHeight);\n                                }\n                            }\n                            else {\n                                if (trEl) {\n                                    offsetTop = trEl.offsetTop + trEl.offsetHeight;\n                                }\n                            }\n                            if (isScrollYBig) {\n                                offsetTop += scrollYTop;\n                            }\n                            expandEl.style.top = toCssUnit(offsetTop);\n                            if (!isUpdateHeight) {\n                                if (rowRest.expandHeight !== expandHeight) {\n                                    isUpdateHeight = true;\n                                }\n                            }\n                            rowRest.expandHeight = expandHeight;\n                        }\n                    });\n                    if (isUpdateHeight) {\n                        reactData.rowExpandHeightFlag++;\n                        nextTick(() => {\n                            updateRowOffsetTop();\n                        });\n                    }\n                }\n            }\n        };\n        const handleRowExpandScroll = () => {\n            const { elemStore } = internalData;\n            const rowExpandEl = refRowExpandElem.value;\n            const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n            if (rowExpandEl && bodyScrollElem) {\n                rowExpandEl.scrollTop = bodyScrollElem.scrollTop;\n            }\n        };\n        tableMethods = {\n            dispatchEvent,\n            getEl() {\n                return refElem.value;\n            },\n            /**\n             * 重置表格的一切数据状态\n             */\n            clearAll() {\n                return clearTableAllStatus($xeTable);\n            },\n            /**\n             * 同步 data 数据（即将废弃）\n             * 如果用了该方法，那么组件将不再记录增删改的状态，只能自行实现对应逻辑\n             * 对于某些特殊的场景，比如深层树节点元素发生变动时可能会用到\n             */\n            syncData() {\n                warnLog('vxe.error.delFunc', ['syncData', 'getData']);\n                return nextTick().then(() => {\n                    reactData.tableData = [];\n                    emit('update:data', internalData.tableFullData);\n                    return nextTick();\n                });\n            },\n            /**\n             * 手动处理数据，用于手动排序与筛选\n             * 对于手动更改了排序、筛选...等条件后需要重新处理数据时可能会用到\n             */\n            updateData() {\n                const { scrollXLoad, scrollYLoad } = reactData;\n                return tablePrivateMethods.handleTableData(true).then(() => {\n                    tableMethods.updateFooter();\n                    if (scrollXLoad || scrollYLoad) {\n                        if (scrollXLoad) {\n                            tablePrivateMethods.updateScrollXSpace();\n                        }\n                        if (scrollYLoad) {\n                            tablePrivateMethods.updateScrollYSpace();\n                        }\n                        return tableMethods.refreshScroll();\n                    }\n                }).then(() => {\n                    tableMethods.updateCellAreas();\n                    return tableMethods.recalculate(true);\n                }).then(() => {\n                    // 存在滚动行为未结束情况\n                    setTimeout(() => $xeTable.recalculate(), 50);\n                });\n            },\n            /**\n             * 重新加载数据，不会清空表格状态\n             * @param {Array} datas 数据\n             */\n            loadData(datas) {\n                const { initStatus } = internalData;\n                return loadTableData(datas, false).then(() => {\n                    internalData.inited = true;\n                    internalData.initStatus = true;\n                    if (!initStatus) {\n                        handleLoadDefaults();\n                    }\n                    return tableMethods.recalculate();\n                });\n            },\n            /**\n             * 重新加载数据，会清空表格状态\n             * @param {Array} datas 数据\n             */\n            reloadData(datas) {\n                return tableMethods.clearAll()\n                    .then(() => {\n                    internalData.inited = true;\n                    internalData.initStatus = true;\n                    return loadTableData(datas, true);\n                }).then(() => {\n                    handleLoadDefaults();\n                    return tableMethods.recalculate();\n                });\n            },\n            /**\n             * 修改行数据\n             */\n            setRow(rows, record) {\n                if (rows && record) {\n                    let rest = rows;\n                    if (!XEUtils.isArray(rows)) {\n                        rest = [rows];\n                    }\n                    const rowkey = getRowkey($xeTable);\n                    rest.forEach(row => {\n                        const rowid = getRowid($xeTable, row);\n                        const newRecord = XEUtils.clone(Object.assign({}, record), true);\n                        XEUtils.set(newRecord, rowkey, rowid);\n                        Object.assign(row, newRecord);\n                    });\n                }\n                return nextTick();\n            },\n            /**\n             * 局部加载行数据并恢复到初始状态\n             * 对于行数据需要局部更改的场景中可能会用到\n             * @param {Row} row 行对象\n             * @param {Object} record 新数据\n             * @param {String} field 字段名\n             */\n            reloadRow(row, record, field) {\n                const { keepSource } = props;\n                const { tableData } = reactData;\n                const { tableSourceData } = internalData;\n                if (keepSource) {\n                    const rowIndex = tableMethods.getRowIndex(row);\n                    const oRow = tableSourceData[rowIndex];\n                    if (oRow && row) {\n                        if (field) {\n                            const newValue = XEUtils.clone(XEUtils.get(record || row, field), true);\n                            XEUtils.set(row, field, newValue);\n                            XEUtils.set(oRow, field, newValue);\n                        }\n                        else {\n                            const rowkey = getRowkey($xeTable);\n                            const rowid = getRowid($xeTable, row);\n                            const newRecord = XEUtils.clone(Object.assign({}, record), true);\n                            XEUtils.set(newRecord, rowkey, rowid);\n                            XEUtils.destructuring(oRow, Object.assign(row, newRecord));\n                        }\n                    }\n                    reactData.tableData = tableData.slice(0);\n                }\n                else {\n                    if (process.env.NODE_ENV === 'development') {\n                        warnLog('vxe.error.reqProp', ['keep-source']);\n                    }\n                }\n                return nextTick();\n            },\n            getParams() {\n                return props.params;\n            },\n            /**\n             * 用于树结构，给行数据加载子节点\n             */\n            loadTreeChildren(row, childRecords) {\n                const { keepSource } = props;\n                const { tableSourceData, fullDataRowIdData, fullAllDataRowIdData, sourceDataRowIdData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { transform, mapChildrenField } = treeOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const parentRest = fullAllDataRowIdData[getRowid($xeTable, row)];\n                const parentLevel = parentRest ? parentRest.level : 0;\n                return tableMethods.createData(childRecords).then((rows) => {\n                    if (keepSource) {\n                        const rowid = getRowid($xeTable, row);\n                        const matchObj = XEUtils.findTree(tableSourceData, (item) => rowid === getRowid($xeTable, item), { children: childrenField });\n                        if (matchObj) {\n                            matchObj.item[childrenField] = XEUtils.clone(rows, true);\n                        }\n                        rows.forEach(childRow => {\n                            const rowid = getRowid($xeTable, childRow);\n                            sourceDataRowIdData[rowid] = XEUtils.clone(childRow, true);\n                        });\n                    }\n                    XEUtils.eachTree(rows, (childRow, index, items, path, parentItem, nodes) => {\n                        const rowid = getRowid($xeTable, childRow);\n                        const parentRow = parentItem || parentRest.row;\n                        const rest = { row: childRow, rowid, seq: -1, index, _index: -1, $index: -1, treeIndex: -1, items, parent: parentRow, level: parentLevel + nodes.length, height: 0, resizeHeight: 0, oTop: 0, expandHeight: 0 };\n                        fullDataRowIdData[rowid] = rest;\n                        fullAllDataRowIdData[rowid] = rest;\n                    }, { children: childrenField });\n                    row[childrenField] = rows;\n                    if (transform) {\n                        row[mapChildrenField] = XEUtils.clone(rows, false);\n                    }\n                    updateAfterDataIndex();\n                    return rows;\n                });\n            },\n            /**\n             * 加载列配置\n             * 对于表格列需要重载、局部递增场景下可能会用到\n             * @param {ColumnInfo} columns 列配置\n             */\n            loadColumn(columns) {\n                const collectColumn = XEUtils.mapTree(columns, column => reactive(Cell.createColumn($xeTable, column)));\n                return handleColumn(collectColumn);\n            },\n            /**\n             * 加载列配置并恢复到初始状态\n             * 对于表格列需要重载、局部递增场景下可能会用到\n             * @param {ColumnInfo} columns 列配置\n             */\n            reloadColumn(columns) {\n                return tableMethods.clearAll().then(() => {\n                    return tableMethods.loadColumn(columns);\n                });\n            },\n            /**\n             * 根据 tr 元素获取对应的 row 信息\n             * @param {Element} tr 元素\n             */\n            getRowNode(tr) {\n                if (tr) {\n                    const { fullAllDataRowIdData } = internalData;\n                    const rowid = tr.getAttribute('rowid');\n                    if (rowid) {\n                        const rowRest = fullAllDataRowIdData[rowid];\n                        if (rowRest) {\n                            return {\n                                rowid: rowRest.rowid,\n                                item: rowRest.row,\n                                index: rowRest.index,\n                                items: rowRest.items,\n                                parent: rowRest.parent\n                            };\n                        }\n                    }\n                }\n                return null;\n            },\n            /**\n             * 根据 th/td 元素获取对应的 column 信息\n             * @param {Element} cell 元素\n             */\n            getColumnNode(cell) {\n                if (cell) {\n                    const { fullColumnIdData } = internalData;\n                    const colid = cell.getAttribute('colid');\n                    if (colid) {\n                        const colRest = fullColumnIdData[colid];\n                        if (colRest) {\n                            return {\n                                colid: colRest.colid,\n                                item: colRest.column,\n                                index: colRest.index,\n                                items: colRest.items,\n                                parent: colRest.parent\n                            };\n                        }\n                    }\n                }\n                return null;\n            },\n            /**\n             * 根据 row 获取序号\n             * @param {Row} row 行对象\n             */\n            getRowSeq: createGetRowCacheProp('seq'),\n            /**\n             * 根据 row 获取相对于 data 中的索引\n             * @param {Row} row 行对象\n             */\n            getRowIndex: createGetRowCacheProp('index'),\n            /**\n             * 根据 row 获取相对于当前数据中的索引\n             * @param {Row} row 行对象\n             */\n            getVTRowIndex: createGetRowCacheProp('_index'),\n            /**\n             * 根据 row 获取渲染中的虚拟索引\n             * @param {Row} row 行对象\n             */\n            getVMRowIndex: createGetRowCacheProp('$index'),\n            /**\n             * 根据 column 获取相对于 columns 中的索引\n             * @param {ColumnInfo} column 列配置\n             */\n            getColumnIndex: createGetColumnCacheProp('index'),\n            /**\n             * 根据 column 获取相对于当前表格列中的索引\n             * @param {ColumnInfo} column 列配置\n             */\n            getVTColumnIndex: createGetColumnCacheProp('_index'),\n            /**\n             * 根据 column 获取渲染中的虚拟索引\n             * @param {ColumnInfo} column 列配置\n             */\n            getVMColumnIndex: createGetColumnCacheProp('$index'),\n            /**\n             * 创建 data 对象\n             * 对于某些特殊场景可能会用到，会自动对数据的字段名进行检测，如果不存在就自动定义\n             * @param {Array} records 新数据\n             */\n            createData(records) {\n                return nextTick().then(() => {\n                    return reactive(tablePrivateMethods.defineField(records));\n                });\n            },\n            /**\n             * 创建 Row|Rows 对象\n             * 对于某些特殊场景需要对数据进行手动插入时可能会用到\n             * @param {Array/Object} records 新数据\n             */\n            createRow(records) {\n                const isArr = XEUtils.isArray(records);\n                if (!isArr) {\n                    records = [records || {}];\n                }\n                return tableMethods.createData(records).then((rows) => isArr ? rows : rows[0]);\n            },\n            /**\n             * 还原数据\n             * 如果不传任何参数，则还原整个表格\n             * 如果传 row 则还原一行\n             * 如果传 rows 则还原多行\n             * 如果还额外传了 field 则还原指定的单元格数据\n             */\n            revertData(rows, field) {\n                const { keepSource, treeConfig } = props;\n                const { fullAllDataRowIdData, fullDataRowIdData, tableSourceData, sourceDataRowIdData, tableFullData, afterFullData, removeRowMaps } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { transform } = treeOpts;\n                const { handleGetRowId } = createHandleGetRowId($xeTable);\n                if (!keepSource) {\n                    if (process.env.NODE_ENV === 'development') {\n                        errLog('vxe.error.reqProp', ['keep-source']);\n                    }\n                    return nextTick();\n                }\n                let targetRows = rows;\n                if (rows) {\n                    if (!XEUtils.isArray(rows)) {\n                        targetRows = [rows];\n                    }\n                }\n                else {\n                    targetRows = XEUtils.toArray($xeTable.getUpdateRecords());\n                }\n                let reDelFlag = false;\n                if (targetRows.length) {\n                    targetRows.forEach((item) => {\n                        const rowid = handleGetRowId(item);\n                        const rowRest = fullAllDataRowIdData[rowid];\n                        if (rowRest) {\n                            const row = rowRest.row;\n                            if (!$xeTable.isInsertByRow(row)) {\n                                const oRow = sourceDataRowIdData[rowid];\n                                if (oRow && row) {\n                                    if (field) {\n                                        XEUtils.set(row, field, XEUtils.clone(XEUtils.get(oRow, field), true));\n                                    }\n                                    else {\n                                        XEUtils.destructuring(row, XEUtils.clone(oRow, true));\n                                    }\n                                    if (!fullDataRowIdData[rowid] && $xeTable.isRemoveByRow(row)) {\n                                        if (removeRowMaps[rowid]) {\n                                            delete removeRowMaps[rowid];\n                                        }\n                                        tableFullData.unshift(row);\n                                        afterFullData.unshift(row);\n                                        reDelFlag = true;\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n                if (rows) {\n                    if (reDelFlag) {\n                        reactData.removeRowFlag++;\n                        $xeTable.updateFooter();\n                        $xeTable.cacheRowMap(false);\n                        $xeTable.handleTableData(treeConfig && transform);\n                        if (!(treeConfig && transform)) {\n                            $xeTable.updateAfterDataIndex();\n                        }\n                        $xeTable.checkSelectionStatus();\n                        if (reactData.scrollYLoad) {\n                            $xeTable.updateScrollYSpace();\n                        }\n                    }\n                    return nextTick().then(() => {\n                        $xeTable.updateCellAreas();\n                        return $xeTable.recalculate();\n                    });\n                }\n                return $xeTable.reloadData(tableSourceData);\n            },\n            /**\n             * 清空单元格内容\n             * 如果不创参数，则清空整个表格内容\n             * 如果传 row 则清空一行内容\n             * 如果传 rows 则清空多行内容\n             * 如果还额外传了 field 则清空指定单元格内容\n             * @param {Array/Row} rows 行数据\n             * @param {String} field 字段名\n             */\n            clearData(rows, field) {\n                const { tableFullData, visibleColumn } = internalData;\n                if (!arguments.length) {\n                    rows = tableFullData;\n                }\n                else if (rows && !XEUtils.isArray(rows)) {\n                    rows = [rows];\n                }\n                if (field) {\n                    rows.forEach((row) => XEUtils.set(row, field, null));\n                }\n                else {\n                    rows.forEach((row) => {\n                        visibleColumn.forEach((column) => {\n                            if (column.field) {\n                                setCellValue(row, column, null);\n                            }\n                        });\n                    });\n                }\n                return nextTick();\n            },\n            getCellElement(row, fieldOrColumn) {\n                const { elemStore } = internalData;\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (!column) {\n                    return null;\n                }\n                const rowid = getRowid($xeTable, row);\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                const leftScrollElem = getRefElem(elemStore['left-body-scroll']);\n                const rightScrollElem = getRefElem(elemStore['right-body-scroll']);\n                let bodyElem;\n                if (column) {\n                    if (column.fixed) {\n                        if (column.fixed === 'left') {\n                            if (leftScrollElem) {\n                                bodyElem = leftScrollElem;\n                            }\n                        }\n                        else {\n                            if (rightScrollElem) {\n                                bodyElem = rightScrollElem;\n                            }\n                        }\n                    }\n                    if (!bodyElem) {\n                        bodyElem = bodyScrollElem;\n                    }\n                    if (bodyElem) {\n                        return bodyElem.querySelector(`.vxe-body--row[rowid=\"${rowid}\"] .${column.id}`);\n                    }\n                }\n                return null;\n            },\n            getCellLabel(row, fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (!column) {\n                    return null;\n                }\n                const formatter = column.formatter;\n                const cellValue = getCellValue(row, column);\n                let cellLabel = cellValue;\n                if (formatter) {\n                    let formatData;\n                    const { fullAllDataRowIdData } = internalData;\n                    const rowid = getRowid($xeTable, row);\n                    const colid = column.id;\n                    const rowRest = fullAllDataRowIdData[rowid];\n                    if (rowRest) {\n                        formatData = rowRest.formatData;\n                        if (!formatData) {\n                            formatData = fullAllDataRowIdData[rowid].formatData = {};\n                        }\n                        if (rowRest && formatData[colid]) {\n                            if (formatData[colid].value === cellValue) {\n                                return formatData[colid].label;\n                            }\n                        }\n                    }\n                    const formatParams = { cellValue, row, rowIndex: tableMethods.getRowIndex(row), column, columnIndex: tableMethods.getColumnIndex(column) };\n                    if (XEUtils.isString(formatter)) {\n                        const gFormatOpts = formats.get(formatter);\n                        const tcFormatMethod = gFormatOpts ? (gFormatOpts.tableCellFormatMethod || gFormatOpts.cellFormatMethod) : null;\n                        cellLabel = tcFormatMethod ? tcFormatMethod(formatParams) : '';\n                    }\n                    else if (XEUtils.isArray(formatter)) {\n                        const gFormatOpts = formats.get(formatter[0]);\n                        const tcFormatMethod = gFormatOpts ? (gFormatOpts.tableCellFormatMethod || gFormatOpts.cellFormatMethod) : null;\n                        cellLabel = tcFormatMethod ? tcFormatMethod(formatParams, ...formatter.slice(1)) : '';\n                    }\n                    else {\n                        cellLabel = formatter(formatParams);\n                    }\n                    if (formatData) {\n                        formatData[colid] = { value: cellValue, label: cellLabel };\n                    }\n                }\n                return cellLabel;\n            },\n            /**\n             * 检查是否为临时行数据\n             * @param {Row} row 行对象\n             */\n            isInsertByRow(row) {\n                const rowid = getRowid($xeTable, row);\n                return !!reactData.insertRowFlag && !!internalData.insertRowMaps[rowid];\n            },\n            isRemoveByRow(row) {\n                const rowid = getRowid($xeTable, row);\n                return !!reactData.removeRowFlag && !!internalData.removeRowMaps[rowid];\n            },\n            /**\n             * 删除所有新增的临时数据\n             * @returns\n             */\n            removeInsertRow() {\n                internalData.insertRowMaps = {};\n                return $xeTable.remove($xeTable.getInsertRecords());\n            },\n            /**\n             * 检查行或列数据是否发生改变\n             * @param {Row} rowidOrRow 行对象、行主键\n             * @param {String} field 字段名\n             */\n            isUpdateByRow(rowidOrRow, field) {\n                const { keepSource } = props;\n                const { tableFullColumn, fullDataRowIdData, sourceDataRowIdData } = internalData;\n                if (keepSource) {\n                    const rowid = XEUtils.isString(rowidOrRow) || XEUtils.isNumber(rowidOrRow) ? rowidOrRow : getRowid($xeTable, rowidOrRow);\n                    const rowRest = fullDataRowIdData[rowid];\n                    // 新增的数据不需要检测\n                    if (!rowRest) {\n                        return false;\n                    }\n                    const row = rowRest.row;\n                    const oRow = sourceDataRowIdData[rowid];\n                    if (oRow) {\n                        if (arguments.length > 1) {\n                            return !eqCellValue(oRow, row, field);\n                        }\n                        for (let index = 0, len = tableFullColumn.length; index < len; index++) {\n                            const property = tableFullColumn[index].field;\n                            if (property && !eqCellValue(oRow, row, property)) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n                return false;\n            },\n            /**\n             * 获取表格的可视列，也可以指定索引获取列\n             * @param {Number} columnIndex 索引\n             */\n            getColumns(columnIndex) {\n                const { visibleColumn } = internalData;\n                return XEUtils.isUndefined(columnIndex) ? visibleColumn.slice(0) : visibleColumn[columnIndex];\n            },\n            /**\n             * 根据列获取列的唯一主键\n             */\n            getColid(fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                return column ? column.id : null;\n            },\n            /**\n             * 根据列的唯一主键获取列\n             * @param {String} colid 列主键\n             */\n            getColumnById(colid) {\n                const { fullColumnIdData } = internalData;\n                return colid && fullColumnIdData[colid] ? fullColumnIdData[colid].column : null;\n            },\n            /**\n             * 根据列的字段名获取列\n             * @param {String} field 字段名\n             */\n            getColumnByField(field) {\n                const fullColumnFieldData = internalData.fullColumnFieldData;\n                return field && fullColumnFieldData[field] ? fullColumnFieldData[field].column : null;\n            },\n            getParentColumn(fieldOrColumn) {\n                const { fullColumnIdData } = internalData;\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                return column && column.parentId && fullColumnIdData[column.parentId] ? fullColumnIdData[column.parentId].column : null;\n            },\n            /**\n             * 获取当前表格的列\n             * 收集到的全量列、全量表头列、处理条件之后的全量表头列、当前渲染中的表头列\n             */\n            getTableColumn() {\n                return {\n                    collectColumn: internalData.collectColumn.slice(0),\n                    fullColumn: internalData.tableFullColumn.slice(0),\n                    visibleColumn: internalData.visibleColumn.slice(0),\n                    tableColumn: reactData.tableColumn.slice(0)\n                };\n            },\n            /**\n             * 移动列到指定列的位置\n             * @param fieldOrColumn\n             * @param targetFieldOrColumn\n             * @param options\n             */\n            moveColumnTo(fieldOrColumn, targetFieldOrColumn, options) {\n                const { fullColumnIdData, visibleColumn } = internalData;\n                const { dragToChild, dragPos, isCrossDrag } = Object.assign({}, options);\n                const dragCol = handleFieldOrColumn($xeTable, fieldOrColumn);\n                let prevDragCol = null;\n                const colRest = dragCol ? fullColumnIdData[dragCol.id] : null;\n                let defPos = 'left';\n                if (XEUtils.isNumber(targetFieldOrColumn)) {\n                    if (colRest && targetFieldOrColumn) {\n                        let currList = colRest.items;\n                        let offsetIndex = colRest._index + targetFieldOrColumn;\n                        if (isCrossDrag) {\n                            currList = visibleColumn;\n                            offsetIndex = colRest._index + targetFieldOrColumn;\n                        }\n                        if (offsetIndex > 0 && offsetIndex < currList.length - 1) {\n                            prevDragCol = currList[offsetIndex];\n                        }\n                        if (targetFieldOrColumn > 0) {\n                            defPos = 'right';\n                        }\n                    }\n                }\n                else {\n                    prevDragCol = handleFieldOrColumn($xeTable, targetFieldOrColumn);\n                    const targetColRest = prevDragCol ? fullColumnIdData[prevDragCol.id] : null;\n                    if (colRest && targetColRest) {\n                        if (targetColRest._index > colRest._index) {\n                            defPos = 'right';\n                        }\n                    }\n                }\n                return $xeTable.handleColDragSwapEvent(null, true, dragCol, prevDragCol, dragPos || defPos, dragToChild === true);\n            },\n            /**\n             * 移动行到指定行的位置\n             * @param rowidOrRow\n             * @param targetRowidOrRow\n             * @param options\n             */\n            moveRowTo(rowidOrRow, targetRowidOrRow, options) {\n                const { treeConfig } = props;\n                const { fullAllDataRowIdData, afterFullData } = internalData;\n                const { dragToChild, dragPos, isCrossDrag } = Object.assign({}, options);\n                const treeOpts = computeTreeOpts.value;\n                const dragRow = handleRowidOrRow($xeTable, rowidOrRow);\n                let prevDragRow = null;\n                let defPos = 'top';\n                const rowRest = dragRow ? fullAllDataRowIdData[getRowid($xeTable, dragRow)] : null;\n                if (XEUtils.isNumber(targetRowidOrRow)) {\n                    if (rowRest && targetRowidOrRow) {\n                        let currList = afterFullData;\n                        let offsetIndex = rowRest._index + targetRowidOrRow;\n                        if (treeConfig) {\n                            currList = rowRest.items;\n                            if (treeOpts.transform) {\n                                offsetIndex = rowRest.treeIndex + targetRowidOrRow;\n                                if (isCrossDrag) {\n                                    currList = afterFullData;\n                                    offsetIndex = rowRest._index + targetRowidOrRow;\n                                }\n                            }\n                        }\n                        if (offsetIndex >= 0 && offsetIndex <= currList.length - 1) {\n                            prevDragRow = currList[offsetIndex];\n                        }\n                        if (targetRowidOrRow > 0) {\n                            defPos = 'bottom';\n                        }\n                    }\n                }\n                else {\n                    prevDragRow = handleRowidOrRow($xeTable, targetRowidOrRow);\n                    const targetRowRest = prevDragRow ? fullAllDataRowIdData[getRowid($xeTable, prevDragRow)] : null;\n                    if (rowRest && targetRowRest) {\n                        if (targetRowRest._index > rowRest._index) {\n                            defPos = 'bottom';\n                        }\n                    }\n                }\n                return $xeTable.handleRowDragSwapEvent(null, true, dragRow, prevDragRow, dragPos || defPos, dragToChild === true);\n            },\n            /**\n             * 获取表格的全量列\n             */\n            getFullColumns() {\n                const { collectColumn } = internalData;\n                return collectColumn.slice(0);\n            },\n            /**\n             * 获取数据，和 data 的行为一致，也可以指定索引获取数据\n             */\n            getData(rowIndex) {\n                const tableSynchData = props.data || internalData.tableSynchData;\n                return XEUtils.isUndefined(rowIndex) ? tableSynchData.slice(0) : tableSynchData[rowIndex];\n            },\n            /**\n             * 用于多选行，获取已选中的数据\n             */\n            getCheckboxRecords(isFull) {\n                const { treeConfig } = props;\n                const { tableFullData, afterFullData, afterTreeFullData, tableFullTreeData, fullDataRowIdData, afterFullRowMaps, selectCheckboxMaps } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { transform, mapChildrenField } = treeOpts;\n                const { checkField } = checkboxOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                let rowList = [];\n                if (checkField) {\n                    if (treeConfig) {\n                        const currTableData = isFull ? (transform ? tableFullTreeData : tableFullData) : (transform ? afterTreeFullData : afterFullData);\n                        rowList = XEUtils.filterTree(currTableData, row => XEUtils.get(row, checkField), { children: transform ? mapChildrenField : childrenField });\n                    }\n                    else {\n                        const currTableData = isFull ? tableFullData : afterFullData;\n                        rowList = currTableData.filter((row) => XEUtils.get(row, checkField));\n                    }\n                }\n                else {\n                    XEUtils.each(selectCheckboxMaps, (row, rowid) => {\n                        if (isFull) {\n                            if (fullDataRowIdData[rowid]) {\n                                rowList.push(fullDataRowIdData[rowid].row);\n                            }\n                        }\n                        else {\n                            if (afterFullRowMaps[rowid]) {\n                                rowList.push(afterFullRowMaps[rowid]);\n                            }\n                        }\n                    });\n                }\n                return rowList;\n            },\n            /**\n             * 只对 tree-config 有效，获取行的子级\n             */\n            getTreeRowChildren(rowOrRowid) {\n                const { treeConfig } = props;\n                const { fullAllDataRowIdData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { transform, mapChildrenField } = treeOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                if (rowOrRowid && treeConfig) {\n                    let rowid;\n                    if (XEUtils.isString(rowOrRowid)) {\n                        rowid = rowOrRowid;\n                    }\n                    else {\n                        rowid = getRowid($xeTable, rowOrRowid);\n                    }\n                    if (rowid) {\n                        const rest = fullAllDataRowIdData[rowid];\n                        const row = rest ? rest.row : null;\n                        if (row) {\n                            return row[transform ? mapChildrenField : childrenField] || [];\n                        }\n                    }\n                }\n                return [];\n            },\n            /**\n             * 只对 tree-config 有效，获取行的父级\n             */\n            getTreeParentRow(rowOrRowid) {\n                const { treeConfig } = props;\n                const { fullAllDataRowIdData } = internalData;\n                if (rowOrRowid && treeConfig) {\n                    let rowid;\n                    if (XEUtils.isString(rowOrRowid)) {\n                        rowid = rowOrRowid;\n                    }\n                    else {\n                        rowid = getRowid($xeTable, rowOrRowid);\n                    }\n                    if (rowid) {\n                        const rest = fullAllDataRowIdData[rowid];\n                        return rest ? rest.parent : null;\n                    }\n                }\n                return null;\n            },\n            getParentRow(rowOrRowid) {\n                warnLog('vxe.error.delFunc', ['getParentRow', 'getTreeParentRow']);\n                return $xeTable.getTreeParentRow(rowOrRowid);\n            },\n            /**\n             * 根据行的唯一主键获取行\n             * @param {String/Number} rowid 行主键\n             */\n            getRowById(cellValue) {\n                const { fullAllDataRowIdData } = internalData;\n                const rowid = XEUtils.eqNull(cellValue) ? '' : encodeURIComponent(cellValue || '');\n                return fullAllDataRowIdData[rowid] ? fullAllDataRowIdData[rowid].row : null;\n            },\n            /**\n             * 根据行获取行的唯一主键\n             * @param {Row} row 行对象\n             */\n            getRowid(row) {\n                return getRowid($xeTable, row);\n            },\n            /**\n             * 获取处理后的表格数据\n             * 如果存在筛选条件，继续处理\n             * 如果存在排序，继续处理\n             */\n            getTableData() {\n                const { tableData, footerTableData } = reactData;\n                const { tableFullData, afterFullData, tableFullTreeData } = internalData;\n                return {\n                    fullData: props.treeConfig ? tableFullTreeData.slice(0) : tableFullData.slice(0),\n                    visibleData: afterFullData.slice(0),\n                    tableData: tableData.slice(0),\n                    footerData: footerTableData.slice(0)\n                };\n            },\n            /**\n             * 获取表格的全量数据，如果是 tree-config 则返回带层级的树结构\n             */\n            getFullData() {\n                const { treeConfig } = props;\n                const { tableFullData, tableFullTreeData } = internalData;\n                if (treeConfig) {\n                    const treeOpts = computeTreeOpts.value;\n                    const { transform, mapChildrenField, rowField, parentField } = treeOpts;\n                    const childrenField = treeOpts.children || treeOpts.childrenField;\n                    if (transform) {\n                        return XEUtils.toArrayTree(XEUtils.toTreeArray(tableFullTreeData, {\n                            children: mapChildrenField\n                        }), {\n                            key: rowField,\n                            parentKey: parentField,\n                            children: childrenField,\n                            mapChildren: mapChildrenField\n                        });\n                    }\n                    return tableFullTreeData.slice(0);\n                }\n                return tableFullData.slice(0);\n            },\n            /**\n             * 设置为固定列\n             */\n            setColumnFixed(fieldOrColumn, fixed) {\n                let status = false;\n                const cols = XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : [fieldOrColumn];\n                const columnOpts = computeColumnOpts.value;\n                const isMaxFixedColumn = computeIsMaxFixedColumn.value;\n                for (let i = 0; i < cols.length; i++) {\n                    const item = cols[i];\n                    const column = handleFieldOrColumn($xeTable, item);\n                    const targetColumn = getRootColumn($xeTable, column);\n                    if (targetColumn && targetColumn.fixed !== fixed) {\n                        // 是否超过最大固定列数量\n                        if (!targetColumn.fixed && isMaxFixedColumn) {\n                            if (VxeUI.modal) {\n                                VxeUI.modal.message({\n                                    status: 'error',\n                                    content: getI18n('vxe.table.maxFixedCol', [columnOpts.maxFixedSize])\n                                });\n                            }\n                            return nextTick();\n                        }\n                        XEUtils.eachTree([targetColumn], (column) => {\n                            column.fixed = fixed;\n                        });\n                        tablePrivateMethods.saveCustomStore('update:fixed');\n                        if (!status) {\n                            status = true;\n                        }\n                    }\n                }\n                if (status) {\n                    return tableMethods.refreshColumn();\n                }\n                return nextTick();\n            },\n            /**\n             * 取消指定固定列\n             */\n            clearColumnFixed(fieldOrColumn) {\n                let status = false;\n                const cols = XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : [fieldOrColumn];\n                cols.forEach(item => {\n                    const column = handleFieldOrColumn($xeTable, item);\n                    const targetColumn = getRootColumn($xeTable, column);\n                    if (targetColumn && targetColumn.fixed) {\n                        XEUtils.eachTree([targetColumn], (column) => {\n                            column.fixed = null;\n                        });\n                        tablePrivateMethods.saveCustomStore('update:fixed');\n                        if (!status) {\n                            status = true;\n                        }\n                    }\n                });\n                if (status) {\n                    return tableMethods.refreshColumn();\n                }\n                return nextTick();\n            },\n            /**\n             * 隐藏指定列\n             */\n            hideColumn(fieldOrColumn) {\n                let status = false;\n                const cols = XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : [fieldOrColumn];\n                cols.forEach(item => {\n                    const column = handleFieldOrColumn($xeTable, item);\n                    if (column && column.visible) {\n                        column.visible = false;\n                        if (!status) {\n                            status = true;\n                        }\n                    }\n                });\n                if (status) {\n                    return tablePrivateMethods.handleCustom();\n                }\n                return nextTick();\n            },\n            /**\n             * 显示指定列\n             */\n            showColumn(fieldOrColumn) {\n                let status = false;\n                const cols = XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : [fieldOrColumn];\n                cols.forEach(item => {\n                    const column = handleFieldOrColumn($xeTable, item);\n                    if (column && !column.visible) {\n                        column.visible = true;\n                        if (!status) {\n                            status = true;\n                        }\n                    }\n                });\n                if (status) {\n                    return tablePrivateMethods.handleCustom();\n                }\n                return nextTick();\n            },\n            setColumnWidth(fieldOrColumn, width) {\n                const { elemStore } = internalData;\n                let status = false;\n                const cols = XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : [fieldOrColumn];\n                let cWidth = XEUtils.toInteger(width);\n                if (isScale(width)) {\n                    const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                    const bodyWidth = bodyScrollElem ? bodyScrollElem.clientWidth - 1 : 0;\n                    cWidth = Math.floor(cWidth * bodyWidth);\n                }\n                if (cWidth) {\n                    cols.forEach(item => {\n                        const column = handleFieldOrColumn($xeTable, item);\n                        if (column) {\n                            column.resizeWidth = cWidth;\n                            if (!status) {\n                                status = true;\n                            }\n                        }\n                    });\n                    if (status) {\n                        return $xeTable.refreshColumn().then(() => {\n                            return { status };\n                        });\n                    }\n                }\n                return nextTick().then(() => {\n                    return { status };\n                });\n            },\n            getColumnWidth(fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column) {\n                    return column.renderWidth;\n                }\n                return 0;\n            },\n            /**\n             * 手动重置列的显示隐藏、列宽拖动的状态、固定列、排序列；\n             * 如果为 true 则重置所有状态\n             * 如果已关联工具栏，则会同步更新\n             */\n            resetColumn(options) {\n                warnLog('vxe.error.delFunc', ['resetColumn', 'resetCustom']);\n                return $xeTable.resetCustom(options);\n            },\n            /**\n             * 刷新列信息\n             * 将固定的列左边、右边分别靠边\n             * 如果传 true 则会检查列顺序并排序\n             */\n            refreshColumn(initSort) {\n                if (initSort) {\n                    handleUpdateColumn();\n                }\n                return parseColumns(true).then(() => {\n                    return tableMethods.refreshScroll();\n                }).then(() => {\n                    return tableMethods.recalculate();\n                });\n            },\n            setRowHeightConf(heightConf) {\n                const { fullAllDataRowIdData } = internalData;\n                let status = false;\n                if (heightConf) {\n                    XEUtils.each(heightConf, (height, rowid) => {\n                        const rowRest = fullAllDataRowIdData[rowid];\n                        if (rowRest) {\n                            const rHeight = XEUtils.toInteger(height);\n                            if (rHeight) {\n                                rowRest.resizeHeight = rHeight;\n                                if (!status) {\n                                    status = true;\n                                }\n                            }\n                        }\n                    });\n                    if (status) {\n                        internalData.isResizeCellHeight = true;\n                        reactData.resizeHeightFlag++;\n                    }\n                }\n                return nextTick().then(() => {\n                    updateRowOffsetTop();\n                    return { status };\n                });\n            },\n            getRowHeightConf(isFull) {\n                const { fullAllDataRowIdData, afterFullData } = internalData;\n                const { handleGetRowId } = createHandleGetRowId($xeTable);\n                const rowOpts = computeRowOpts.value;\n                const cellOpts = computeCellOpts.value;\n                const defaultRowHeight = computeDefaultRowHeight.value;\n                const rest = {};\n                afterFullData.forEach(row => {\n                    const rowid = handleGetRowId(row);\n                    const rowRest = fullAllDataRowIdData[rowid];\n                    if (rowRest) {\n                        const resizeHeight = rowRest.resizeHeight;\n                        if (resizeHeight || isFull) {\n                            const currCellHeight = resizeHeight || cellOpts.height || rowOpts.height || rowRest.height || defaultRowHeight;\n                            rest[rowid] = currCellHeight;\n                        }\n                    }\n                });\n                return rest;\n            },\n            setRowHeight(rowOrId, height) {\n                const { fullAllDataRowIdData } = internalData;\n                let status = false;\n                const rows = XEUtils.isArray(rowOrId) ? rowOrId : [rowOrId];\n                let rHeight = XEUtils.toInteger(height);\n                if (isScale(height)) {\n                    const tableBody = refTableBody.value;\n                    const bodyElem = tableBody ? tableBody.$el : null;\n                    const bodyHeight = bodyElem ? bodyElem.clientHeight - 1 : 0;\n                    rHeight = Math.floor(rHeight * bodyHeight);\n                }\n                if (rHeight) {\n                    const { handleGetRowId } = createHandleGetRowId($xeTable);\n                    rows.forEach(row => {\n                        const rowid = XEUtils.isString(row) || XEUtils.isNumber(row) ? row : handleGetRowId(row);\n                        const rowRest = fullAllDataRowIdData[rowid];\n                        if (rowRest) {\n                            rowRest.resizeHeight = rHeight;\n                            if (!status) {\n                                status = true;\n                            }\n                        }\n                    });\n                    if (status) {\n                        internalData.isResizeCellHeight = true;\n                        reactData.resizeHeightFlag++;\n                    }\n                }\n                return nextTick().then(() => {\n                    return { status };\n                });\n            },\n            getRowHeight(rowOrId) {\n                const { fullAllDataRowIdData } = internalData;\n                const rowOpts = computeRowOpts.value;\n                const cellOpts = computeCellOpts.value;\n                const defaultRowHeight = computeDefaultRowHeight.value;\n                const rowid = XEUtils.isString(rowOrId) || XEUtils.isNumber(rowOrId) ? rowOrId : getRowid($xeTable, rowOrId);\n                const rowRest = fullAllDataRowIdData[rowid];\n                if (rowRest) {\n                    return rowRest.resizeHeight || cellOpts.height || rowOpts.height || rowRest.height || defaultRowHeight;\n                }\n                return 0;\n            },\n            /**\n             * 刷新滚动操作，手动同步滚动相关位置（对于某些特殊的操作，比如滚动条错位、固定列不同步）\n             */\n            refreshScroll() {\n                const { elemStore, lastScrollLeft, lastScrollTop } = internalData;\n                const headerScrollElem = getRefElem(elemStore['main-header-scroll']);\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                const footerScrollElem = getRefElem(elemStore['main-footer-scroll']);\n                const leftScrollElem = getRefElem(elemStore['left-body-scroll']);\n                const rightScrollElem = getRefElem(elemStore['right-body-scroll']);\n                const xHandleEl = refScrollXHandleElem.value;\n                const yHandleEl = refScrollYHandleElem.value;\n                return new Promise(resolve => {\n                    // 还原滚动条位置\n                    if (lastScrollLeft || lastScrollTop) {\n                        return restoreScrollLocation($xeTable, lastScrollLeft, lastScrollTop).then().then(() => {\n                            // 存在滚动行为未结束情况\n                            setTimeout(resolve, 10);\n                        });\n                    }\n                    internalData.intoRunScroll = true;\n                    // 重置\n                    setScrollTop(yHandleEl, lastScrollTop);\n                    setScrollTop(bodyScrollElem, lastScrollTop);\n                    setScrollTop(leftScrollElem, lastScrollTop);\n                    setScrollTop(rightScrollElem, lastScrollTop);\n                    setScrollLeft(xHandleEl, lastScrollLeft);\n                    setScrollLeft(bodyScrollElem, lastScrollLeft);\n                    setScrollLeft(headerScrollElem, lastScrollLeft);\n                    setScrollLeft(footerScrollElem, lastScrollLeft);\n                    // 存在滚动行为未结束情况\n                    setTimeout(() => {\n                        internalData.intoRunScroll = false;\n                        resolve();\n                    }, 10);\n                });\n            },\n            /**\n             * 重新渲染布局\n             * 刷新布局\n             */\n            recalculate(reFull) {\n                return new Promise(resolve => {\n                    const { rceTimeout, rceRunTime } = internalData;\n                    const resizeOpts = computeResizeOpts.value;\n                    const refreshDelay = resizeOpts.refreshDelay || 20;\n                    const el = refElem.value;\n                    if (el && el.clientWidth) {\n                        autoCellWidth();\n                        updateRowExpandStyle();\n                    }\n                    if (rceTimeout) {\n                        clearTimeout(rceTimeout);\n                        if (rceRunTime && rceRunTime + (refreshDelay - 5) < Date.now()) {\n                            resolve(handleRecalculateLayout(!!reFull));\n                        }\n                        else {\n                            nextTick(() => {\n                                resolve();\n                            });\n                        }\n                    }\n                    else {\n                        resolve(handleRecalculateLayout(!!reFull));\n                    }\n                    internalData.rceTimeout = setTimeout(() => {\n                        internalData.rceTimeout = undefined;\n                        handleRecalculateLayout(!!reFull);\n                    }, refreshDelay);\n                });\n            },\n            openTooltip(target, content) {\n                const $commTip = refCommTooltip.value;\n                if ($commTip && $commTip.open) {\n                    return $commTip.open(target, content);\n                }\n                return nextTick();\n            },\n            /**\n             * 关闭 tooltip\n             */\n            closeTooltip() {\n                const { tooltipStore } = reactData;\n                const $tooltip = refTooltip.value;\n                const $commTip = refCommTooltip.value;\n                if (tooltipStore.visible) {\n                    Object.assign(tooltipStore, {\n                        row: null,\n                        column: null,\n                        content: null,\n                        visible: false,\n                        currOpts: {}\n                    });\n                    if ($tooltip && $tooltip.close) {\n                        $tooltip.close();\n                    }\n                }\n                if ($commTip && $commTip.close) {\n                    $commTip.close();\n                }\n                return nextTick();\n            },\n            /**\n             * 判断列头复选框是否被选中\n             */\n            isAllCheckboxChecked() {\n                return reactData.isAllSelected;\n            },\n            /**\n             * 判断列头复选框是否被半选\n             */\n            isAllCheckboxIndeterminate() {\n                return !reactData.isAllSelected && reactData.isIndeterminate;\n            },\n            /**\n             * 获取复选框半选状态的行数据\n             */\n            getCheckboxIndeterminateRecords(isFull) {\n                const { treeConfig } = props;\n                const { fullDataRowIdData, treeIndeterminateRowMaps } = internalData;\n                if (treeConfig) {\n                    const fullRest = [];\n                    const defRest = [];\n                    XEUtils.each(treeIndeterminateRowMaps, (item, rowid) => {\n                        if (item) {\n                            fullRest.push(item);\n                            if (fullDataRowIdData[rowid]) {\n                                defRest.push(item);\n                            }\n                        }\n                    });\n                    if (isFull) {\n                        return fullRest;\n                    }\n                    return defRest;\n                }\n                return [];\n            },\n            /**\n             * 用于多选行，设置行为选中状态，第二个参数为选中与否\n             * @param {Array/Row} rows 行数据\n             * @param {Boolean} value 是否选中\n             */\n            setCheckboxRow(rows, checked) {\n                if (rows && !XEUtils.isArray(rows)) {\n                    rows = [rows];\n                }\n                return handleCheckedCheckboxRow(rows, checked, true);\n            },\n            setCheckboxRowKey(keys, checked) {\n                const { fullAllDataRowIdData } = internalData;\n                if (!XEUtils.isArray(keys)) {\n                    keys = [keys];\n                }\n                const rows = [];\n                keys.forEach((rowid) => {\n                    const rowRest = fullAllDataRowIdData[rowid];\n                    if (rowRest) {\n                        rows.push(rowRest.row);\n                    }\n                });\n                return handleCheckedCheckboxRow(rows, checked, true);\n            },\n            isCheckedByCheckboxRow(row) {\n                const { updateCheckboxFlag } = reactData;\n                const { selectCheckboxMaps } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField } = checkboxOpts;\n                if (checkField) {\n                    return XEUtils.get(row, checkField);\n                }\n                return !!updateCheckboxFlag && !!selectCheckboxMaps[getRowid($xeTable, row)];\n            },\n            isCheckedByCheckboxRowKey(rowid) {\n                const { updateCheckboxFlag } = reactData;\n                const { fullAllDataRowIdData, selectCheckboxMaps } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField } = checkboxOpts;\n                if (checkField) {\n                    const rowRest = fullAllDataRowIdData[rowid];\n                    if (rowRest) {\n                        return XEUtils.get(rowRest.row, checkField);\n                    }\n                    return false;\n                }\n                return !!updateCheckboxFlag && !!selectCheckboxMaps[rowid];\n            },\n            isIndeterminateByCheckboxRow(row) {\n                const { treeIndeterminateRowMaps } = internalData;\n                return !!treeIndeterminateRowMaps[getRowid($xeTable, row)] && !$xeTable.isCheckedByCheckboxRow(row);\n            },\n            isIndeterminateByCheckboxRowKey(rowid) {\n                const { treeIndeterminateRowMaps } = internalData;\n                return !!treeIndeterminateRowMaps[rowid] && !$xeTable.isCheckedByCheckboxRowKey(rowid);\n            },\n            /**\n             * 多选，切换某一行的选中状态\n             */\n            toggleCheckboxRow(row) {\n                const { selectCheckboxMaps } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField } = checkboxOpts;\n                const checked = checkField ? !XEUtils.get(row, checkField) : !selectCheckboxMaps[getRowid($xeTable, row)];\n                tablePrivateMethods.handleBatchSelectRows([row], checked, true);\n                tablePrivateMethods.checkSelectionStatus();\n                return nextTick();\n            },\n            /**\n             * 用于多选行，设置所有行的选中状态\n             * @param {Boolean} value 是否选中\n             */\n            setAllCheckboxRow(value) {\n                return handleCheckedAllCheckboxRow(value, true);\n            },\n            /**\n             * 获取单选框保留选中的行\n             */\n            getRadioReserveRecord(isFull) {\n                const { treeConfig } = props;\n                const { fullDataRowIdData, radioReserveRow, afterFullData } = internalData;\n                const radioOpts = computeRadioOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                if (radioOpts.reserve && radioReserveRow) {\n                    const rowid = getRowid($xeTable, radioReserveRow);\n                    if (isFull) {\n                        if (!fullDataRowIdData[rowid]) {\n                            return radioReserveRow;\n                        }\n                    }\n                    else {\n                        const rowkey = getRowkey($xeTable);\n                        if (treeConfig) {\n                            const matchObj = XEUtils.findTree(afterFullData, row => rowid === XEUtils.get(row, rowkey), { children: childrenField });\n                            if (matchObj) {\n                                return radioReserveRow;\n                            }\n                        }\n                        else {\n                            if (!afterFullData.some(row => rowid === XEUtils.get(row, rowkey))) {\n                                return radioReserveRow;\n                            }\n                        }\n                    }\n                }\n                return null;\n            },\n            clearRadioReserve() {\n                internalData.radioReserveRow = null;\n                return nextTick();\n            },\n            /**\n             * 获取复选框保留选中的行\n             */\n            getCheckboxReserveRecords(isFull) {\n                const { treeConfig } = props;\n                const { afterFullData, fullDataRowIdData, checkboxReserveRowMap } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const reserveSelection = [];\n                if (checkboxOpts.reserve) {\n                    const { handleGetRowId } = createHandleGetRowId($xeTable);\n                    const afterFullIdMaps = {};\n                    if (treeConfig) {\n                        XEUtils.eachTree(afterFullData, row => {\n                            afterFullIdMaps[handleGetRowId(row)] = 1;\n                        }, { children: childrenField });\n                    }\n                    else {\n                        afterFullData.forEach(row => {\n                            afterFullIdMaps[handleGetRowId(row)] = 1;\n                        });\n                    }\n                    XEUtils.each(checkboxReserveRowMap, (oldRow, oldRowid) => {\n                        if (oldRow) {\n                            if (isFull) {\n                                if (!fullDataRowIdData[oldRowid]) {\n                                    reserveSelection.push(oldRow);\n                                }\n                            }\n                            else {\n                                if (!afterFullIdMaps[oldRowid]) {\n                                    reserveSelection.push(oldRow);\n                                }\n                            }\n                        }\n                    });\n                }\n                return reserveSelection;\n            },\n            clearCheckboxReserve() {\n                internalData.checkboxReserveRowMap = {};\n                return nextTick();\n            },\n            /**\n             * 多选，切换所有行的选中状态\n             */\n            toggleAllCheckboxRow() {\n                handleCheckAllEvent(null, !reactData.isAllSelected);\n                return nextTick();\n            },\n            /**\n             * 用于多选行，手动清空用户的选择\n             * 清空行为不管是否被禁用还是保留记录，都将彻底清空选中状态\n             */\n            clearCheckboxRow() {\n                const { treeConfig } = props;\n                const { tableFullData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField, reserve } = checkboxOpts;\n                // indeterminateField 仅支持读取\n                const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField;\n                if (checkField) {\n                    const handleClearChecked = (item) => {\n                        if (treeConfig && indeterminateField) {\n                            XEUtils.set(item, indeterminateField, false);\n                        }\n                        XEUtils.set(item, checkField, false);\n                    };\n                    if (treeConfig) {\n                        XEUtils.eachTree(tableFullData, handleClearChecked, { children: childrenField });\n                    }\n                    else {\n                        tableFullData.forEach(handleClearChecked);\n                    }\n                }\n                if (reserve) {\n                    tableFullData.forEach((row) => handleCheckboxReserveRow(row, false));\n                }\n                reactData.isAllSelected = false;\n                reactData.isIndeterminate = false;\n                internalData.selectCheckboxMaps = {};\n                internalData.treeIndeterminateRowMaps = {};\n                reactData.updateCheckboxFlag++;\n                return nextTick();\n            },\n            /**\n             * 用于当前行，设置某一行为高亮状态\n             * @param {Row} row 行对象\n             */\n            setCurrentRow(row) {\n                const rowOpts = computeRowOpts.value;\n                const el = refElem.value;\n                tableMethods.clearCurrentRow();\n                // tableMethods.clearCurrentColumn()\n                reactData.currentRow = row;\n                if (rowOpts.isCurrent || props.highlightCurrentRow) {\n                    if (el) {\n                        XEUtils.arrayEach(el.querySelectorAll(`[rowid=\"${getRowid($xeTable, row)}\"]`), elem => addClass(elem, 'row--current'));\n                    }\n                }\n                return nextTick();\n            },\n            isCheckedByRadioRow(row) {\n                const { selectRadioRow } = reactData;\n                if (row && selectRadioRow) {\n                    return $xeTable.eqRow(selectRadioRow, row);\n                }\n                return false;\n            },\n            isCheckedByRadioRowKey(key) {\n                const { selectRadioRow } = reactData;\n                if (selectRadioRow) {\n                    return key === getRowid($xeTable, selectRadioRow);\n                }\n                return false;\n            },\n            /**\n             * 用于单选行，设置某一行为选中状态\n             * @param {Row} row 行对象\n             */\n            setRadioRow(row) {\n                return handleCheckedRadioRow(row, true);\n            },\n            /**\n             * 用于单选行，设置某一行为选中状态\n             * @param key 行主键\n             */\n            setRadioRowKey(rowid) {\n                const { fullAllDataRowIdData } = internalData;\n                const rowRest = fullAllDataRowIdData[rowid];\n                if (rowRest) {\n                    return handleCheckedRadioRow(rowRest.row, true);\n                }\n                return nextTick();\n            },\n            /**\n             * 用于当前行，手动清空当前高亮的状态\n             */\n            clearCurrentRow() {\n                const el = refElem.value;\n                reactData.currentRow = null;\n                internalData.hoverRow = null;\n                if (el) {\n                    XEUtils.arrayEach(el.querySelectorAll('.row--current'), elem => removeClass(elem, 'row--current'));\n                }\n                return nextTick();\n            },\n            /**\n             * 用于单选行，手动清空用户的选择\n             */\n            clearRadioRow() {\n                reactData.selectRadioRow = null;\n                return nextTick();\n            },\n            /**\n             * 用于当前行，获取当前行的数据\n             */\n            getCurrentRecord() {\n                const rowOpts = computeRowOpts.value;\n                return rowOpts.isCurrent || props.highlightCurrentRow ? reactData.currentRow : null;\n            },\n            /**\n             * 用于单选行，获取当已选中的数据\n             */\n            getRadioRecord(isFull) {\n                const { fullDataRowIdData, afterFullRowMaps } = internalData;\n                const { selectRadioRow } = reactData;\n                if (selectRadioRow) {\n                    const rowid = getRowid($xeTable, selectRadioRow);\n                    if (isFull) {\n                        if (fullDataRowIdData[rowid]) {\n                            return selectRadioRow;\n                        }\n                    }\n                    else {\n                        if (afterFullRowMaps[rowid]) {\n                            return selectRadioRow;\n                        }\n                    }\n                }\n                return null;\n            },\n            getCurrentColumn() {\n                const columnOpts = computeColumnOpts.value;\n                return columnOpts.isCurrent || props.highlightCurrentColumn ? reactData.currentColumn : null;\n            },\n            /**\n             * 用于当前列，设置某列行为高亮状态\n             */\n            setCurrentColumn(fieldOrColumn) {\n                const { mouseConfig } = props;\n                const mouseOpts = computeMouseOpts.value;\n                const isMouseSelected = mouseConfig && mouseOpts.selected;\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column) {\n                    $xeTable.clearCurrentColumn();\n                    reactData.currentColumn = column;\n                }\n                return nextTick().then(() => {\n                    // 更新状选中态\n                    if (isMouseSelected) {\n                        $xeTable.addCellSelectedClass();\n                    }\n                });\n            },\n            /**\n             * 用于当前列，手动清空当前高亮的状态\n             */\n            clearCurrentColumn() {\n                reactData.currentColumn = null;\n                return nextTick();\n            },\n            setPendingRow(rows, status) {\n                const { handleGetRowId } = createHandleGetRowId($xeTable);\n                const { pendingRowMaps } = internalData;\n                if (rows && !XEUtils.isArray(rows)) {\n                    rows = [rows];\n                }\n                if (status) {\n                    rows.forEach((row) => {\n                        const rowid = handleGetRowId(row);\n                        if (rowid && !pendingRowMaps[rowid]) {\n                            pendingRowMaps[rowid] = row;\n                        }\n                    });\n                }\n                else {\n                    rows.forEach((row) => {\n                        const rowid = handleGetRowId(row);\n                        if (rowid && pendingRowMaps[rowid]) {\n                            delete pendingRowMaps[rowid];\n                        }\n                    });\n                }\n                reactData.pendingRowFlag++;\n                return nextTick();\n            },\n            togglePendingRow(rows) {\n                const { handleGetRowId } = createHandleGetRowId($xeTable);\n                const { pendingRowMaps } = internalData;\n                if (rows && !XEUtils.isArray(rows)) {\n                    rows = [rows];\n                }\n                rows.forEach((row) => {\n                    const rowid = handleGetRowId(row);\n                    if (rowid) {\n                        if (pendingRowMaps[rowid]) {\n                            delete pendingRowMaps[rowid];\n                        }\n                        else {\n                            pendingRowMaps[rowid] = row;\n                        }\n                    }\n                });\n                reactData.pendingRowFlag++;\n                return nextTick();\n            },\n            hasPendingByRow(row) {\n                return tableMethods.isPendingByRow(row);\n            },\n            isPendingByRow(row) {\n                const { pendingRowMaps } = internalData;\n                const rowid = getRowid($xeTable, row);\n                return !!pendingRowMaps[rowid];\n            },\n            getPendingRecords() {\n                const { fullAllDataRowIdData, pendingRowMaps } = internalData;\n                const insertRecords = [];\n                XEUtils.each(pendingRowMaps, (row, rowid) => {\n                    if (fullAllDataRowIdData[rowid]) {\n                        insertRecords.push(row);\n                    }\n                });\n                return insertRecords;\n            },\n            clearPendingRow() {\n                internalData.pendingRowMaps = {};\n                reactData.pendingRowFlag++;\n                return nextTick();\n            },\n            sort(sortConfs, sortOrder) {\n                const sortOpts = computeSortOpts.value;\n                const { multiple, remote, orders } = sortOpts;\n                if (sortConfs) {\n                    if (XEUtils.isString(sortConfs)) {\n                        sortConfs = [\n                            { field: sortConfs, order: sortOrder }\n                        ];\n                    }\n                }\n                if (!XEUtils.isArray(sortConfs)) {\n                    sortConfs = [sortConfs];\n                }\n                if (sortConfs.length) {\n                    if (!multiple) {\n                        clearAllSort();\n                    }\n                    (multiple ? sortConfs : [sortConfs[0]]).forEach((confs, index) => {\n                        let { field, order } = confs;\n                        let column = field;\n                        if (XEUtils.isString(field)) {\n                            column = tableMethods.getColumnByField(field);\n                        }\n                        if (column && column.sortable) {\n                            if (orders.indexOf(order) === -1) {\n                                order = getNextSortOrder(column);\n                            }\n                            if (column.order !== order) {\n                                column.order = order;\n                            }\n                            column.sortTime = Date.now() + index;\n                        }\n                    });\n                    // 如果是服务端排序，则跳过本地排序处理\n                    if (!remote) {\n                        tablePrivateMethods.handleTableData(true);\n                    }\n                    return nextTick().then(() => {\n                        tableMethods.updateCellAreas();\n                        return updateStyle();\n                    });\n                }\n                return nextTick();\n            },\n            setSort(sortConfs, isUpdate) {\n                const sortOpts = computeSortOpts.value;\n                const { multiple, remote, orders } = sortOpts;\n                if (!XEUtils.isArray(sortConfs)) {\n                    sortConfs = [sortConfs];\n                }\n                if (sortConfs && sortConfs.length) {\n                    if (!multiple) {\n                        sortConfs = [sortConfs[0]];\n                        clearAllSort();\n                    }\n                    let firstColumn = null;\n                    sortConfs.forEach((confs, index) => {\n                        let { field, order } = confs;\n                        let column = field;\n                        if (XEUtils.isString(field)) {\n                            column = tableMethods.getColumnByField(field);\n                        }\n                        if (!firstColumn) {\n                            firstColumn = column;\n                        }\n                        if (column && column.sortable) {\n                            if (orders.indexOf(order) === -1) {\n                                order = getNextSortOrder(column);\n                            }\n                            if (column.order !== order) {\n                                column.order = order;\n                            }\n                            column.sortTime = Date.now() + index;\n                        }\n                    });\n                    if (isUpdate) {\n                        if (!remote) {\n                            tablePrivateMethods.handleTableData(true);\n                        }\n                        $xeTable.handleColumnSortEvent(new Event('click'), firstColumn);\n                    }\n                    return nextTick().then(() => {\n                        tableMethods.updateCellAreas();\n                        return updateStyle();\n                    });\n                }\n                return nextTick();\n            },\n            /**\n             * 清空指定列的排序条件\n             * 如果为空则清空所有列的排序条件\n             * @param {String} fieldOrColumn 列或字段名\n             */\n            clearSort(fieldOrColumn) {\n                const sortOpts = computeSortOpts.value;\n                if (fieldOrColumn) {\n                    const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                    if (column) {\n                        column.order = null;\n                    }\n                }\n                else {\n                    clearAllSort();\n                }\n                if (!sortOpts.remote) {\n                    tablePrivateMethods.handleTableData(true);\n                }\n                return nextTick().then(updateStyle);\n            },\n            isSort(fieldOrColumn) {\n                if (fieldOrColumn) {\n                    const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                    return column ? column.sortable && !!column.order : false;\n                }\n                return tableMethods.getSortColumns().length > 0;\n            },\n            getSortColumns() {\n                const sortOpts = computeSortOpts.value;\n                const { multiple, chronological } = sortOpts;\n                const sortList = [];\n                const { tableFullColumn } = internalData;\n                tableFullColumn.forEach((column) => {\n                    const { field, order } = column;\n                    if (column.sortable && order) {\n                        sortList.push({ column, field, property: field, order: order, sortTime: column.sortTime });\n                    }\n                });\n                if (multiple && chronological && sortList.length > 1) {\n                    return XEUtils.orderBy(sortList, 'sortTime');\n                }\n                return sortList;\n            },\n            /**\n             * 关闭筛选\n             * @param {Event} evnt 事件\n             */\n            closeFilter() {\n                const { filterStore } = reactData;\n                const { column, visible } = filterStore;\n                Object.assign(filterStore, {\n                    isAllSelected: false,\n                    isIndeterminate: false,\n                    options: [],\n                    visible: false\n                });\n                if (visible) {\n                    dispatchEvent('filter-visible', {\n                        column,\n                        property: column.field,\n                        field: column.field,\n                        filterList: () => $xeTable.getCheckedFilters(),\n                        visible: false\n                    }, null);\n                }\n                return nextTick();\n            },\n            /**\n             * 判断指定列是否为筛选状态，如果为空则判断所有列\n             * @param {String} fieldOrColumn 字段名\n             */\n            isActiveFilterByColumn(fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column) {\n                    return column.filters && column.filters.some((option) => option.checked);\n                }\n                return $xeTable.getCheckedFilters().length > 0;\n            },\n            isFilter(fieldOrColumn) {\n                return tableMethods.isActiveFilterByColumn(fieldOrColumn);\n            },\n            /**\n             * 判断展开行是否懒加载完成\n             * @param {Row} row 行对象\n             */\n            isRowExpandLoaded(row) {\n                const { fullAllDataRowIdData } = internalData;\n                const rowRest = fullAllDataRowIdData[getRowid($xeTable, row)];\n                return rowRest && !!rowRest.expandLoaded;\n            },\n            clearRowExpandLoaded(row) {\n                const { fullAllDataRowIdData, rowExpandLazyLoadedMaps } = internalData;\n                const expandOpts = computeExpandOpts.value;\n                const { lazy } = expandOpts;\n                const rowid = getRowid($xeTable, row);\n                const rowRest = fullAllDataRowIdData[rowid];\n                if (lazy && rowRest) {\n                    rowRest.expandLoaded = false;\n                    delete rowExpandLazyLoadedMaps[rowid];\n                }\n                reactData.rowExpandedFlag++;\n                return nextTick();\n            },\n            /**\n             * 重新懒加载展开行，并展开内容\n             * @param {Row} row 行对象\n             */\n            reloadRowExpand(row) {\n                const { rowExpandLazyLoadedMaps } = internalData;\n                const expandOpts = computeExpandOpts.value;\n                const { lazy } = expandOpts;\n                const rowid = getRowid($xeTable, row);\n                if (lazy && !rowExpandLazyLoadedMaps[rowid]) {\n                    $xeTable.clearRowExpandLoaded(row)\n                        .then(() => handleAsyncRowExpand(row));\n                }\n                return nextTick();\n            },\n            reloadExpandContent(row) {\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['reloadExpandContent', 'reloadRowExpand']);\n                }\n                // 即将废弃\n                return $xeTable.reloadRowExpand(row);\n            },\n            /**\n             * 切换展开行\n             */\n            toggleRowExpand(row) {\n                return $xeTable.setRowExpand(row, !$xeTable.isRowExpandByRow(row));\n            },\n            /**\n             * 设置所有行的展开与否\n             * @param {Boolean} expanded 是否展开\n             */\n            setAllRowExpand(expanded) {\n                const treeOpts = computeTreeOpts.value;\n                const { tableFullData, tableFullTreeData } = internalData;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                let expandedRows = [];\n                if (props.treeConfig) {\n                    XEUtils.eachTree(tableFullTreeData, (row) => {\n                        expandedRows.push(row);\n                    }, { children: childrenField });\n                }\n                else {\n                    expandedRows = tableFullData;\n                }\n                return tableMethods.setRowExpand(expandedRows, expanded);\n            },\n            /**\n             * 设置展开行，二个参数设置这一行展开与否\n             * 支持单行\n             * 支持多行\n             * @param {Array/Row} rows 行数据\n             * @param {Boolean} expanded 是否展开\n             */\n            setRowExpand(rows, expanded) {\n                const { expandColumn } = reactData;\n                let { fullAllDataRowIdData, rowExpandedMaps, rowExpandLazyLoadedMaps } = internalData;\n                const { handleGetRowId } = createHandleGetRowId($xeTable);\n                const expandOpts = computeExpandOpts.value;\n                const { reserve, lazy, accordion, toggleMethod } = expandOpts;\n                const lazyRests = [];\n                const columnIndex = $xeTable.getColumnIndex(expandColumn);\n                const $columnIndex = $xeTable.getVMColumnIndex(expandColumn);\n                if (rows) {\n                    if (!XEUtils.isArray(rows)) {\n                        rows = [rows];\n                    }\n                    if (accordion) {\n                        // 只能同时展开一个\n                        rowExpandedMaps = {};\n                        internalData.rowExpandedMaps = rowExpandedMaps;\n                        rows = rows.slice(rows.length - 1, rows.length);\n                    }\n                    const validRows = toggleMethod ? rows.filter((row) => toggleMethod({ $table: $xeTable, expanded, column: expandColumn, columnIndex, $columnIndex, row, rowIndex: tableMethods.getRowIndex(row), $rowIndex: tableMethods.getVMRowIndex(row) })) : rows;\n                    if (expanded) {\n                        validRows.forEach((row) => {\n                            const rowid = handleGetRowId(row);\n                            if (!rowExpandedMaps[rowid]) {\n                                const rowRest = fullAllDataRowIdData[rowid];\n                                const isLoad = lazy && !rowRest.expandLoaded && !rowExpandLazyLoadedMaps[rowid];\n                                if (isLoad) {\n                                    lazyRests.push(handleAsyncRowExpand(row));\n                                }\n                                else {\n                                    rowExpandedMaps[rowid] = row;\n                                }\n                            }\n                        });\n                    }\n                    else {\n                        validRows.forEach(item => {\n                            const rowid = handleGetRowId(item);\n                            if (rowExpandedMaps[rowid]) {\n                                delete rowExpandedMaps[rowid];\n                            }\n                        });\n                    }\n                    if (reserve) {\n                        validRows.forEach((row) => handleRowExpandReserve(row, expanded));\n                    }\n                }\n                reactData.rowExpandedFlag++;\n                return Promise.all(lazyRests)\n                    .then(() => nextTick())\n                    .then(() => $xeTable.recalculate(true))\n                    .then(() => {\n                    updateRowOffsetTop();\n                    updateRowExpandStyle();\n                    handleRowExpandScroll();\n                    return $xeTable.updateCellAreas();\n                });\n            },\n            /**\n             * 判断行是否为展开状态\n             * @param {Row} row 行对象\n             */\n            isRowExpandByRow(row) {\n                const { rowExpandedFlag } = reactData;\n                const { rowExpandedMaps } = internalData;\n                const rowid = getRowid($xeTable, row);\n                return !!rowExpandedFlag && !!rowExpandedMaps[rowid];\n            },\n            isExpandByRow(row) {\n                // 已废弃\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['isExpandByRow', 'isRowExpandByRow']);\n                }\n                return tableMethods.isRowExpandByRow(row);\n            },\n            /**\n             * 手动清空展开行状态，数据会恢复成未展开的状态\n             */\n            clearRowExpand() {\n                const { tableFullData } = internalData;\n                const expandOpts = computeExpandOpts.value;\n                const { reserve } = expandOpts;\n                const expList = $xeTable.getRowExpandRecords();\n                internalData.rowExpandedMaps = {};\n                reactData.rowExpandedFlag++;\n                if (reserve) {\n                    tableFullData.forEach((row) => handleRowExpandReserve(row, false));\n                }\n                return nextTick().then(() => {\n                    if (expList.length) {\n                        return $xeTable.recalculate(true);\n                    }\n                }).then(() => {\n                    updateRowOffsetTop();\n                    updateRowExpandStyle();\n                    handleRowExpandScroll();\n                    return $xeTable.updateCellAreas();\n                });\n            },\n            clearRowExpandReserve() {\n                internalData.rowExpandedReserveRowMap = {};\n                return nextTick();\n            },\n            getRowExpandRecords() {\n                const rest = [];\n                XEUtils.each(internalData.rowExpandedMaps, item => {\n                    if (item) {\n                        rest.push(item);\n                    }\n                });\n                return rest;\n            },\n            getTreeExpandRecords() {\n                const rest = [];\n                XEUtils.each(internalData.treeExpandedMaps, item => {\n                    if (item) {\n                        rest.push(item);\n                    }\n                });\n                return rest;\n            },\n            /**\n             * 判断树节点是否懒加载完成\n             * @param {Row} row 行对象\n             */\n            isTreeExpandLoaded(row) {\n                const { fullAllDataRowIdData } = internalData;\n                const rowRest = fullAllDataRowIdData[getRowid($xeTable, row)];\n                return rowRest && !!rowRest.treeLoaded;\n            },\n            clearTreeExpandLoaded(rows) {\n                const { fullAllDataRowIdData, treeExpandedMaps } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { transform } = treeOpts;\n                if (rows) {\n                    if (!XEUtils.isArray(rows)) {\n                        rows = [rows];\n                    }\n                    rows.forEach((row) => {\n                        const rowid = getRowid($xeTable, row);\n                        const rowRest = fullAllDataRowIdData[rowid];\n                        if (rowRest) {\n                            rowRest.treeLoaded = false;\n                            if (treeExpandedMaps[rowid]) {\n                                delete treeExpandedMaps[rowid];\n                            }\n                        }\n                    });\n                }\n                else {\n                    XEUtils.each(fullAllDataRowIdData, (rowRest) => {\n                        rowRest.treeLoaded = false;\n                    });\n                }\n                internalData.treeExpandedMaps = {};\n                reactData.treeExpandedFlag++;\n                if (transform) {\n                    handleVirtualTreeToList();\n                    return $xeTable.handleTableData();\n                }\n                return nextTick();\n            },\n            /**\n             * 重新懒加载树节点，并展开该节点\n             * @param {Row} row 行对象\n             */\n            reloadTreeExpand(row) {\n                const { treeExpandLazyLoadedMaps } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const hasChildField = treeOpts.hasChild || treeOpts.hasChildField;\n                const { transform, lazy } = treeOpts;\n                const rowid = getRowid($xeTable, row);\n                if (lazy && row[hasChildField] && !treeExpandLazyLoadedMaps[rowid]) {\n                    return tableMethods.clearTreeExpandLoaded(row).then(() => {\n                        return handleAsyncTreeExpandChilds(row);\n                    }).then(() => {\n                        if (transform) {\n                            handleVirtualTreeToList();\n                            return tablePrivateMethods.handleTableData();\n                        }\n                    }).then(() => {\n                        return tableMethods.recalculate();\n                    });\n                }\n                return nextTick();\n            },\n            reloadTreeChilds(row) {\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['reloadTreeChilds', 'reloadTreeExpand']);\n                }\n                // 即将废弃\n                return tableMethods.reloadTreeExpand(row);\n            },\n            /**\n             * 切换/展开树节点\n             */\n            toggleTreeExpand(row) {\n                return tableMethods.setTreeExpand(row, !tableMethods.isTreeExpandByRow(row));\n            },\n            /**\n             * 设置所有树节点的展开与否\n             * @param {Boolean} expanded 是否展开\n             */\n            setAllTreeExpand(expanded) {\n                const { tableFullData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { transform, lazy } = treeOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const expandeds = [];\n                XEUtils.eachTree(tableFullData, (row) => {\n                    const rowChildren = row[childrenField];\n                    if (lazy || (rowChildren && rowChildren.length)) {\n                        expandeds.push(row);\n                    }\n                }, { children: childrenField });\n                return tableMethods.setTreeExpand(expandeds, expanded).then(() => {\n                    if (transform) {\n                        handleVirtualTreeToList();\n                        return tableMethods.recalculate();\n                    }\n                });\n            },\n            /**\n             * 设置展开树形节点，二个参数设置这一行展开与否\n             * 支持单行\n             * 支持多行\n             * @param {Array/Row} rows 行数据\n             * @param {Boolean} expanded 是否展开\n             */\n            setTreeExpand(rows, expanded) {\n                const treeOpts = computeTreeOpts.value;\n                const { transform } = treeOpts;\n                if (rows) {\n                    if (!XEUtils.isArray(rows)) {\n                        rows = [rows];\n                    }\n                    if (rows.length) {\n                        // 如果为虚拟树\n                        if (transform) {\n                            return handleVirtualTreeExpand(rows, expanded);\n                        }\n                        else {\n                            return handleBaseTreeExpand(rows, expanded);\n                        }\n                    }\n                }\n                return nextTick();\n            },\n            /**\n             * 判断行是否为树形节点展开状态\n             * @param {Row} row 行对象\n             */\n            isTreeExpandByRow(row) {\n                const { treeExpandedFlag } = reactData;\n                const { treeExpandedMaps } = internalData;\n                return !!treeExpandedFlag && !!treeExpandedMaps[getRowid($xeTable, row)];\n            },\n            /**\n             * 手动清空树形节点的展开状态，数据会恢复成未展开的状态\n             */\n            clearTreeExpand() {\n                const { tableFullTreeData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const { transform, reserve } = treeOpts;\n                const expList = $xeTable.getTreeExpandRecords();\n                internalData.treeExpandedMaps = {};\n                reactData.treeExpandedFlag++;\n                if (reserve) {\n                    XEUtils.eachTree(tableFullTreeData, row => handleTreeExpandReserve(row, false), { children: childrenField });\n                }\n                return $xeTable.handleTableData().then(() => {\n                    if (transform) {\n                        handleVirtualTreeToList();\n                        return $xeTable.handleTableData();\n                    }\n                }).then(() => {\n                    if (expList.length) {\n                        return $xeTable.recalculate();\n                    }\n                });\n            },\n            clearTreeExpandReserve() {\n                internalData.treeExpandedReserveRowMap = {};\n                return nextTick();\n            },\n            /**\n             * 获取表格的滚动状态\n             */\n            getScroll() {\n                const { scrollXLoad, scrollYLoad } = reactData;\n                const { elemStore } = internalData;\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                return {\n                    virtualX: scrollXLoad,\n                    virtualY: scrollYLoad,\n                    scrollTop: bodyScrollElem ? bodyScrollElem.scrollTop : 0,\n                    scrollLeft: bodyScrollElem ? bodyScrollElem.scrollLeft : 0\n                };\n            },\n            /**\n             * 如果有滚动条，则滚动到对应的位置\n             * @param {Number} scrollLeft 左距离\n             * @param {Number} scrollTop 上距离\n             */\n            scrollTo(scrollLeft, scrollTop) {\n                const { elemStore } = internalData;\n                const headerScrollElem = getRefElem(elemStore['main-header-scroll']);\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                const footerScrollElem = getRefElem(elemStore['main-footer-scroll']);\n                const leftScrollElem = getRefElem(elemStore['left-body-scroll']);\n                const rightScrollElem = getRefElem(elemStore['right-body-scroll']);\n                const xHandleEl = refScrollXHandleElem.value;\n                const yHandleEl = refScrollYHandleElem.value;\n                internalData.intoRunScroll = true;\n                if (XEUtils.isNumber(scrollLeft)) {\n                    setScrollLeft(xHandleEl, scrollLeft);\n                    setScrollLeft(bodyScrollElem, scrollLeft);\n                    setScrollLeft(headerScrollElem, scrollLeft);\n                    setScrollLeft(footerScrollElem, scrollLeft);\n                }\n                if (XEUtils.isNumber(scrollTop)) {\n                    setScrollTop(yHandleEl, scrollTop);\n                    setScrollTop(bodyScrollElem, scrollTop);\n                    setScrollTop(leftScrollElem, scrollTop);\n                    setScrollTop(rightScrollElem, scrollTop);\n                }\n                if (reactData.scrollXLoad || reactData.scrollYLoad) {\n                    return new Promise(resolve => {\n                        setTimeout(() => {\n                            nextTick(() => {\n                                internalData.intoRunScroll = false;\n                                resolve();\n                            });\n                        }, 30);\n                    });\n                }\n                return nextTick();\n            },\n            /**\n             * 如果有滚动条，则滚动到对应的行\n             * @param {Row} row 行对象\n             * @param {ColumnInfo} fieldOrColumn 列配置\n             */\n            scrollToRow(row, fieldOrColumn) {\n                const { isAllOverflow, scrollYLoad, scrollXLoad } = reactData;\n                const rest = [];\n                if (row) {\n                    if (props.treeConfig) {\n                        rest.push(tablePrivateMethods.scrollToTreeRow(row));\n                    }\n                    else {\n                        rest.push(rowToVisible($xeTable, row));\n                    }\n                }\n                if (fieldOrColumn) {\n                    rest.push(handleScrollToRowColumn(fieldOrColumn, row));\n                }\n                return Promise.all(rest).then(() => {\n                    if (row) {\n                        if (!isAllOverflow && (scrollYLoad || scrollXLoad)) {\n                            calcCellHeight();\n                            calcCellWidth();\n                        }\n                        return nextTick();\n                    }\n                });\n            },\n            /**\n             * 如果有滚动条，则滚动到对应的列\n             */\n            scrollToColumn(fieldOrColumn) {\n                const { fullColumnIdData } = internalData;\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column && fullColumnIdData[column.id]) {\n                    return colToVisible($xeTable, column);\n                }\n                return nextTick();\n            },\n            /**\n             * 手动清除滚动相关信息，还原到初始状态\n             */\n            clearScroll() {\n                const { elemStore, scrollXStore, scrollYStore } = internalData;\n                const headerScrollElem = getRefElem(elemStore['main-header-scroll']);\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                const footerScrollElem = getRefElem(elemStore['main-footer-scroll']);\n                const leftScrollElem = getRefElem(elemStore['left-body-scroll']);\n                const rightScrollElem = getRefElem(elemStore['right-body-scroll']);\n                const xHandleEl = refScrollXHandleElem.value;\n                const yHandleEl = refScrollYHandleElem.value;\n                internalData.intoRunScroll = true;\n                setScrollLeft(xHandleEl, 0);\n                setScrollLeft(bodyScrollElem, 0);\n                setScrollLeft(headerScrollElem, 0);\n                setScrollLeft(footerScrollElem, 0);\n                setScrollTop(yHandleEl, 0);\n                setScrollTop(bodyScrollElem, 0);\n                setScrollTop(leftScrollElem, 0);\n                setScrollTop(rightScrollElem, 0);\n                scrollXStore.startIndex = 0;\n                scrollXStore.visibleStartIndex = 0;\n                scrollXStore.endIndex = scrollXStore.visibleSize;\n                scrollXStore.visibleEndIndex = scrollXStore.visibleSize;\n                scrollYStore.startIndex = 0;\n                scrollYStore.visibleStartIndex = 0;\n                scrollYStore.endIndex = scrollYStore.visibleSize;\n                scrollYStore.visibleEndIndex = scrollYStore.visibleSize;\n                return nextTick().then(() => {\n                    internalData.intoRunScroll = false;\n                });\n            },\n            /**\n             * 更新表尾合计\n             */\n            updateFooter() {\n                const { showFooter, footerData, footerMethod } = props;\n                const { visibleColumn, afterFullData } = internalData;\n                let footData = [];\n                if (showFooter && footerData && footerData.length) {\n                    footData = footerData.slice(0);\n                }\n                else if (showFooter && footerMethod) {\n                    footData = visibleColumn.length ? footerMethod({ columns: visibleColumn, data: afterFullData, $table: $xeTable, $grid: $xeGrid }) : [];\n                }\n                reactData.footerTableData = footData;\n                return nextTick();\n            },\n            /**\n             * 更新列状态 updateStatus({ row, column }, cellValue)\n             * 如果组件值 v-model 发生 change 时，调用改函数用于更新某一列编辑状态\n             * 如果单元格配置了校验规则，则会进行校验\n             */\n            updateStatus(slotParams, cellValue) {\n                return nextTick().then(() => {\n                    const { editRules } = props;\n                    if (slotParams && editRules) {\n                        return $xeTable.handleCellRuleUpdateStatus('change', slotParams, cellValue);\n                    }\n                });\n            },\n            /**\n             * 设置合并单元格\n             * @param {TableMergeConfig[]} merges { row: Row|number, column: ColumnInfo|number, rowspan: number, colspan: number }\n             */\n            setMergeCells(merges) {\n                if (props.spanMethod) {\n                    errLog('vxe.error.errConflicts', ['merge-cells', 'span-method']);\n                }\n                setMerges(merges, reactData.mergeList, internalData.afterFullData);\n                return nextTick().then(() => {\n                    tableMethods.updateCellAreas();\n                    return updateStyle();\n                });\n            },\n            /**\n             * 移除单元格合并\n             * @param {TableMergeConfig[]} merges 多个或数组 [{row:Row|number, col:ColumnInfo|number}]\n             */\n            removeMergeCells(merges) {\n                if (props.spanMethod) {\n                    errLog('vxe.error.errConflicts', ['merge-cells', 'span-method']);\n                }\n                const rest = removeMerges(merges, reactData.mergeList, internalData.afterFullData);\n                return nextTick().then(() => {\n                    tableMethods.updateCellAreas();\n                    updateStyle();\n                    return rest;\n                });\n            },\n            /**\n             * 获取所有被合并的单元格\n             */\n            getMergeCells() {\n                return reactData.mergeList.slice(0);\n            },\n            /**\n             * 清除所有单元格合并\n             */\n            clearMergeCells() {\n                reactData.mergeList = [];\n                return nextTick().then(() => {\n                    return updateStyle();\n                });\n            },\n            setMergeFooterItems(merges) {\n                if (props.footerSpanMethod) {\n                    errLog('vxe.error.errConflicts', ['merge-footer-items', 'footer-span-method']);\n                }\n                setMerges(merges, reactData.mergeFooterList);\n                return nextTick().then(() => {\n                    tableMethods.updateCellAreas();\n                    return updateStyle();\n                });\n            },\n            removeMergeFooterItems(merges) {\n                if (props.footerSpanMethod) {\n                    errLog('vxe.error.errConflicts', ['merge-footer-items', 'footer-span-method']);\n                }\n                const rest = removeMerges(merges, reactData.mergeFooterList);\n                return nextTick().then(() => {\n                    tableMethods.updateCellAreas();\n                    updateStyle();\n                    return rest;\n                });\n            },\n            /**\n             * 获取所有被合并的表尾\n             */\n            getMergeFooterItems() {\n                return reactData.mergeFooterList.slice(0);\n            },\n            /**\n             * 清除所有表尾合并\n             */\n            clearMergeFooterItems() {\n                reactData.mergeFooterList = [];\n                return nextTick().then(() => {\n                    return updateStyle();\n                });\n            },\n            updateCellAreas() {\n                const { mouseConfig } = props;\n                const mouseOpts = computeMouseOpts.value;\n                if (mouseConfig && mouseOpts.area && $xeTable.handleRecalculateCellAreaEvent) {\n                    return $xeTable.handleRecalculateCellAreaEvent();\n                }\n                return nextTick();\n            },\n            getCustomStoreData() {\n                const { id } = props;\n                const customOpts = computeCustomOpts.value;\n                const { collectColumn } = internalData;\n                const { storage, checkMethod } = customOpts;\n                const isAllCustom = storage === true;\n                const storageOpts = isAllCustom ? {} : Object.assign({}, storage || {});\n                const isCustomResizable = isAllCustom || storageOpts.resizable;\n                const isCustomVisible = isAllCustom || storageOpts.visible;\n                const isCustomFixed = isAllCustom || storageOpts.fixed;\n                const isCustomSort = isAllCustom || storageOpts.sort;\n                const resizableData = {};\n                const sortData = {};\n                const visibleData = {};\n                const fixedData = {};\n                const storeData = {\n                    resizableData: undefined,\n                    sortData: undefined,\n                    visibleData: undefined,\n                    fixedData: undefined\n                };\n                if (!id) {\n                    errLog('vxe.error.reqProp', ['id']);\n                    return storeData;\n                }\n                let hasResizable = 0;\n                let hasSort = 0;\n                let hasFixed = 0;\n                let hasVisible = 0;\n                XEUtils.eachTree(collectColumn, (column, index, items, path, parentColumn) => {\n                    const colKey = column.getKey();\n                    if (!colKey) {\n                        errLog('vxe.error.reqProp', [`${column.getTitle() || column.type || ''} -> column.field=?`]);\n                        return;\n                    }\n                    // 只支持一级\n                    if (!parentColumn) {\n                        if (isCustomSort) {\n                            hasSort = 1;\n                            sortData[colKey] = column.renderSortNumber;\n                        }\n                        if (isCustomFixed && column.fixed !== column.defaultFixed) {\n                            hasFixed = 1;\n                            fixedData[colKey] = column.fixed;\n                        }\n                    }\n                    if (isCustomResizable && column.resizeWidth) {\n                        hasResizable = 1;\n                        resizableData[colKey] = column.renderWidth;\n                    }\n                    if (isCustomVisible && (!checkMethod || checkMethod({ column }))) {\n                        if (!column.visible && column.defaultVisible) {\n                            hasVisible = 1;\n                            visibleData[colKey] = false;\n                        }\n                        else if (column.visible && !column.defaultVisible) {\n                            hasVisible = 1;\n                            visibleData[colKey] = true;\n                        }\n                    }\n                });\n                if (hasResizable) {\n                    storeData.resizableData = resizableData;\n                }\n                if (hasSort) {\n                    storeData.sortData = sortData;\n                }\n                if (hasFixed) {\n                    storeData.fixedData = fixedData;\n                }\n                if (hasVisible) {\n                    storeData.visibleData = visibleData;\n                }\n                return storeData;\n            },\n            focus() {\n                internalData.isActivated = true;\n                return nextTick();\n            },\n            blur() {\n                internalData.isActivated = false;\n                return nextTick();\n            },\n            /**\n             * 连接工具栏\n             * @param $toolbar\n             */\n            connect($toolbar) {\n                if ($toolbar) {\n                    $xeToolbar = $toolbar;\n                    $xeToolbar.syncUpdate({ collectColumn: internalData.collectColumn, $table: $xeTable });\n                }\n                else {\n                    errLog('vxe.error.barUnableLink');\n                }\n                return nextTick();\n            }\n        };\n        /**\n         * 全局按下事件处理\n         */\n        const handleGlobalMousedownEvent = (evnt) => {\n            const { editStore, ctxMenuStore, filterStore, customStore } = reactData;\n            const { mouseConfig, editRules } = props;\n            const el = refElem.value;\n            const editOpts = computeEditOpts.value;\n            const validOpts = computeValidOpts.value;\n            const areaOpts = computeAreaOpts.value;\n            const { actived } = editStore;\n            const $validTooltip = refValidTooltip.value;\n            const tableFilter = refTableFilter.value;\n            const tableCustom = refTableCustom.value;\n            const tableMenu = refTableMenu.value;\n            // 筛选\n            if (tableFilter) {\n                if (getEventTargetNode(evnt, el, 'vxe-cell--filter').flag) {\n                    // 如果点击了筛选按钮\n                }\n                else if (getEventTargetNode(evnt, tableFilter.$el).flag) {\n                    // 如果点击筛选容器\n                }\n                else {\n                    if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-clear').flag) {\n                        tablePrivateMethods.preventEvent(evnt, 'event.clearFilter', filterStore.args, tableMethods.closeFilter);\n                    }\n                }\n            }\n            // 自定义列\n            if (tableCustom) {\n                if (customStore.btnEl === evnt.target || getEventTargetNode(evnt, document.body, 'vxe-toolbar-custom-target').flag) {\n                    // 如果点击了自定义列按钮\n                }\n                else if (getEventTargetNode(evnt, tableCustom.$el).flag) {\n                    // 如果点击自定义列容器\n                }\n                else {\n                    if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-clear').flag) {\n                        tablePrivateMethods.preventEvent(evnt, 'event.clearCustom', {}, () => {\n                            if ($xeTable.closeCustom) {\n                                $xeTable.closeCustom();\n                            }\n                        });\n                    }\n                }\n            }\n            // 如果已激活了编辑状态\n            if (actived.row) {\n                if (!(editOpts.autoClear === false)) {\n                    // 如果是激活状态，点击了单元格之外\n                    const cell = actived.args.cell;\n                    if ((!cell || !getEventTargetNode(evnt, cell).flag)) {\n                        if ($validTooltip && getEventTargetNode(evnt, $validTooltip.$el).flag) {\n                            // 如果是激活状态，且点击了校验提示框\n                        }\n                        else if (!internalData._lastCallTime || internalData._lastCallTime + 50 < Date.now()) {\n                            // 如果是激活状态，点击了单元格之外\n                            if (!getEventTargetNode(evnt, document.body, 'vxe-table--ignore-clear').flag) {\n                                // 如果手动调用了激活单元格，避免触发源被移除后导致重复关闭\n                                tablePrivateMethods.preventEvent(evnt, 'event.clearEdit', actived.args, () => {\n                                    let isClear;\n                                    if (editOpts.mode === 'row') {\n                                        const rowTargetNode = getEventTargetNode(evnt, el, 'vxe-body--row');\n                                        const rowNodeRest = rowTargetNode.flag ? tableMethods.getRowNode(rowTargetNode.targetElem) : null;\n                                        // row 方式，如果点击了不同行\n                                        isClear = rowNodeRest ? !$xeTable.eqRow(rowNodeRest.item, actived.args.row) : false;\n                                    }\n                                    else {\n                                        // cell 方式，如果是非编辑列\n                                        isClear = !getEventTargetNode(evnt, el, 'col--edit').flag;\n                                    }\n                                    // 如果点击表头行，则清除激活状态\n                                    if (!isClear) {\n                                        isClear = getEventTargetNode(evnt, el, 'vxe-header--row').flag;\n                                    }\n                                    // 如果点击表尾行，则清除激活状态\n                                    if (!isClear) {\n                                        isClear = getEventTargetNode(evnt, el, 'vxe-footer--row').flag;\n                                    }\n                                    // 如果固定了高度且点击了行之外的空白处，则清除激活状态\n                                    if (!isClear && props.height && !reactData.overflowY) {\n                                        const bodyWrapperElem = evnt.target;\n                                        if (hasClass(bodyWrapperElem, 'vxe-table--body-wrapper')) {\n                                            isClear = evnt.offsetY < bodyWrapperElem.clientHeight;\n                                        }\n                                    }\n                                    if (isClear ||\n                                        // 如果点击了当前表格之外\n                                        !getEventTargetNode(evnt, el).flag) {\n                                        setTimeout(() => {\n                                            $xeTable.handleClearEdit(evnt).then(() => {\n                                                // 如果存在校验，点击了表格之外则清除\n                                                if (!internalData.isActivated && editRules && validOpts.autoClear) {\n                                                    reactData.validErrorMaps = {};\n                                                }\n                                            });\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n            else if (mouseConfig) {\n                if (!getEventTargetNode(evnt, el).flag && !($xeGrid && getEventTargetNode(evnt, $xeGrid.getRefMaps().refElem.value).flag) && !(tableMenu && getEventTargetNode(evnt, tableMenu.getRefMaps().refElem.value).flag) && !($xeToolbar && getEventTargetNode(evnt, $xeToolbar.getRefMaps().refElem.value).flag)) {\n                    if ($xeTable.clearSelected) {\n                        $xeTable.clearSelected();\n                    }\n                    if (areaOpts.autoClear) {\n                        if ($xeTable.getCellAreas) {\n                            const cellAreas = $xeTable.getCellAreas();\n                            if (cellAreas && cellAreas.length && !getEventTargetNode(evnt, document.body, 'vxe-table--ignore-areas-clear').flag) {\n                                tablePrivateMethods.preventEvent(evnt, 'event.clearAreas', {}, () => {\n                                    $xeTable.clearCellAreas();\n                                    $xeTable.clearCopyCellArea();\n                                    dispatchEvent('clear-cell-area-selection', { cellAreas }, evnt);\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n            // 如果配置了快捷菜单且，点击了其他地方则关闭\n            if ($xeTable.closeMenu) {\n                if (ctxMenuStore.visible && tableMenu && !getEventTargetNode(evnt, tableMenu.getRefMaps().refElem.value).flag) {\n                    $xeTable.closeMenu();\n                }\n            }\n            const isActivated = getEventTargetNode(evnt, $xeGrid ? $xeGrid.getRefMaps().refElem.value : el).flag;\n            // 如果存在校验，点击了表格之外则清除\n            if (!isActivated && editRules && validOpts.autoClear) {\n                reactData.validErrorMaps = {};\n            }\n            // 最后激活的表格\n            internalData.isActivated = isActivated;\n        };\n        /**\n         * 窗口失焦事件处理\n         */\n        const handleGlobalBlurEvent = () => {\n            tableMethods.closeFilter();\n            if ($xeTable.closeMenu) {\n                $xeTable.closeMenu();\n            }\n        };\n        /**\n         * 全局滚动事件\n         */\n        const handleGlobalMousewheelEvent = () => {\n            tableMethods.closeTooltip();\n            if ($xeTable.closeMenu) {\n                $xeTable.closeMenu();\n            }\n        };\n        /**\n         * 表格键盘事件\n         */\n        const keydownEvent = (evnt) => {\n            const { mouseConfig, keyboardConfig } = props;\n            const { filterStore, ctxMenuStore, editStore } = reactData;\n            const mouseOpts = computeMouseOpts.value;\n            const keyboardOpts = computeKeyboardOpts.value;\n            const { actived } = editStore;\n            const isEsc = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ESCAPE);\n            if (isEsc) {\n                tablePrivateMethods.preventEvent(evnt, 'event.keydown', null, () => {\n                    dispatchEvent('keydown-start', {}, evnt);\n                    if (keyboardConfig && mouseConfig && mouseOpts.area && $xeTable.handleKeyboardCellAreaEvent) {\n                        $xeTable.handleKeyboardCellAreaEvent(evnt);\n                    }\n                    else if (actived.row || filterStore.visible || ctxMenuStore.visible) {\n                        evnt.stopPropagation();\n                        // 如果按下了 Esc 键，关闭快捷菜单、筛选\n                        if ($xeTable.closeMenu) {\n                            $xeTable.closeMenu();\n                        }\n                        tableMethods.closeFilter();\n                        if (keyboardConfig && keyboardOpts.isEsc) {\n                            // 如果是激活编辑状态，则取消编辑\n                            if (actived.row) {\n                                const params = actived.args;\n                                $xeTable.handleClearEdit(evnt);\n                                // 如果配置了选中功能，则为选中状态\n                                if (mouseOpts.selected) {\n                                    nextTick(() => $xeTable.handleSelected(params, evnt));\n                                }\n                            }\n                        }\n                    }\n                    dispatchEvent('keydown', {}, evnt);\n                    dispatchEvent('keydown-end', {}, evnt);\n                });\n            }\n        };\n        /**\n         * 全局键盘事件\n         */\n        const handleGlobalKeydownEvent = (evnt) => {\n            // 该行为只对当前激活的表格有效\n            if (internalData.isActivated) {\n                tablePrivateMethods.preventEvent(evnt, 'event.keydown', null, () => {\n                    const { mouseConfig, keyboardConfig, treeConfig, editConfig, highlightCurrentRow } = props;\n                    const { ctxMenuStore, editStore, currentRow } = reactData;\n                    const { afterFullData } = internalData;\n                    const isMenu = computeIsMenu.value;\n                    const bodyMenu = computeBodyMenu.value;\n                    const keyboardOpts = computeKeyboardOpts.value;\n                    const mouseOpts = computeMouseOpts.value;\n                    const editOpts = computeEditOpts.value;\n                    const treeOpts = computeTreeOpts.value;\n                    const menuList = computeMenuList.value;\n                    const rowOpts = computeRowOpts.value;\n                    const { selected, actived } = editStore;\n                    const childrenField = treeOpts.children || treeOpts.childrenField;\n                    const keyCode = evnt.keyCode;\n                    const isEsc = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ESCAPE);\n                    const hasBackspaceKey = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.BACKSPACE);\n                    const isTab = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.TAB);\n                    const isEnter = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ENTER);\n                    const isSpacebar = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.SPACEBAR);\n                    const isLeftArrow = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ARROW_LEFT);\n                    const isUpArrow = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ARROW_UP);\n                    const isRightArrow = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ARROW_RIGHT);\n                    const isDwArrow = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ARROW_DOWN);\n                    const hasDeleteKey = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.DELETE);\n                    const isF2 = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.F2);\n                    const isContextMenu = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.CONTEXT_MENU);\n                    const hasMetaKey = evnt.metaKey;\n                    const hasCtrlKey = evnt.ctrlKey;\n                    const hasShiftKey = evnt.shiftKey;\n                    const isAltKey = evnt.altKey;\n                    const operArrow = isLeftArrow || isUpArrow || isRightArrow || isDwArrow;\n                    const operCtxMenu = isMenu && ctxMenuStore.visible && (isEnter || isSpacebar || operArrow);\n                    const isEditStatus = isEnableConf(editConfig) && actived.column && actived.row;\n                    const beforeEditMethod = editOpts.beforeEditMethod || editOpts.activeMethod;\n                    if (operCtxMenu) {\n                        // 如果配置了右键菜单; 支持方向键操作、回车\n                        evnt.preventDefault();\n                        if (ctxMenuStore.showChild && hasChildrenList(ctxMenuStore.selected)) {\n                            $xeTable.moveCtxMenu(evnt, ctxMenuStore, 'selectChild', isLeftArrow, false, ctxMenuStore.selected.children);\n                        }\n                        else {\n                            $xeTable.moveCtxMenu(evnt, ctxMenuStore, 'selected', isRightArrow, true, menuList);\n                        }\n                    }\n                    else if (keyboardConfig && mouseConfig && mouseOpts.area && $xeTable.handleKeyboardCellAreaEvent) {\n                        $xeTable.handleKeyboardCellAreaEvent(evnt);\n                    }\n                    else if (isEsc) {\n                        // 如果按下了 Esc 键，关闭快捷菜单、筛选\n                        if ($xeTable.closeMenu) {\n                            $xeTable.closeMenu();\n                        }\n                        tableMethods.closeFilter();\n                        if (keyboardConfig && keyboardOpts.isEsc) {\n                            // 如果是激活编辑状态，则取消编辑\n                            if (actived.row) {\n                                const params = actived.args;\n                                $xeTable.handleClearEdit(evnt);\n                                // 如果配置了选中功能，则为选中状态\n                                if (mouseOpts.selected) {\n                                    nextTick(() => $xeTable.handleSelected(params, evnt));\n                                }\n                            }\n                        }\n                    }\n                    else if (isSpacebar && keyboardConfig && keyboardOpts.isChecked && selected.row && selected.column && (selected.column.type === 'checkbox' || selected.column.type === 'radio')) {\n                        // 空格键支持选中复选框\n                        evnt.preventDefault();\n                        if (selected.column.type === 'checkbox') {\n                            tablePrivateMethods.handleToggleCheckRowEvent(evnt, selected.args);\n                        }\n                        else {\n                            tablePrivateMethods.triggerRadioRowEvent(evnt, selected.args);\n                        }\n                    }\n                    else if (isF2 && isEnableConf(editConfig)) {\n                        if (!isEditStatus) {\n                            // 如果按下了 F2 键\n                            if (selected.row && selected.column) {\n                                evnt.preventDefault();\n                                $xeTable.handleEdit(selected.args, evnt);\n                            }\n                        }\n                    }\n                    else if (isContextMenu) {\n                        // 如果按下上下文键\n                        internalData._keyCtx = selected.row && selected.column && bodyMenu.length;\n                        clearTimeout(internalData.keyCtxTimeout);\n                        internalData.keyCtxTimeout = setTimeout(() => {\n                            internalData._keyCtx = false;\n                        }, 1000);\n                    }\n                    else if (isEnter && !isAltKey && keyboardConfig && keyboardOpts.isEnter && (selected.row || actived.row || (treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow))) {\n                        const { isLastEnterAppendRow, beforeEnterMethod, enterMethod } = keyboardOpts;\n                        // 退出选中\n                        if (hasCtrlKey) {\n                            // 如果是激活编辑状态，则取消编辑\n                            if (actived.row) {\n                                const params = actived.args;\n                                $xeTable.handleClearEdit(evnt);\n                                // 如果配置了选中功能，则为选中状态\n                                if (mouseOpts.selected) {\n                                    nextTick(() => {\n                                        $xeTable.handleSelected(params, evnt);\n                                    });\n                                }\n                            }\n                        }\n                        else {\n                            // 如果是激活状态，退则出到上一行/下一行\n                            if (selected.row || actived.row) {\n                                const activeParams = selected.row ? selected.args : actived.args;\n                                if (hasShiftKey) {\n                                    if (keyboardOpts.enterToTab) {\n                                        $xeTable.moveTabSelected(activeParams, hasShiftKey, evnt);\n                                    }\n                                    else {\n                                        $xeTable.moveEnterSelected(activeParams, isLeftArrow, true, isRightArrow, false, evnt);\n                                    }\n                                }\n                                else {\n                                    if (keyboardOpts.enterToTab) {\n                                        $xeTable.moveTabSelected(activeParams, hasShiftKey, evnt);\n                                    }\n                                    else {\n                                        const activeRow = selected.row || actived.row;\n                                        const activeColumn = selected.column || actived.column;\n                                        const _rowIndex = $xeTable.getVTRowIndex(activeRow);\n                                        const etrParams = {\n                                            row: activeRow,\n                                            rowIndex: $xeTable.getRowIndex(activeRow),\n                                            $rowIndex: $xeTable.getVMRowIndex(activeRow),\n                                            _rowIndex,\n                                            column: activeColumn,\n                                            columnIndex: $xeTable.getColumnIndex(activeColumn),\n                                            $columnIndex: $xeTable.getVMColumnIndex(activeColumn),\n                                            _columnIndex: $xeTable.getVTColumnIndex(activeColumn),\n                                            $table: $xeTable\n                                        };\n                                        if (!beforeEnterMethod || beforeEnterMethod(etrParams) !== false) {\n                                            // 最后一行按下回车键，自动追加一行\n                                            if (isLastEnterAppendRow) {\n                                                if (_rowIndex >= afterFullData.length - 1) {\n                                                    $xeTable.insertAt({}, -1).then(({ row: newRow }) => {\n                                                        $xeTable.scrollToRow(newRow, activeColumn);\n                                                        $xeTable.handleSelected(Object.assign(Object.assign({}, activeParams), { row: newRow }), evnt);\n                                                    });\n                                                    $xeTable.dispatchEvent('enter-append-row', etrParams, evnt);\n                                                    return;\n                                                }\n                                            }\n                                            $xeTable.moveEnterSelected(activeParams, isLeftArrow, false, isRightArrow, true, evnt);\n                                            if (enterMethod) {\n                                                enterMethod(etrParams);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else if (treeConfig && (rowOpts.isCurrent || highlightCurrentRow) && currentRow) {\n                                // 如果是树形表格当前行回车移动到子节点\n                                const childrens = currentRow[childrenField];\n                                if (childrens && childrens.length) {\n                                    evnt.preventDefault();\n                                    const targetRow = childrens[0];\n                                    const params = {\n                                        $table: $xeTable,\n                                        row: targetRow,\n                                        rowIndex: tableMethods.getRowIndex(targetRow),\n                                        $rowIndex: tableMethods.getVMRowIndex(targetRow)\n                                    };\n                                    tableMethods.setTreeExpand(currentRow, true)\n                                        .then(() => tableMethods.scrollToRow(targetRow))\n                                        .then(() => tablePrivateMethods.triggerCurrentRowEvent(evnt, params));\n                                }\n                            }\n                        }\n                    }\n                    else if (operArrow && keyboardConfig && keyboardOpts.isArrow) {\n                        if (!isEditStatus) {\n                            // 如果按下了方向键\n                            if (selected.row && selected.column) {\n                                $xeTable.moveArrowSelected(selected.args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt);\n                            }\n                        }\n                    }\n                    else if (isTab && keyboardConfig && keyboardOpts.isTab) {\n                        // 如果按下了 Tab 键切换\n                        if (selected.row || selected.column) {\n                            $xeTable.moveTabSelected(selected.args, hasShiftKey, evnt);\n                        }\n                        else if (actived.row || actived.column) {\n                            $xeTable.moveTabSelected(actived.args, hasShiftKey, evnt);\n                        }\n                    }\n                    else if (keyboardConfig && keyboardOpts.isDel && hasDeleteKey && isEnableConf(editConfig) && (selected.row || selected.column)) {\n                        // 如果是删除键\n                        if (!isEditStatus) {\n                            const { delMethod } = keyboardOpts;\n                            const params = {\n                                row: selected.row,\n                                rowIndex: tableMethods.getRowIndex(selected.row),\n                                column: selected.column,\n                                columnIndex: tableMethods.getColumnIndex(selected.column),\n                                $table: $xeTable,\n                                $grid: $xeGrid\n                            };\n                            // 是否被禁用\n                            if (!beforeEditMethod || beforeEditMethod(params)) {\n                                if (delMethod) {\n                                    delMethod(params);\n                                }\n                                else {\n                                    setCellValue(selected.row, selected.column, null);\n                                }\n                                // 如果按下 del 键，更新表尾数据\n                                tableMethods.updateFooter();\n                                dispatchEvent('cell-delete-value', params, evnt);\n                            }\n                        }\n                    }\n                    else if (hasBackspaceKey && keyboardConfig && keyboardOpts.isBack && isEnableConf(editConfig) && (selected.row || selected.column)) {\n                        if (!isEditStatus) {\n                            const { backMethod } = keyboardOpts;\n                            // 如果是删除键\n                            if (keyboardOpts.isDel && isEnableConf(editConfig) && (selected.row || selected.column)) {\n                                const params = {\n                                    row: selected.row,\n                                    rowIndex: tableMethods.getRowIndex(selected.row),\n                                    column: selected.column,\n                                    columnIndex: tableMethods.getColumnIndex(selected.column),\n                                    $table: $xeTable,\n                                    $grid: $xeGrid\n                                };\n                                // 是否被禁用\n                                if (!beforeEditMethod || beforeEditMethod(params)) {\n                                    if (backMethod) {\n                                        backMethod(params);\n                                    }\n                                    else {\n                                        setCellValue(selected.row, selected.column, null);\n                                        $xeTable.handleEdit(selected.args, evnt);\n                                    }\n                                    dispatchEvent('cell-backspace-value', params, evnt);\n                                }\n                            }\n                        }\n                    }\n                    else if (hasBackspaceKey && keyboardConfig && treeConfig && keyboardOpts.isBack && (rowOpts.isCurrent || highlightCurrentRow) && currentRow) {\n                        // 如果树形表格回退键关闭当前行返回父节点\n                        const { parent: parentRow } = XEUtils.findTree(internalData.afterTreeFullData, item => item === currentRow, { children: childrenField });\n                        if (parentRow) {\n                            evnt.preventDefault();\n                            const params = {\n                                row: parentRow,\n                                rowIndex: tableMethods.getRowIndex(parentRow),\n                                $rowIndex: tableMethods.getVMRowIndex(parentRow),\n                                $table: $xeTable,\n                                $grid: $xeGrid\n                            };\n                            tableMethods.setTreeExpand(parentRow, false)\n                                .then(() => tableMethods.scrollToRow(parentRow))\n                                .then(() => tablePrivateMethods.triggerCurrentRowEvent(evnt, params));\n                        }\n                    }\n                    else if (keyboardConfig && isEnableConf(editConfig) && keyboardOpts.isEdit && !hasCtrlKey && !hasMetaKey && (isSpacebar || (keyCode >= 48 && keyCode <= 57) || (keyCode >= 65 && keyCode <= 90) || (keyCode >= 96 && keyCode <= 111) || (keyCode >= 186 && keyCode <= 192) || (keyCode >= 219 && keyCode <= 222))) {\n                        const { editMode, editMethod } = keyboardOpts;\n                        // 启用编辑后，空格键功能将失效\n                        // if (isSpacebar) {\n                        //   evnt.preventDefault()\n                        // }\n                        // 如果是按下非功能键之外允许直接编辑\n                        if (selected.column && selected.row && isEnableConf(selected.column.editRender)) {\n                            const beforeEditMethod = editOpts.beforeEditMethod || editOpts.activeMethod;\n                            const params = {\n                                row: selected.row,\n                                rowIndex: tableMethods.getRowIndex(selected.row),\n                                column: selected.column,\n                                columnIndex: tableMethods.getColumnIndex(selected.column),\n                                $table: $xeTable,\n                                $grid: $xeGrid\n                            };\n                            if (!beforeEditMethod || beforeEditMethod(Object.assign(Object.assign({}, selected.args), { $table: $xeTable, $grid: $xeGrid }))) {\n                                if (editMethod) {\n                                    editMethod(params);\n                                }\n                                else {\n                                    // 追加方式与覆盖式\n                                    if (editMode !== 'insert') {\n                                        setCellValue(selected.row, selected.column, null);\n                                    }\n                                    $xeTable.handleEdit(selected.args, evnt);\n                                }\n                            }\n                        }\n                    }\n                    dispatchEvent('keydown', {}, evnt);\n                });\n            }\n        };\n        const handleGlobalPasteEvent = (evnt) => {\n            const { keyboardConfig, mouseConfig } = props;\n            const { editStore, filterStore } = reactData;\n            const { isActivated } = internalData;\n            const mouseOpts = computeMouseOpts.value;\n            const keyboardOpts = computeKeyboardOpts.value;\n            const { actived } = editStore;\n            if (isActivated && !filterStore.visible) {\n                if (!(actived.row || actived.column)) {\n                    if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && $xeTable.handlePasteCellAreaEvent) {\n                        $xeTable.handlePasteCellAreaEvent(evnt);\n                    }\n                }\n                dispatchEvent('paste', {}, evnt);\n            }\n        };\n        const handleGlobalCopyEvent = (evnt) => {\n            const { keyboardConfig, mouseConfig } = props;\n            const { editStore, filterStore } = reactData;\n            const { isActivated } = internalData;\n            const mouseOpts = computeMouseOpts.value;\n            const keyboardOpts = computeKeyboardOpts.value;\n            const { actived } = editStore;\n            if (isActivated && !filterStore.visible) {\n                if (!(actived.row || actived.column)) {\n                    if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && $xeTable.handleCopyCellAreaEvent) {\n                        $xeTable.handleCopyCellAreaEvent(evnt);\n                    }\n                }\n                dispatchEvent('copy', {}, evnt);\n            }\n        };\n        const handleGlobalCutEvent = (evnt) => {\n            const { keyboardConfig, mouseConfig } = props;\n            const { editStore, filterStore } = reactData;\n            const { isActivated } = internalData;\n            const mouseOpts = computeMouseOpts.value;\n            const keyboardOpts = computeKeyboardOpts.value;\n            const { actived } = editStore;\n            if (isActivated && !filterStore.visible) {\n                if (!(actived.row || actived.column)) {\n                    if (keyboardConfig && keyboardOpts.isClip && mouseConfig && mouseOpts.area && $xeTable.handleCutCellAreaEvent) {\n                        $xeTable.handleCutCellAreaEvent(evnt);\n                    }\n                }\n                dispatchEvent('cut', {}, evnt);\n            }\n        };\n        const handleGlobalResizeEvent = () => {\n            if ($xeTable.closeMenu) {\n                $xeTable.closeMenu();\n            }\n            const el = refElem.value;\n            if (!el || !el.clientWidth) {\n                return nextTick();\n            }\n            tableMethods.recalculate(true);\n            tableMethods.updateCellAreas();\n        };\n        const handleTargetEnterEvent = (isClear) => {\n            const $tooltip = refTooltip.value;\n            clearTimeout(internalData.tooltipTimeout);\n            if (isClear) {\n                tableMethods.closeTooltip();\n            }\n            else {\n                if ($tooltip && $tooltip.setActived) {\n                    $tooltip.setActived(true);\n                }\n            }\n        };\n        const clearDragStatus = () => {\n            const { dragRow, dragCol } = reactData;\n            if (dragRow || dragCol) {\n                clearColDropOrigin();\n                clearRowDropOrigin();\n                hideDropTip();\n                reactData.dragRow = null;\n                reactData.dragCol = null;\n                reactData.isDragColMove = false;\n                reactData.isDragRowMove = false;\n            }\n        };\n        const clearRowDropOrigin = () => {\n            const el = refElem.value;\n            if (el) {\n                const clss = 'row--drag-origin';\n                XEUtils.arrayEach(el.querySelectorAll(`.${clss}`), (elem) => {\n                    elem.draggable = false;\n                    removeClass(elem, clss);\n                });\n            }\n        };\n        const updateRowDropOrigin = (row) => {\n            const el = refElem.value;\n            if (el) {\n                const clss = 'row--drag-origin';\n                const rowid = getRowid($xeTable, row);\n                XEUtils.arrayEach(el.querySelectorAll(`[rowid=\"${rowid}\"]`), (elem) => {\n                    addClass(elem, clss);\n                });\n            }\n        };\n        const updateRowDropTipContent = (tdEl) => {\n            const { dragConfig } = props;\n            const { dragRow } = reactData;\n            const rowDragOpts = computeRowDragOpts.value;\n            const { tooltipMethod } = rowDragOpts;\n            const rTooltipMethod = tooltipMethod || (dragConfig ? dragConfig.rowTooltipMethod : null);\n            let tipContent = '';\n            if (rTooltipMethod) {\n                tipContent = `${rTooltipMethod({\n                    row: dragRow\n                }) || ''}`;\n            }\n            else {\n                tipContent = getI18n('vxe.table.dragTip', [tdEl.textContent || '']);\n            }\n            reactData.dragTipText = tipContent;\n        };\n        const updateColDropOrigin = (column) => {\n            const el = refElem.value;\n            if (el) {\n                const colQuerys = [];\n                XEUtils.eachTree([column], item => {\n                    colQuerys.push(`[colid=\"${item.id}\"]`);\n                });\n                const clss = 'col--drag-origin';\n                XEUtils.arrayEach(el.querySelectorAll(colQuerys.join(',')), (elem) => {\n                    addClass(elem, clss);\n                });\n            }\n        };\n        const clearColDropOrigin = () => {\n            const el = refElem.value;\n            if (el) {\n                const clss = 'col--drag-origin';\n                XEUtils.arrayEach(el.querySelectorAll(`.${clss}`), (elem) => {\n                    elem.draggable = false;\n                    removeClass(elem, clss);\n                });\n            }\n        };\n        const updateColDropTipContent = (tdEl) => {\n            const { dragCol } = reactData;\n            const columnDragOpts = computeColumnDragOpts.value;\n            const { tooltipMethod } = columnDragOpts;\n            let tipContent = '';\n            if (tooltipMethod) {\n                tipContent = `${tooltipMethod({\n                    column: dragCol\n                }) || ''}`;\n            }\n            else {\n                tipContent = getI18n('vxe.table.dragTip', [tdEl.textContent || '']);\n            }\n            reactData.dragTipText = tipContent;\n        };\n        const showDropTip = (evnt, trEl, thEl, showLine, dragPos) => {\n            const el = refElem.value;\n            if (!el) {\n                return;\n            }\n            const { overflowX, scrollbarWidth, overflowY, scrollbarHeight } = reactData;\n            const { prevDragToChild } = internalData;\n            const wrapperRect = el.getBoundingClientRect();\n            const osbWidth = overflowY ? scrollbarWidth : 0;\n            const osbHeight = overflowX ? scrollbarHeight : 0;\n            const tableWrapperWidth = el.clientWidth;\n            const tableWrapperHeight = el.clientHeight;\n            if (trEl) {\n                const rdLineEl = refDragRowLineElem.value;\n                if (rdLineEl) {\n                    if (showLine) {\n                        const scrollbarYToLeft = computeScrollbarYToLeft.value;\n                        const trRect = trEl.getBoundingClientRect();\n                        let trHeight = trEl.clientHeight;\n                        const offsetTop = Math.max(1, trRect.y - wrapperRect.y);\n                        if (offsetTop + trHeight > tableWrapperHeight - osbHeight) {\n                            trHeight = tableWrapperHeight - offsetTop - osbHeight;\n                        }\n                        rdLineEl.style.display = 'block';\n                        rdLineEl.style.left = `${scrollbarYToLeft ? osbWidth : 0}px`;\n                        rdLineEl.style.top = `${offsetTop}px`;\n                        rdLineEl.style.height = `${trHeight}px`;\n                        rdLineEl.style.width = `${tableWrapperWidth - osbWidth}px`;\n                        rdLineEl.setAttribute('drag-pos', dragPos);\n                        rdLineEl.setAttribute('drag-to-child', prevDragToChild ? 'y' : 'n');\n                    }\n                    else {\n                        rdLineEl.style.display = '';\n                    }\n                }\n            }\n            else if (thEl) {\n                const cdLineEl = refDragColLineElem.value;\n                if (cdLineEl) {\n                    if (showLine) {\n                        const scrollbarXToTop = computeScrollbarXToTop.value;\n                        const leftContainerElem = refLeftContainer.value;\n                        const leftContainerWidth = leftContainerElem ? leftContainerElem.clientWidth : 0;\n                        const rightContainerElem = refRightContainer.value;\n                        const rightContainerWidth = rightContainerElem ? rightContainerElem.clientWidth : 0;\n                        const thRect = thEl.getBoundingClientRect();\n                        let thWidth = thEl.clientWidth;\n                        const offsetTop = Math.max(0, thRect.y - wrapperRect.y);\n                        const startX = leftContainerWidth;\n                        let offsetLeft = thRect.x - wrapperRect.x;\n                        if (offsetLeft < startX) {\n                            thWidth -= startX - offsetLeft;\n                            offsetLeft = startX;\n                        }\n                        const endX = tableWrapperWidth - rightContainerWidth - (rightContainerWidth ? 0 : osbWidth);\n                        if (offsetLeft + thWidth > endX) {\n                            thWidth = endX - offsetLeft;\n                        }\n                        cdLineEl.style.display = 'block';\n                        cdLineEl.style.top = `${offsetTop}px`;\n                        cdLineEl.style.left = `${offsetLeft}px`;\n                        cdLineEl.style.width = `${thWidth}px`;\n                        if (prevDragToChild) {\n                            cdLineEl.style.height = `${thRect.height}px`;\n                        }\n                        else {\n                            cdLineEl.style.height = `${tableWrapperHeight - offsetTop - (scrollbarXToTop ? 0 : osbHeight)}px`;\n                        }\n                        cdLineEl.setAttribute('drag-pos', dragPos);\n                        cdLineEl.setAttribute('drag-to-child', prevDragToChild ? 'y' : 'n');\n                    }\n                    else {\n                        cdLineEl.style.display = '';\n                    }\n                }\n            }\n            const rdTipEl = refDragTipElem.value;\n            if (rdTipEl) {\n                rdTipEl.style.display = 'block';\n                rdTipEl.style.top = `${Math.min(el.clientHeight - el.scrollTop - rdTipEl.clientHeight, evnt.clientY - wrapperRect.y)}px`;\n                rdTipEl.style.left = `${Math.min(el.clientWidth - el.scrollLeft - rdTipEl.clientWidth - 16, evnt.clientX - wrapperRect.x)}px`;\n                rdTipEl.setAttribute('drag-status', showLine ? (prevDragToChild ? 'sub' : 'normal') : 'disabled');\n            }\n        };\n        const hideDropTip = () => {\n            const rdTipEl = refDragTipElem.value;\n            const rdLineEl = refDragRowLineElem.value;\n            const cdLineEl = refDragColLineElem.value;\n            if (rdTipEl) {\n                rdTipEl.style.display = '';\n            }\n            if (rdLineEl) {\n                rdLineEl.style.display = '';\n            }\n            if (cdLineEl) {\n                cdLineEl.style.display = '';\n            }\n        };\n        /**\n         * 处理显示 tooltip\n         * @param {Event} evnt 事件\n         * @param {Row} row 行对象\n         */\n        const handleTooltip = (evnt, tdEl, overflowElem, tipElem, params) => {\n            const tipOverEl = overflowElem || tdEl;\n            if (!tipOverEl) {\n                return nextTick();\n            }\n            params.cell = tdEl;\n            const { tooltipStore } = reactData;\n            const tooltipOpts = computeTooltipOpts.value;\n            const { column, row } = params;\n            const { showAll, contentMethod } = tooltipOpts;\n            const customContent = contentMethod ? contentMethod(params) : null;\n            const useCustom = contentMethod && !XEUtils.eqNull(customContent);\n            const content = useCustom ? customContent : XEUtils.toString(column.type === 'html' ? tipOverEl.innerText : tipOverEl.textContent).trim();\n            const isOver = tipOverEl.scrollWidth > tipOverEl.clientWidth;\n            if (content && (showAll || useCustom || isOver)) {\n                Object.assign(tooltipStore, {\n                    row,\n                    column,\n                    visible: true,\n                    currOpts: {}\n                });\n                nextTick(() => {\n                    const $tooltip = refTooltip.value;\n                    if ($tooltip && $tooltip.open) {\n                        $tooltip.open(isOver ? tipOverEl : tipElem, formatText(content));\n                    }\n                });\n            }\n            return nextTick();\n        };\n        const callSlot = (slotFunc, params) => {\n            if (slotFunc) {\n                if ($xeGrid) {\n                    return $xeGrid.callSlot(slotFunc, params);\n                }\n                if (XEUtils.isFunction(slotFunc)) {\n                    return getSlotVNs(slotFunc(params));\n                }\n            }\n            return [];\n        };\n        /**\n         * 内部方法\n         */\n        tablePrivateMethods = {\n            getSetupOptions() {\n                return getConfig();\n            },\n            updateAfterDataIndex,\n            callSlot,\n            /**\n             * 获取父容器元素\n             */\n            getParentElem() {\n                const el = refElem.value;\n                if ($xeGrid) {\n                    const gridEl = $xeGrid.getRefMaps().refElem.value;\n                    return gridEl ? gridEl.parentNode : null;\n                }\n                return el ? el.parentNode : null;\n            },\n            /**\n             * 获取父容器的高度\n             */\n            getParentHeight() {\n                const { height } = props;\n                const el = refElem.value;\n                if (el) {\n                    const parentElem = el.parentNode;\n                    const parentPaddingSize = height === '100%' || height === 'auto' ? getPaddingTopBottomSize(parentElem) : 0;\n                    let parentWrapperHeight = 0;\n                    if (parentElem) {\n                        if ($xeGrid && hasClass(parentElem, 'vxe-grid--table-wrapper')) {\n                            parentWrapperHeight = $xeGrid.getParentHeight();\n                        }\n                        else {\n                            parentWrapperHeight = parentElem.clientHeight;\n                        }\n                    }\n                    return Math.floor(parentWrapperHeight - parentPaddingSize);\n                }\n                return 0;\n            },\n            /**\n             * 获取需要排除的高度\n             * 但渲染表格高度时，需要排除工具栏或分页等相关组件的高度\n             * 如果存在表尾合计滚动条，则需要排除滚动条高度\n             */\n            getExcludeHeight() {\n                return $xeGrid ? $xeGrid.getExcludeHeight() : 0;\n            },\n            /**\n             * 定义行数据中的列属性，如果不存在则定义\n             * @param {Row} records 行数据\n             */\n            defineField(records) {\n                const { treeConfig } = props;\n                const expandOpts = computeExpandOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const radioOpts = computeRadioOpts.value;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const rowkey = getRowkey($xeTable);\n                if (!XEUtils.isArray(records)) {\n                    records = [records];\n                }\n                return records.map(record => {\n                    internalData.tableFullColumn.forEach(column => {\n                        const { field, editRender } = column;\n                        if (field && !XEUtils.has(record, field) && !record[field]) {\n                            let cellValue = null;\n                            if (editRender) {\n                                const { defaultValue } = editRender;\n                                if (XEUtils.isFunction(defaultValue)) {\n                                    cellValue = defaultValue({ column });\n                                }\n                                else if (!XEUtils.isUndefined(defaultValue)) {\n                                    cellValue = defaultValue;\n                                }\n                            }\n                            XEUtils.set(record, field, cellValue);\n                        }\n                    });\n                    const otherFields = [radioOpts.labelField, checkboxOpts.checkField, checkboxOpts.labelField, expandOpts.labelField];\n                    otherFields.forEach((key) => {\n                        if (key && eqEmptyValue(XEUtils.get(record, key))) {\n                            XEUtils.set(record, key, null);\n                        }\n                    });\n                    if (treeConfig && treeOpts.lazy && XEUtils.isUndefined(record[childrenField])) {\n                        record[childrenField] = null;\n                    }\n                    // 必须有行数据的唯一主键，可以自行设置；也可以默认生成一个随机数\n                    if (eqEmptyValue(XEUtils.get(record, rowkey))) {\n                        XEUtils.set(record, rowkey, getRowUniqueId());\n                    }\n                    return record;\n                });\n            },\n            handleTableData(force) {\n                const { scrollYLoad } = reactData;\n                const { scrollYStore, fullDataRowIdData } = internalData;\n                let fullList = internalData.afterFullData;\n                // 是否进行数据处理\n                if (force) {\n                    // 更新数据，处理筛选和排序\n                    updateAfterFullData();\n                    // 如果为虚拟树，将树结构拍平\n                    fullList = handleVirtualTreeToList();\n                }\n                const tableData = scrollYLoad ? fullList.slice(scrollYStore.startIndex, scrollYStore.endIndex) : fullList.slice(0);\n                tableData.forEach((row, $index) => {\n                    const rowid = getRowid($xeTable, row);\n                    const rest = fullDataRowIdData[rowid];\n                    if (rest) {\n                        rest.$index = $index;\n                    }\n                });\n                reactData.tableData = tableData;\n                return nextTick();\n            },\n            /**\n             * 更新数据行的 Map\n             */\n            cacheRowMap() {\n                const { treeConfig } = props;\n                const { fullAllDataRowIdData, tableFullData, tableFullTreeData, treeExpandedMaps } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const hasChildField = treeOpts.hasChild || treeOpts.hasChildField;\n                const { lazy } = treeOpts;\n                const fullAllDataRowIdMaps = Object.assign({}, fullAllDataRowIdData); // 存在已删除数据\n                const fullDataRowIdMaps = {};\n                const { handleUpdateRowId } = createHandleUpdateRowId($xeTable);\n                const handleRowCache = (row, index, items, currIndex, parentRow, rowid, level, seq) => {\n                    let rowRest = fullAllDataRowIdMaps[rowid];\n                    if (!rowRest) {\n                        rowRest = { row, rowid, seq, index: -1, _index: -1, $index: -1, treeIndex: index, items, parent: parentRow, level, height: 0, resizeHeight: 0, oTop: 0, expandHeight: 0 };\n                        fullDataRowIdMaps[rowid] = rowRest;\n                        fullAllDataRowIdMaps[rowid] = rowRest;\n                    }\n                    rowRest.treeLoaded = false;\n                    rowRest.expandLoaded = false;\n                    rowRest.row = row;\n                    rowRest.items = items;\n                    rowRest.parent = parentRow;\n                    rowRest.level = level;\n                    rowRest.index = currIndex;\n                    rowRest.treeIndex = index;\n                    fullDataRowIdMaps[rowid] = rowRest;\n                    fullAllDataRowIdMaps[rowid] = rowRest;\n                };\n                if (treeConfig) {\n                    XEUtils.eachTree(tableFullTreeData, (row, index, items, path, parentRow, nodes) => {\n                        const rowid = handleUpdateRowId(row);\n                        if (treeConfig && lazy) {\n                            if (row[hasChildField] && row[childrenField] === undefined) {\n                                row[childrenField] = null;\n                            }\n                            if (treeExpandedMaps[rowid]) {\n                                if (!row[childrenField] || !row[childrenField].length) {\n                                    delete treeExpandedMaps[rowid];\n                                }\n                            }\n                        }\n                        handleRowCache(row, index, items, parentRow ? -1 : index, parentRow, rowid, nodes.length - 1, toTreePathSeq(path));\n                    }, { children: childrenField });\n                }\n                else {\n                    tableFullData.forEach((row, index, items) => {\n                        handleRowCache(row, index, items, index, null, handleUpdateRowId(row), 0, index + 1);\n                    });\n                }\n                internalData.fullDataRowIdData = fullDataRowIdMaps;\n                internalData.fullAllDataRowIdData = fullAllDataRowIdMaps;\n                reactData.treeExpandedFlag++;\n            },\n            cacheSourceMap(fullData) {\n                const { treeConfig } = props;\n                const treeOpts = computeTreeOpts.value;\n                const sourceData = XEUtils.clone(fullData, true);\n                const { handleUpdateRowId } = createHandleUpdateRowId($xeTable);\n                const sourceRowIdData = {};\n                const handleSourceRow = (row) => {\n                    const rowid = handleUpdateRowId(row);\n                    sourceRowIdData[rowid] = row;\n                };\n                // 源数据缓存\n                if (treeConfig) {\n                    const childrenField = treeOpts.children || treeOpts.childrenField;\n                    XEUtils.eachTree(sourceData, handleSourceRow, { children: treeOpts.transform ? treeOpts.mapChildrenField : childrenField });\n                }\n                else {\n                    sourceData.forEach(handleSourceRow);\n                }\n                internalData.sourceDataRowIdData = sourceRowIdData;\n                internalData.tableSourceData = sourceData;\n            },\n            /**\n             * 指定列宽的列进行拆分\n             */\n            analyColumnWidth() {\n                const { tableFullColumn } = internalData;\n                const columnOpts = computeColumnOpts.value;\n                const { width: defaultWidth, minWidth: defaultMinWidth } = columnOpts;\n                const resizeList = [];\n                const pxList = [];\n                const pxMinList = [];\n                const autoMinList = [];\n                const scaleList = [];\n                const scaleMinList = [];\n                const autoList = [];\n                const remainList = [];\n                tableFullColumn.forEach((column) => {\n                    if (defaultWidth && !column.width) {\n                        column.width = defaultWidth;\n                    }\n                    if (defaultMinWidth && !column.minWidth) {\n                        column.minWidth = defaultMinWidth;\n                    }\n                    if (column.visible) {\n                        if (column.resizeWidth) {\n                            resizeList.push(column);\n                        }\n                        else if (column.width === 'auto') {\n                            autoList.push(column);\n                        }\n                        else if (isPx(column.width)) {\n                            pxList.push(column);\n                        }\n                        else if (isScale(column.width)) {\n                            scaleList.push(column);\n                        }\n                        else if (isPx(column.minWidth)) {\n                            pxMinList.push(column);\n                        }\n                        else if (column.minWidth === 'auto') {\n                            autoMinList.push(column);\n                        }\n                        else if (isScale(column.minWidth)) {\n                            scaleMinList.push(column);\n                        }\n                        else {\n                            remainList.push(column);\n                        }\n                    }\n                });\n                Object.assign(reactData.columnStore, { resizeList, pxList, pxMinList, autoMinList, scaleList, scaleMinList, autoList, remainList });\n            },\n            handleColResizeMousedownEvent(evnt, fixedType, params) {\n                evnt.stopPropagation();\n                evnt.preventDefault();\n                const { column } = params;\n                const { overflowX, scrollbarHeight } = reactData;\n                const { elemStore, visibleColumn } = internalData;\n                const resizableOpts = computeResizableOpts.value;\n                const osbHeight = overflowX ? scrollbarHeight : 0;\n                const tableEl = refElem.value;\n                const leftContainerElem = refLeftContainer.value;\n                const rightContainerElem = refRightContainer.value;\n                const resizeBarElem = refColResizeBar.value;\n                if (!resizeBarElem) {\n                    return;\n                }\n                const resizeTipElem = resizeBarElem.firstElementChild;\n                const scrollbarXToTop = computeScrollbarXToTop.value;\n                const { clientX: dragClientX } = evnt;\n                const wrapperElem = refElem.value;\n                const dragBtnElem = evnt.target;\n                let resizeColumn = column;\n                if (column.children && column.children.length) {\n                    XEUtils.eachTree(column.children, childColumn => {\n                        resizeColumn = childColumn;\n                    });\n                }\n                const cell = dragBtnElem.parentNode;\n                const cellParams = Object.assign(params, { cell });\n                let dragLeft = 0;\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                if (!bodyScrollElem) {\n                    return;\n                }\n                const pos = getOffsetPos(dragBtnElem, wrapperElem);\n                const dragBtnWidth = dragBtnElem.clientWidth;\n                const dragBtnOffsetWidth = Math.floor(dragBtnWidth / 2);\n                const minInterval = getColReMinWidth(cellParams) - dragBtnOffsetWidth; // 列之间的最小间距\n                let dragMinLeft = pos.left - cell.clientWidth + dragBtnWidth + minInterval;\n                let dragPosLeft = pos.left + dragBtnOffsetWidth;\n                const isLeftFixed = fixedType === 'left';\n                const isRightFixed = fixedType === 'right';\n                // 计算左右侧固定列偏移量\n                let fixedOffsetWidth = 0;\n                if (isLeftFixed || isRightFixed) {\n                    const siblingProp = isLeftFixed ? 'nextElementSibling' : 'previousElementSibling';\n                    let tempCellElem = cell[siblingProp];\n                    while (tempCellElem) {\n                        if (hasClass(tempCellElem, 'fixed--hidden')) {\n                            break;\n                        }\n                        else if (!hasClass(tempCellElem, 'col--group')) {\n                            fixedOffsetWidth += tempCellElem.offsetWidth;\n                        }\n                        tempCellElem = tempCellElem[siblingProp];\n                    }\n                    if (isRightFixed && rightContainerElem) {\n                        dragPosLeft = rightContainerElem.offsetLeft + fixedOffsetWidth;\n                    }\n                }\n                // 处理拖动事件\n                const updateEvent = (evnt) => {\n                    evnt.stopPropagation();\n                    evnt.preventDefault();\n                    const tableHeight = tableEl.clientHeight;\n                    const offsetX = evnt.clientX - dragClientX;\n                    let left = dragPosLeft + offsetX;\n                    const scrollLeft = fixedType ? 0 : bodyScrollElem.scrollLeft;\n                    if (isLeftFixed) {\n                        // 左固定列（不允许超过右侧固定列、不允许超过右边距）\n                        left = Math.min(left, (rightContainerElem ? rightContainerElem.offsetLeft : bodyScrollElem.clientWidth) - fixedOffsetWidth - minInterval);\n                    }\n                    else if (isRightFixed) {\n                        // 右侧固定列（不允许超过左侧固定列、不允许超过左边距）\n                        dragMinLeft = (leftContainerElem ? leftContainerElem.clientWidth : 0) + fixedOffsetWidth + minInterval;\n                        left = Math.min(left, dragPosLeft + cell.clientWidth - minInterval);\n                    }\n                    else {\n                        dragMinLeft = Math.max(bodyScrollElem.scrollLeft, dragMinLeft);\n                        // left = Math.min(left, bodyScrollElem.clientWidth + bodyScrollElem.scrollLeft - 40)\n                    }\n                    dragLeft = Math.max(left, dragMinLeft);\n                    const resizeBarLeft = Math.max(1, dragLeft - scrollLeft);\n                    resizeBarElem.style.left = `${resizeBarLeft}px`;\n                    resizeBarElem.style.top = `${scrollbarXToTop ? osbHeight : 0}px`;\n                    resizeBarElem.style.height = `${scrollbarXToTop ? tableHeight - osbHeight : tableHeight}px`;\n                    if (resizableOpts.showDragTip && resizeTipElem) {\n                        resizeTipElem.textContent = getI18n('vxe.table.resizeColTip', [resizeColumn.renderWidth + (isRightFixed ? dragPosLeft - dragLeft : dragLeft - dragPosLeft)]);\n                        const tableWrapperWidth = tableEl.clientWidth;\n                        const wrapperRect = wrapperElem.getBoundingClientRect();\n                        const resizeBarWidth = resizeBarElem.clientWidth;\n                        const resizeTipWidth = resizeTipElem.clientWidth;\n                        const resizeTipHeight = resizeTipElem.clientHeight;\n                        let resizeTipLeft = -resizeTipWidth;\n                        if (resizeBarLeft < resizeTipWidth + resizeBarWidth) {\n                            resizeTipLeft = 0;\n                        }\n                        else if (resizeBarLeft > tableWrapperWidth) {\n                            resizeTipLeft += tableWrapperWidth - resizeBarLeft;\n                        }\n                        resizeTipElem.style.left = `${resizeTipLeft}px`;\n                        resizeTipElem.style.top = `${Math.min(tableHeight - resizeTipHeight, Math.max(0, evnt.clientY - wrapperRect.y - resizeTipHeight / 2))}px`;\n                    }\n                    reactData.isDragResize = true;\n                };\n                reactData.isDragResize = true;\n                addClass(tableEl, 'col-drag--resize');\n                resizeBarElem.style.display = 'block';\n                document.onmousemove = updateEvent;\n                document.onmouseup = function (evnt) {\n                    document.onmousemove = null;\n                    document.onmouseup = null;\n                    resizeBarElem.style.display = 'none';\n                    internalData._lastResizeTime = Date.now();\n                    setTimeout(() => {\n                        reactData.isDragResize = false;\n                    }, 50);\n                    const resizeWidth = resizeColumn.renderWidth + (isRightFixed ? dragPosLeft - dragLeft : dragLeft - dragPosLeft);\n                    const resizeParams = Object.assign(Object.assign({}, params), { resizeWidth, resizeColumn });\n                    if (resizableOpts.dragMode === 'fixed') {\n                        visibleColumn.forEach(item => {\n                            if (item.id !== resizeColumn.id) {\n                                if (!item.resizeWidth) {\n                                    item.resizeWidth = item.renderWidth;\n                                }\n                            }\n                        });\n                    }\n                    if ($xeTable.handleColResizeCellAreaEvent) {\n                        $xeTable.handleColResizeCellAreaEvent(evnt, resizeParams);\n                    }\n                    else {\n                        resizeColumn.resizeWidth = resizeWidth;\n                        handleUpdateColResize(evnt, resizeParams);\n                    }\n                    removeClass(tableEl, 'col-drag--resize');\n                };\n                updateEvent(evnt);\n                if ($xeTable.closeMenu) {\n                    $xeTable.closeMenu();\n                }\n            },\n            handleColResizeDblclickEvent(evnt, params) {\n                const resizableOpts = computeResizableOpts.value;\n                const { isDblclickAutoWidth } = resizableOpts;\n                const el = refElem.value;\n                if (isDblclickAutoWidth && el) {\n                    evnt.stopPropagation();\n                    evnt.preventDefault();\n                    const { fullColumnIdData } = internalData;\n                    const { column } = params;\n                    let resizeColumn = column;\n                    if (column.children && column.children.length) {\n                        XEUtils.eachTree(column.children, childColumn => {\n                            resizeColumn = childColumn;\n                        });\n                    }\n                    const colid = resizeColumn.id;\n                    const colRest = fullColumnIdData[colid];\n                    const dragBtnElem = evnt.target;\n                    const cell = dragBtnElem.parentNode;\n                    const cellParams = Object.assign(params, { cell });\n                    const colMinWidth = getColReMinWidth(cellParams);\n                    el.setAttribute('data-calc-col', 'Y');\n                    let resizeWidth = calcColumnAutoWidth(resizeColumn, el);\n                    el.removeAttribute('data-calc-col');\n                    if (colRest) {\n                        resizeWidth = Math.max(resizeWidth, colRest.width);\n                    }\n                    resizeWidth = Math.max(colMinWidth, resizeWidth);\n                    const resizeParams = Object.assign(Object.assign({}, params), { resizeWidth, resizeColumn });\n                    reactData.isDragResize = false;\n                    internalData._lastResizeTime = Date.now();\n                    if ($xeTable.handleColResizeDblclickCellAreaEvent) {\n                        $xeTable.handleColResizeDblclickCellAreaEvent(evnt, resizeParams);\n                    }\n                    else {\n                        resizeColumn.resizeWidth = resizeWidth;\n                        handleUpdateColResize(evnt, resizeParams);\n                    }\n                }\n            },\n            handleRowResizeMousedownEvent(evnt, params) {\n                evnt.stopPropagation();\n                evnt.preventDefault();\n                const { row } = params;\n                const { overflowX, scrollbarWidth, overflowY, scrollbarHeight } = reactData;\n                const { elemStore, fullAllDataRowIdData } = internalData;\n                const osbWidth = overflowY ? scrollbarWidth : 0;\n                const osbHeight = overflowX ? scrollbarHeight : 0;\n                const scrollbarYToLeft = computeScrollbarYToLeft.value;\n                const resizableOpts = computeResizableOpts.value;\n                const rowOpts = computeRowOpts.value;\n                const cellOpts = computeCellOpts.value;\n                const tableEl = refElem.value;\n                const resizeBarElem = refRowResizeBar.value;\n                if (!resizeBarElem) {\n                    return;\n                }\n                const { clientY: dragClientY } = evnt;\n                const resizeTipElem = resizeBarElem.firstElementChild;\n                const dragBtnElem = evnt.currentTarget;\n                const tdEl = dragBtnElem.parentNode;\n                const trEl = tdEl.parentNode;\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                if (!bodyScrollElem) {\n                    return;\n                }\n                const rowid = getRowid($xeTable, row);\n                const rowRest = fullAllDataRowIdData[rowid];\n                if (!rowRest) {\n                    return;\n                }\n                const defaultRowHeight = computeDefaultRowHeight.value;\n                const currCellHeight = rowRest.resizeHeight || cellOpts.height || rowOpts.height || rowRest.height || defaultRowHeight;\n                const tableRect = tableEl.getBoundingClientRect();\n                const trRect = trEl.getBoundingClientRect();\n                const targetOffsetY = dragClientY - trRect.y - trEl.clientHeight;\n                let resizeHeight = currCellHeight;\n                const cellEl = tdEl.querySelector('.vxe-cell');\n                let cellMinHeight = 0;\n                if (cellEl) {\n                    const cellStyle = getComputedStyle(cellEl);\n                    cellMinHeight = Math.max(1, Math.ceil(XEUtils.toNumber(cellStyle.paddingTop) + XEUtils.toNumber(cellStyle.paddingBottom)));\n                }\n                const minTop = trRect.y - tableRect.y + cellMinHeight;\n                // 处理拖动事件\n                const updateEvent = (evnt) => {\n                    evnt.stopPropagation();\n                    evnt.preventDefault();\n                    const rtWidth = tableEl.clientWidth - osbWidth;\n                    const tableHeight = tableEl.clientHeight - osbHeight;\n                    let dragTop = evnt.clientY - tableRect.y - targetOffsetY;\n                    if (dragTop < minTop) {\n                        dragTop = minTop;\n                    }\n                    else {\n                        resizeHeight = Math.max(cellMinHeight, currCellHeight + evnt.clientY - dragClientY);\n                    }\n                    resizeBarElem.style.left = `${scrollbarYToLeft ? osbWidth : 0}px`;\n                    resizeBarElem.style.top = `${dragTop}px`;\n                    resizeBarElem.style.width = `${rtWidth}px`;\n                    if (resizableOpts.showDragTip && resizeTipElem) {\n                        resizeTipElem.textContent = getI18n('vxe.table.resizeRowTip', [resizeHeight]);\n                        const resizeTipWidth = resizeTipElem.clientWidth;\n                        const resizeTipHeight = resizeTipElem.clientHeight;\n                        let resizeBarLeft = Math.max(2, evnt.clientX - tableRect.x);\n                        let resizeBarTop = 0;\n                        if (resizeBarLeft + resizeTipWidth >= rtWidth - 2) {\n                            resizeBarLeft = rtWidth - resizeTipWidth - 2;\n                        }\n                        if (dragTop + resizeTipHeight >= tableHeight) {\n                            resizeBarTop = tableHeight - (dragTop + resizeTipHeight);\n                        }\n                        resizeTipElem.style.left = `${resizeBarLeft}px`;\n                        resizeTipElem.style.top = `${resizeBarTop}px`;\n                    }\n                    reactData.isDragResize = true;\n                };\n                reactData.isDragResize = true;\n                addClass(tableEl, 'row-drag--resize');\n                resizeBarElem.style.display = 'block';\n                document.onmousemove = updateEvent;\n                document.onmouseup = function (evnt) {\n                    document.onmousemove = null;\n                    document.onmouseup = null;\n                    resizeBarElem.style.display = 'none';\n                    internalData._lastResizeTime = Date.now();\n                    setTimeout(() => {\n                        reactData.isDragResize = false;\n                    }, 50);\n                    if (resizeHeight !== currCellHeight) {\n                        const resizeParams = Object.assign(Object.assign({}, params), { resizeHeight, resizeRow: row });\n                        internalData.isResizeCellHeight = true;\n                        if ($xeTable.handleRowResizeCellAreaEvent) {\n                            $xeTable.handleRowResizeCellAreaEvent(evnt, resizeParams);\n                        }\n                        else {\n                            rowRest.resizeHeight = resizeHeight;\n                            handleUpdateRowResize(evnt, resizeParams);\n                            updateRowOffsetTop();\n                        }\n                    }\n                    removeClass(tableEl, 'row-drag--resize');\n                };\n                updateEvent(evnt);\n            },\n            handleRowResizeDblclickEvent(evnt, params) {\n                const resizableOpts = computeResizableOpts.value;\n                const { isDblclickAutoHeight } = resizableOpts;\n                const el = refElem.value;\n                if (isDblclickAutoHeight && el) {\n                    evnt.stopPropagation();\n                    evnt.preventDefault();\n                    const { editStore } = reactData;\n                    const { fullAllDataRowIdData } = internalData;\n                    const { actived } = editStore;\n                    const { row } = params;\n                    const rowid = getRowid($xeTable, row);\n                    const rowRest = fullAllDataRowIdData[rowid];\n                    if (!rowRest) {\n                        return;\n                    }\n                    const handleRsHeight = () => {\n                        el.setAttribute('data-calc-row', 'Y');\n                        const resizeHeight = calcCellAutoHeight(rowRest, el);\n                        el.removeAttribute('data-calc-row');\n                        const resizeParams = Object.assign(Object.assign({}, params), { resizeHeight, resizeRow: row });\n                        reactData.isDragResize = false;\n                        internalData._lastResizeTime = Date.now();\n                        if ($xeTable.handleRowResizeDblclickCellAreaEvent) {\n                            $xeTable.handleRowResizeDblclickCellAreaEvent(evnt, resizeParams);\n                        }\n                        else {\n                            rowRest.resizeHeight = resizeHeight;\n                            handleUpdateRowResize(evnt, resizeParams);\n                        }\n                    };\n                    if (actived.row || actived.column) {\n                        $xeTable.clearEdit().then(handleRsHeight);\n                    }\n                    else {\n                        handleRsHeight();\n                    }\n                }\n            },\n            saveCustomStore(type) {\n                const { customConfig } = props;\n                const tableId = computeTableId.value;\n                const customOpts = computeCustomOpts.value;\n                const { updateStore, storage } = customOpts;\n                const isAllCustom = storage === true;\n                const storageOpts = isAllCustom ? {} : Object.assign({}, storage || {});\n                const isCustomResizable = isAllCustom || storageOpts.resizable;\n                const isCustomVisible = isAllCustom || storageOpts.visible;\n                const isCustomFixed = isAllCustom || storageOpts.fixed;\n                const isCustomSort = isAllCustom || storageOpts.sort;\n                if (type !== 'reset') {\n                    // fix：修复拖动列宽，重置按钮无法点击的问题\n                    reactData.isCustomStatus = true;\n                }\n                if ((customConfig ? isEnableConf(customOpts) : customOpts.enabled) && (isCustomResizable || isCustomVisible || isCustomFixed || isCustomSort)) {\n                    if (!tableId) {\n                        errLog('vxe.error.reqProp', ['id']);\n                        return nextTick();\n                    }\n                    const storeData = type === 'reset'\n                        ? {\n                            resizableData: {},\n                            sortData: {},\n                            visibleData: {},\n                            fixedData: {}\n                        }\n                        : tableMethods.getCustomStoreData();\n                    if (updateStore) {\n                        return updateStore({\n                            id: tableId,\n                            type,\n                            storeData\n                        });\n                    }\n                    else {\n                        setCustomStorageMap(tableId, type === 'reset' ? null : storeData);\n                    }\n                }\n                return nextTick();\n            },\n            handleCustom() {\n                const { mouseConfig } = props;\n                if (mouseConfig) {\n                    if ($xeTable.clearSelected) {\n                        $xeTable.clearSelected();\n                    }\n                    if ($xeTable.clearCellAreas) {\n                        $xeTable.clearCellAreas();\n                        $xeTable.clearCopyCellArea();\n                    }\n                }\n                tablePrivateMethods.analyColumnWidth();\n                return tableMethods.refreshColumn(true);\n            },\n            handleUpdateDataQueue() {\n                reactData.upDataFlag++;\n            },\n            handleRefreshColumnQueue() {\n                reactData.reColumnFlag++;\n            },\n            preventEvent(evnt, type, args, next, end) {\n                let evntList = interceptor.get(type);\n                // 兼容老版本\n                if (!evntList.length && type === 'event.clearEdit') {\n                    evntList = interceptor.get('event.clearActived');\n                    if (process.env.NODE_ENV === 'development') {\n                        if (evntList.length) {\n                            warnLog('vxe.error.delEvent', ['event.clearActived', 'event.clearEdit']);\n                        }\n                    }\n                }\n                // 兼容老版本\n                let rest = null;\n                let isStop = false;\n                for (let i = 0; i < evntList.length; i++) {\n                    const func = evntList[i];\n                    const fnRest = func(Object.assign({ $grid: $xeGrid, $table: $xeTable, $event: evnt }, args));\n                    if (fnRest === false) {\n                        isStop = true;\n                        break;\n                    }\n                    else if (fnRest && fnRest.status === false) {\n                        rest = fnRest.result;\n                        isStop = true;\n                        break;\n                    }\n                }\n                if (!isStop) {\n                    if (next) {\n                        rest = next();\n                    }\n                }\n                if (end) {\n                    end();\n                }\n                return rest;\n            },\n            updateCheckboxStatus() {\n                const { treeConfig } = props;\n                const { selectCheckboxMaps, treeIndeterminateRowMaps } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { transform, mapChildrenField } = treeOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField, checkStrictly, checkMethod } = checkboxOpts;\n                const { afterTreeFullData } = internalData;\n                if (checkStrictly) {\n                    return;\n                }\n                // 树结构\n                if (treeConfig) {\n                    const { handleGetRowId } = createHandleGetRowId($xeTable);\n                    const childRowMaps = {};\n                    const childRowList = [];\n                    XEUtils.eachTree(afterTreeFullData, (row) => {\n                        const rowid = handleGetRowId(row);\n                        const childList = row[transform ? mapChildrenField : childrenField];\n                        if (childList && childList.length && !childRowMaps[rowid]) {\n                            childRowMaps[rowid] = 1;\n                            childRowList.unshift([row, rowid, childList]);\n                        }\n                    }, { children: transform ? mapChildrenField : childrenField });\n                    childRowList.forEach(vals => {\n                        const row = vals[0];\n                        const rowid = vals[1];\n                        const childList = vals[2];\n                        let sLen = 0; // 已选\n                        let hLen = 0; // 半选\n                        let vLen = 0; // 有效行\n                        childList.forEach(checkMethod\n                            ? (item) => {\n                                const childRowid = handleGetRowId(item);\n                                const isSelect = checkField ? XEUtils.get(item, checkField) : selectCheckboxMaps[childRowid];\n                                if (checkMethod({ row: item })) {\n                                    if (isSelect) {\n                                        sLen++;\n                                    }\n                                    else if (treeIndeterminateRowMaps[childRowid]) {\n                                        hLen++;\n                                    }\n                                    vLen++;\n                                }\n                                else {\n                                    if (isSelect) {\n                                        sLen++;\n                                    }\n                                    else if (treeIndeterminateRowMaps[childRowid]) {\n                                        hLen++;\n                                    }\n                                }\n                            }\n                            : item => {\n                                const childRowid = handleGetRowId(item);\n                                const isSelect = checkField ? XEUtils.get(item, checkField) : selectCheckboxMaps[childRowid];\n                                if (isSelect) {\n                                    sLen++;\n                                }\n                                else if (treeIndeterminateRowMaps[childRowid]) {\n                                    hLen++;\n                                }\n                                vLen++;\n                            });\n                        const isSelected = sLen >= vLen;\n                        const halfSelect = !isSelected && (sLen >= 1 || hLen >= 1);\n                        if (checkField) {\n                            XEUtils.set(row, checkField, isSelected);\n                        }\n                        if (isSelected) {\n                            if (!checkField) {\n                                selectCheckboxMaps[rowid] = row;\n                            }\n                            if (treeIndeterminateRowMaps[rowid]) {\n                                delete treeIndeterminateRowMaps[rowid];\n                            }\n                        }\n                        else {\n                            if (!checkField) {\n                                if (selectCheckboxMaps[rowid]) {\n                                    delete selectCheckboxMaps[rowid];\n                                }\n                            }\n                            if (halfSelect) {\n                                treeIndeterminateRowMaps[rowid] = row;\n                            }\n                            else {\n                                if (treeIndeterminateRowMaps[rowid]) {\n                                    delete treeIndeterminateRowMaps[rowid];\n                                }\n                            }\n                        }\n                    });\n                }\n                reactData.updateCheckboxFlag++;\n            },\n            updateAllCheckboxStatus() {\n                const { treeConfig } = props;\n                const { afterFullData, afterTreeFullData, checkboxReserveRowMap, selectCheckboxMaps, treeIndeterminateRowMaps } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField, checkMethod, showReserveStatus } = checkboxOpts;\n                const { handleGetRowId } = createHandleGetRowId($xeTable);\n                let sLen = 0; // 已选\n                let hLen = 0; // 半选\n                let vLen = 0; // 有效行\n                const rootList = (treeConfig ? afterTreeFullData : afterFullData);\n                rootList.forEach(checkMethod\n                    ? row => {\n                        const childRowid = handleGetRowId(row);\n                        const selected = checkField ? XEUtils.get(row, checkField) : selectCheckboxMaps[childRowid];\n                        if (checkMethod({ row })) {\n                            if (selected) {\n                                sLen++;\n                            }\n                            else if (treeIndeterminateRowMaps[childRowid]) {\n                                hLen++;\n                            }\n                            vLen++;\n                        }\n                        else {\n                            if (selected) {\n                                sLen++;\n                            }\n                            else if (treeIndeterminateRowMaps[childRowid]) {\n                                hLen++;\n                            }\n                        }\n                    }\n                    : row => {\n                        const childRowid = handleGetRowId(row);\n                        const selected = checkField ? XEUtils.get(row, checkField) : selectCheckboxMaps[childRowid];\n                        if (selected) {\n                            sLen++;\n                        }\n                        else if (treeIndeterminateRowMaps[childRowid]) {\n                            hLen++;\n                        }\n                        vLen++;\n                    });\n                const isSelected = rootList.length > 0 ? (vLen > 0 ? (sLen >= vLen) : (sLen >= rootList.length)) : false;\n                let halfSelect = !isSelected && (sLen >= 1 || hLen >= 1);\n                // 如果复选框启用保留记录，当保留数据存在时显示半选\n                if (!isSelected && !halfSelect && showReserveStatus) {\n                    halfSelect = !XEUtils.isEmpty(checkboxReserveRowMap);\n                }\n                reactData.isAllSelected = isSelected;\n                reactData.isIndeterminate = halfSelect;\n            },\n            checkSelectionStatus() {\n                $xeTable.updateCheckboxStatus();\n                $xeTable.updateAllCheckboxStatus();\n            },\n            /**\n             * 切换选中\n             * 多选，行选中事件\n             */\n            handleBatchSelectRows(rows, checked, isForce) {\n                const { treeConfig } = props;\n                const { selectCheckboxMaps } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { transform, mapChildrenField } = treeOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField, checkStrictly, checkMethod } = checkboxOpts;\n                const { handleGetRowId } = createHandleGetRowId($xeTable);\n                // indeterminateField 仅支持读取\n                const indeterminateField = checkboxOpts.indeterminateField || checkboxOpts.halfField;\n                if (checkField) {\n                    // 树结构\n                    if (treeConfig && !checkStrictly) {\n                        // 更新子节点状态\n                        XEUtils.eachTree(rows, (row) => {\n                            if (isForce || (!checkMethod || checkMethod({ row }))) {\n                                XEUtils.set(row, checkField, checked);\n                                if (indeterminateField) {\n                                    XEUtils.set(row, indeterminateField, false);\n                                }\n                                handleCheckboxReserveRow(row, checked);\n                            }\n                        }, { children: transform ? mapChildrenField : childrenField });\n                        reactData.updateCheckboxFlag++;\n                        return;\n                    }\n                    // 列表\n                    rows.forEach(row => {\n                        if (isForce || (!checkMethod || checkMethod({ row }))) {\n                            XEUtils.set(row, checkField, checked);\n                            handleCheckboxReserveRow(row, checked);\n                        }\n                    });\n                    reactData.updateCheckboxFlag++;\n                    return;\n                }\n                // 树结构\n                if (treeConfig && !checkStrictly) {\n                    // 更新子节点状态\n                    XEUtils.eachTree(rows, (row) => {\n                        const rowid = handleGetRowId(row);\n                        if (isForce || (!checkMethod || checkMethod({ row }))) {\n                            if (checked) {\n                                selectCheckboxMaps[rowid] = row;\n                            }\n                            else {\n                                if (selectCheckboxMaps[rowid]) {\n                                    delete selectCheckboxMaps[rowid];\n                                }\n                            }\n                            handleCheckboxReserveRow(row, checked);\n                        }\n                    }, { children: transform ? mapChildrenField : childrenField });\n                    reactData.updateCheckboxFlag++;\n                    return;\n                }\n                // 列表\n                rows.forEach(row => {\n                    const rowid = handleGetRowId(row);\n                    if (isForce || (!checkMethod || checkMethod({ row }))) {\n                        if (checked) {\n                            if (!selectCheckboxMaps[rowid]) {\n                                selectCheckboxMaps[rowid] = row;\n                            }\n                        }\n                        else {\n                            if (selectCheckboxMaps[rowid]) {\n                                delete selectCheckboxMaps[rowid];\n                            }\n                        }\n                        handleCheckboxReserveRow(row, checked);\n                        reactData.updateCheckboxFlag++;\n                    }\n                });\n            },\n            /**\n             * 即将移除\n             * @deprecated\n             */\n            handleSelectRow({ row }, checked, isForce) {\n                $xeTable.handleBatchSelectRows([row], checked, isForce);\n            },\n            triggerHeaderTitleEvent(evnt, iconParams, params) {\n                const tipContent = iconParams.content || iconParams.message;\n                if (tipContent) {\n                    const { tooltipStore } = reactData;\n                    const { column } = params;\n                    const content = getFuncText(tipContent);\n                    handleTargetEnterEvent(true);\n                    tooltipStore.row = null;\n                    tooltipStore.column = column;\n                    tooltipStore.visible = true;\n                    tooltipStore.currOpts = iconParams;\n                    nextTick(() => {\n                        const $tooltip = refTooltip.value;\n                        if ($tooltip && $tooltip.open) {\n                            $tooltip.open(evnt.currentTarget, content);\n                        }\n                    });\n                }\n            },\n            /**\n             * 触发表头 tooltip 事件\n             */\n            triggerHeaderTooltipEvent(evnt, params) {\n                const { tooltipStore } = reactData;\n                const { column } = params;\n                handleTargetEnterEvent(true);\n                const titleElem = evnt.currentTarget;\n                if (!titleElem) {\n                    return;\n                }\n                const cellEl = titleElem.parentElement;\n                if (!cellEl) {\n                    return;\n                }\n                const thEl = cellEl.parentElement;\n                if (!thEl) {\n                    return;\n                }\n                if (tooltipStore.column !== column || !tooltipStore.visible) {\n                    handleTooltip(evnt, thEl, thEl.querySelector('.vxe-cell--wrapper'), thEl.querySelector('.vxe-cell--title') || cellEl, params);\n                }\n            },\n            /**\n             * 触发单元格 tooltip 事件\n             */\n            triggerBodyTooltipEvent(evnt, params) {\n                const { editConfig } = props;\n                const { editStore } = reactData;\n                const { tooltipStore } = reactData;\n                const editOpts = computeEditOpts.value;\n                const { actived } = editStore;\n                const { row, column } = params;\n                const tdEl = evnt.currentTarget;\n                handleTargetEnterEvent(tooltipStore.column !== column || tooltipStore.row !== row);\n                // 单元格处于编辑状态时不触发提示框\n                if (column.editRender && isEnableConf(editConfig)) {\n                    // 如果是行编辑模式\n                    if (editOpts.mode === 'row' && actived.row === row) {\n                        return;\n                    }\n                    // 如果是单元格编辑模式\n                    if (actived.row === row && actived.column === column) {\n                        return;\n                    }\n                }\n                if (tooltipStore.column !== column || tooltipStore.row !== row || !tooltipStore.visible) {\n                    handleTooltip(evnt, tdEl, tdEl.querySelector('.vxe-cell--wrapper'), tdEl.querySelector('.vxe-cell--label') || tdEl.querySelector('.vxe-cell--wrapper'), params);\n                }\n            },\n            /**\n             * 触发表尾 tooltip 事件\n             */\n            triggerFooterTooltipEvent(evnt, params) {\n                const { column } = params;\n                const { tooltipStore } = reactData;\n                const tdEl = evnt.currentTarget;\n                handleTargetEnterEvent(tooltipStore.column !== column || !!tooltipStore.row);\n                if (tooltipStore.column !== column || !tooltipStore.visible) {\n                    handleTooltip(evnt, tdEl, tdEl.querySelector('.vxe-cell--wrapper'), tdEl.querySelector('.vxe-cell--label') || tdEl.querySelector('.vxe-cell--wrapper'), params);\n                }\n            },\n            handleTargetLeaveEvent() {\n                const tooltipOpts = computeTooltipOpts.value;\n                let $tooltip = refTooltip.value;\n                if ($tooltip && $tooltip.setActived) {\n                    $tooltip.setActived(false);\n                }\n                if (tooltipOpts.enterable) {\n                    internalData.tooltipTimeout = setTimeout(() => {\n                        $tooltip = refTooltip.value;\n                        if ($tooltip && $tooltip.isActived && !$tooltip.isActived()) {\n                            $xeTable.closeTooltip();\n                        }\n                    }, tooltipOpts.leaveDelay);\n                }\n                else {\n                    $xeTable.closeTooltip();\n                }\n            },\n            triggerHeaderCellClickEvent(evnt, params) {\n                const { _lastResizeTime } = internalData;\n                const sortOpts = computeSortOpts.value;\n                const columnOpts = computeColumnOpts.value;\n                const currentColumnOpts = computeCurrentColumnOpts.value;\n                const { column } = params;\n                const cell = evnt.currentTarget;\n                const triggerResizable = _lastResizeTime && _lastResizeTime > Date.now() - 300;\n                const triggerSort = getEventTargetNode(evnt, cell, 'vxe-cell--sort').flag;\n                const triggerFilter = getEventTargetNode(evnt, cell, 'vxe-cell--filter').flag;\n                if (sortOpts.trigger === 'cell' && !(triggerResizable || triggerSort || triggerFilter)) {\n                    $xeTable.triggerSortEvent(evnt, column, getNextSortOrder(column));\n                }\n                dispatchEvent('header-cell-click', Object.assign({ triggerResizable, triggerSort, triggerFilter, cell }, params), evnt);\n                if ((columnOpts.isCurrent || props.highlightCurrentColumn) && (!currentColumnOpts.trigger || ['header', 'default'].includes(currentColumnOpts.trigger))) {\n                    $xeTable.triggerCurrentColumnEvent(evnt, params);\n                }\n            },\n            triggerHeaderCellDblclickEvent(evnt, params) {\n                dispatchEvent('header-cell-dblclick', Object.assign({ cell: evnt.currentTarget }, params), evnt);\n            },\n            /**\n             * 列点击事件\n             * 如果是单击模式，则激活为编辑状态\n             * 如果是双击模式，则单击后选中状态\n             */\n            triggerCellClickEvent(evnt, params) {\n                const { highlightCurrentRow, highlightCurrentColumn, editConfig } = props;\n                const { editStore, isDragResize } = reactData;\n                if (isDragResize) {\n                    return;\n                }\n                const expandOpts = computeExpandOpts.value;\n                const editOpts = computeEditOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const radioOpts = computeRadioOpts.value;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const keyboardOpts = computeKeyboardOpts.value;\n                const rowOpts = computeRowOpts.value;\n                const columnOpts = computeColumnOpts.value;\n                const currentColumnOpts = computeCurrentColumnOpts.value;\n                const { actived, focused } = editStore;\n                const { row, column } = params;\n                const { type, treeNode } = column;\n                const isRadioType = type === 'radio';\n                const isCheckboxType = type === 'checkbox';\n                const isExpandType = type === 'expand';\n                const cell = evnt.currentTarget;\n                const triggerRadio = isRadioType && getEventTargetNode(evnt, cell, 'vxe-cell--radio').flag;\n                const triggerCheckbox = isCheckboxType && getEventTargetNode(evnt, cell, 'vxe-cell--checkbox').flag;\n                const triggerTreeNode = treeNode && getEventTargetNode(evnt, cell, 'vxe-tree--btn-wrapper').flag;\n                const triggerExpandNode = isExpandType && getEventTargetNode(evnt, cell, 'vxe-table--expanded').flag;\n                params = Object.assign({ cell, triggerRadio, triggerCheckbox, triggerTreeNode, triggerExpandNode }, params);\n                if (!triggerCheckbox && !triggerRadio) {\n                    // 如果是展开行\n                    if (!triggerExpandNode && (expandOpts.trigger === 'row' || (isExpandType && expandOpts.trigger === 'cell'))) {\n                        $xeTable.triggerRowExpandEvent(evnt, params);\n                    }\n                    // 如果是树形表格\n                    if ((treeOpts.trigger === 'row' || (treeNode && treeOpts.trigger === 'cell'))) {\n                        $xeTable.triggerTreeExpandEvent(evnt, params);\n                    }\n                }\n                // 如果点击了树节点\n                if (!triggerTreeNode) {\n                    if (!triggerExpandNode) {\n                        // 如果是当前行\n                        if (rowOpts.isCurrent || highlightCurrentRow) {\n                            if (!triggerCheckbox && !triggerRadio) {\n                                $xeTable.triggerCurrentRowEvent(evnt, params);\n                            }\n                        }\n                        // 如果是当前列\n                        if ((columnOpts.isCurrent || highlightCurrentColumn) && (!currentColumnOpts.trigger || ['cell', 'default'].includes(currentColumnOpts.trigger))) {\n                            if (!triggerCheckbox && !triggerRadio) {\n                                $xeTable.triggerCurrentColumnEvent(evnt, params);\n                            }\n                        }\n                        // 如果是单选框\n                        if (!triggerRadio && (radioOpts.trigger === 'row' || (isRadioType && radioOpts.trigger === 'cell'))) {\n                            $xeTable.triggerRadioRowEvent(evnt, params);\n                        }\n                        // 如果是复选框\n                        if (!triggerCheckbox && (checkboxOpts.trigger === 'row' || (isCheckboxType && checkboxOpts.trigger === 'cell'))) {\n                            $xeTable.handleToggleCheckRowEvent(evnt, params);\n                        }\n                    }\n                    // 如果设置了单元格选中功能，则不会使用点击事件去处理（只能支持双击模式）\n                    if (isEnableConf(editConfig)) {\n                        // 记录点击输入框聚焦状态\n                        if (keyboardOpts.arrowCursorLock && evnt && editOpts.mode === 'cell' && evnt.target && /^input|textarea$/i.test(evnt.target.tagName)) {\n                            focused.column = column;\n                            focused.row = row;\n                        }\n                        if (editOpts.trigger === 'manual') {\n                            if (actived.args && actived.row === row && column !== actived.column) {\n                                handleChangeCell(evnt, params);\n                            }\n                        }\n                        else if (!actived.args || row !== actived.row || column !== actived.column) {\n                            if (editOpts.trigger === 'click') {\n                                handleChangeCell(evnt, params);\n                            }\n                            else if (editOpts.trigger === 'dblclick') {\n                                if (editOpts.mode === 'row' && actived.row === row) {\n                                    handleChangeCell(evnt, params);\n                                }\n                            }\n                        }\n                    }\n                }\n                // 如果是双击编辑模式\n                if (isEnableConf(editConfig) && editOpts.trigger === 'dblclick') {\n                    if (actived.row && actived.column) {\n                        if (editOpts.mode === 'row') {\n                            if (!$xeTable.eqRow(actived.row, row)) {\n                                $xeTable.handleClearEdit(evnt);\n                            }\n                        }\n                        else if (editOpts.mode === 'cell') {\n                            if (!$xeTable.eqRow(actived.row, row) || actived.column.id !== column.id) {\n                                $xeTable.handleClearEdit(evnt);\n                            }\n                        }\n                    }\n                }\n                dispatchEvent('cell-click', params, evnt);\n            },\n            /**\n             * 列双击点击事件\n             * 如果是双击模式，则激活为编辑状态\n             */\n            triggerCellDblclickEvent(evnt, params) {\n                const { editConfig } = props;\n                const { editStore, isDragResize } = reactData;\n                if (isDragResize) {\n                    return;\n                }\n                const editOpts = computeEditOpts.value;\n                const { actived } = editStore;\n                const cell = evnt.currentTarget;\n                params = Object.assign({ cell }, params);\n                if (isEnableConf(editConfig) && editOpts.trigger === 'dblclick') {\n                    if (!actived.args || evnt.currentTarget !== actived.args.cell) {\n                        if (editOpts.mode === 'row') {\n                            checkValidate('blur')\n                                .catch((e) => e)\n                                .then(() => {\n                                $xeTable.handleEdit(params, evnt)\n                                    .then(() => checkValidate('change'))\n                                    .catch((e) => e);\n                            });\n                        }\n                        else if (editOpts.mode === 'cell') {\n                            $xeTable.handleEdit(params, evnt)\n                                .then(() => checkValidate('change'))\n                                .catch((e) => e);\n                        }\n                    }\n                }\n                dispatchEvent('cell-dblclick', params, evnt);\n            },\n            handleToggleCheckRowEvent(evnt, params) {\n                const { selectCheckboxMaps } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkField, trigger } = checkboxOpts;\n                const { row } = params;\n                if (trigger === 'manual') {\n                    return;\n                }\n                let checked = false;\n                if (checkField) {\n                    checked = !XEUtils.get(row, checkField);\n                }\n                else {\n                    checked = !selectCheckboxMaps[getRowid($xeTable, row)];\n                }\n                if (evnt) {\n                    $xeTable.triggerCheckRowEvent(evnt, params, checked);\n                }\n                else {\n                    $xeTable.handleBatchSelectRows([row], checked);\n                    $xeTable.checkSelectionStatus();\n                }\n            },\n            triggerCheckRowEvent(evnt, params, checked) {\n                const { row } = params;\n                const { afterFullData } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { checkMethod, trigger } = checkboxOpts;\n                if (trigger === 'manual') {\n                    return;\n                }\n                evnt.stopPropagation();\n                if (checkboxOpts.isShiftKey && evnt.shiftKey && !props.treeConfig) {\n                    const checkboxRecords = $xeTable.getCheckboxRecords();\n                    if (checkboxRecords.length) {\n                        const firstRow = checkboxRecords[0];\n                        const _rowIndex = $xeTable.getVTRowIndex(row);\n                        const _firstRowIndex = $xeTable.getVTRowIndex(firstRow);\n                        if (_rowIndex !== _firstRowIndex) {\n                            $xeTable.setAllCheckboxRow(false);\n                            const rangeRows = _rowIndex < _firstRowIndex ? afterFullData.slice(_rowIndex, _firstRowIndex + 1) : afterFullData.slice(_firstRowIndex, _rowIndex + 1);\n                            nextTick(() => {\n                                handleCheckedCheckboxRow(rangeRows, true, false);\n                            });\n                            dispatchEvent('checkbox-range-select', Object.assign({ rangeRecords: rangeRows }, params), evnt);\n                            return;\n                        }\n                    }\n                }\n                if (!checkMethod || checkMethod({ row })) {\n                    $xeTable.handleBatchSelectRows([row], checked);\n                    $xeTable.checkSelectionStatus();\n                    dispatchEvent('checkbox-change', Object.assign({\n                        records: () => $xeTable.getCheckboxRecords(),\n                        reserves: () => $xeTable.getCheckboxReserveRecords(),\n                        indeterminates: () => $xeTable.getCheckboxIndeterminateRecords(),\n                        checked\n                    }, params), evnt);\n                }\n            },\n            /**\n             * 多选，选中所有事件\n             */\n            triggerCheckAllEvent(evnt, value) {\n                const checkboxOpts = computeCheckboxOpts.value;\n                const { trigger } = checkboxOpts;\n                if (trigger === 'manual') {\n                    return;\n                }\n                if (evnt) {\n                    evnt.stopPropagation();\n                }\n                handleCheckAllEvent(evnt, value);\n            },\n            /**\n             * 单选，行选中事件\n             */\n            triggerRadioRowEvent(evnt, params) {\n                const { selectRadioRow: oldValue } = reactData;\n                const { row } = params;\n                const radioOpts = computeRadioOpts.value;\n                const { trigger } = radioOpts;\n                if (trigger === 'manual') {\n                    return;\n                }\n                evnt.stopPropagation();\n                let newValue = row;\n                let isChange = oldValue !== newValue;\n                if (isChange) {\n                    handleCheckedRadioRow(newValue);\n                }\n                else if (!radioOpts.strict) {\n                    isChange = oldValue === newValue;\n                    if (isChange) {\n                        newValue = null;\n                        tableMethods.clearRadioRow();\n                    }\n                }\n                if (isChange) {\n                    dispatchEvent('radio-change', Object.assign({ oldValue, newValue }, params), evnt);\n                }\n            },\n            triggerCurrentColumnEvent(evnt, params) {\n                const columnOpts = computeColumnOpts.value;\n                const { currentMethod } = columnOpts;\n                const { column } = params;\n                if (!currentMethod || currentMethod({ column })) {\n                    tableMethods.setCurrentColumn(column);\n                }\n            },\n            triggerCurrentRowEvent(evnt, params) {\n                const { currentRow: oldValue } = reactData;\n                const rowOpts = computeRowOpts.value;\n                const { currentMethod } = rowOpts;\n                const { row: newValue } = params;\n                const isChange = oldValue !== newValue;\n                if (!currentMethod || currentMethod({ row: newValue })) {\n                    tableMethods.setCurrentRow(newValue);\n                    if (isChange) {\n                        dispatchEvent('current-change', Object.assign({ oldValue, newValue }, params), evnt);\n                    }\n                }\n            },\n            /**\n             * 展开行事件\n             */\n            triggerRowExpandEvent(evnt, params) {\n                const { expandColumn: column } = reactData;\n                const { rowExpandLazyLoadedMaps } = internalData;\n                const expandOpts = computeExpandOpts.value;\n                const { row } = params;\n                const { lazy, trigger } = expandOpts;\n                if (trigger === 'manual') {\n                    return;\n                }\n                evnt.stopPropagation();\n                const rowid = getRowid($xeTable, row);\n                if (!lazy || !rowExpandLazyLoadedMaps[rowid]) {\n                    const expanded = !$xeTable.isRowExpandByRow(row);\n                    const columnIndex = $xeTable.getColumnIndex(column);\n                    const $columnIndex = $xeTable.getVMColumnIndex(column);\n                    $xeTable.setRowExpand(row, expanded);\n                    dispatchEvent('toggle-row-expand', {\n                        expanded,\n                        column,\n                        columnIndex,\n                        $columnIndex,\n                        row,\n                        rowIndex: $xeTable.getRowIndex(row),\n                        $rowIndex: $xeTable.getVMRowIndex(row)\n                    }, evnt);\n                }\n            },\n            /**\n             * 展开树节点事件\n             */\n            triggerTreeExpandEvent(evnt, params) {\n                const { treeExpandLazyLoadedMaps } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const { row, column } = params;\n                const { lazy, trigger } = treeOpts;\n                if (trigger === 'manual') {\n                    return;\n                }\n                evnt.stopPropagation();\n                const rowid = getRowid($xeTable, row);\n                if (!lazy || !treeExpandLazyLoadedMaps[rowid]) {\n                    const expanded = !$xeTable.isTreeExpandByRow(row);\n                    const columnIndex = $xeTable.getColumnIndex(column);\n                    const $columnIndex = $xeTable.getVMColumnIndex(column);\n                    $xeTable.setTreeExpand(row, expanded);\n                    dispatchEvent('toggle-tree-expand', { expanded, column, columnIndex, $columnIndex, row }, evnt);\n                }\n            },\n            handleColumnSortEvent(evnt, column) {\n                const { mouseConfig } = props;\n                const mouseOpts = computeMouseOpts.value;\n                const { field, sortable } = column;\n                if (sortable) {\n                    const params = { $table: $xeTable, $event: evnt, column, field, property: field, order: column.order, sortList: tableMethods.getSortColumns(), sortTime: column.sortTime };\n                    if (mouseConfig && mouseOpts.area && $xeTable.handleSortEvent) {\n                        $xeTable.handleSortEvent(evnt, params);\n                    }\n                    dispatchEvent('sort-change', params, evnt);\n                }\n            },\n            /**\n             * 点击排序事件\n             */\n            triggerSortEvent(evnt, column, order) {\n                const sortOpts = computeSortOpts.value;\n                const { multiple, allowClear } = sortOpts;\n                const { field, sortable } = column;\n                if (sortable) {\n                    if (!order || column.order === order) {\n                        if (allowClear) {\n                            tableMethods.clearSort(multiple ? column : null);\n                        }\n                    }\n                    else {\n                        tableMethods.sort({ field, order });\n                    }\n                    $xeTable.handleColumnSortEvent(evnt, column);\n                }\n            },\n            handleCellRuleUpdateStatus(type, cellParams, cellValue) {\n                const { validStore } = reactData;\n                const { row, column } = cellParams;\n                if ($xeTable.hasCellRules) {\n                    if ($xeTable.hasCellRules(type, row, column)) {\n                        const cell = $xeTable.getCellElement(row, column);\n                        if (cell) {\n                            const customVal = !XEUtils.isUndefined(cellValue);\n                            return $xeTable.validCellRules(type, row, column, cellValue)\n                                .then(() => {\n                                if (customVal && validStore.visible) {\n                                    setCellValue(row, column, cellValue);\n                                }\n                                $xeTable.clearValidate(row, column);\n                            })\n                                .catch(({ rule }) => {\n                                if (customVal) {\n                                    setCellValue(row, column, cellValue);\n                                }\n                                $xeTable.showValidTooltip({ rule, row, column, cell });\n                            });\n                        }\n                    }\n                }\n                return nextTick();\n            },\n            /**\n             * 表头单元格按下事件\n             */\n            triggerHeaderCellMousedownEvent(evnt, params) {\n                const { mouseConfig } = props;\n                const mouseOpts = computeMouseOpts.value;\n                const columnOpts = computeColumnOpts.value;\n                const columnDragOpts = computeColumnDragOpts.value;\n                const { trigger, isCrossDrag, isPeerDrag, disabledMethod } = columnDragOpts;\n                const cell = evnt.currentTarget;\n                const triggerInput = cell && cell.tagName && cell.tagName.toLowerCase() === 'input';\n                const triggerCheckbox = getEventTargetNode(evnt, cell, 'vxe-cell--checkbox').flag;\n                const triggerSort = getEventTargetNode(evnt, cell, 'vxe-cell--sort').flag;\n                const triggerFilter = getEventTargetNode(evnt, cell, 'vxe-cell--filter').flag;\n                let triggerDrag = false;\n                const isColDragCell = columnOpts.drag && trigger === 'cell';\n                if (!(triggerInput || triggerCheckbox || triggerSort || triggerFilter)) {\n                    const { column } = params;\n                    if (isColDragCell && !column.fixed && (isCrossDrag || isPeerDrag || !column.parentId) && !(disabledMethod && disabledMethod(params))) {\n                        triggerDrag = true;\n                        $xeTable.handleHeaderCellDragMousedownEvent(evnt, params);\n                    }\n                }\n                if (!triggerDrag && mouseConfig && mouseOpts.area && $xeTable.handleHeaderCellAreaEvent) {\n                    $xeTable.handleHeaderCellAreaEvent(evnt, Object.assign({ cell, triggerSort, triggerFilter }, params));\n                }\n                $xeTable.focus();\n                if ($xeTable.closeMenu) {\n                    $xeTable.closeMenu();\n                }\n            },\n            /**\n             * 单元格按下事件\n             */\n            triggerCellMousedownEvent(evnt, params) {\n                const { column } = params;\n                const { type, treeNode } = column;\n                const isRadioType = type === 'radio';\n                const isCheckboxType = type === 'checkbox';\n                const isExpandType = type === 'expand';\n                const rowOpts = computeRowOpts.value;\n                const rowDragOpts = computeRowDragOpts.value;\n                const { trigger, isCrossDrag, isPeerDrag, disabledMethod } = rowDragOpts;\n                const cell = evnt.currentTarget;\n                params.cell = cell;\n                const triggerInput = cell && cell.tagName && cell.tagName.toLowerCase() === 'input';\n                const triggerRadio = isRadioType && getEventTargetNode(evnt, cell, 'vxe-cell--radio').flag;\n                const triggerCheckbox = isCheckboxType && getEventTargetNode(evnt, cell, 'vxe-cell--checkbox').flag;\n                const triggerTreeNode = treeNode && getEventTargetNode(evnt, cell, 'vxe-tree--btn-wrapper').flag;\n                const triggerExpandNode = isExpandType && getEventTargetNode(evnt, cell, 'vxe-table--expanded').flag;\n                let isColDragCell = false;\n                if (rowOpts.drag) {\n                    isColDragCell = trigger === 'row' || (column.dragSort && trigger === 'cell');\n                }\n                let triggerDrag = false;\n                if (!(triggerInput || triggerRadio || triggerCheckbox || triggerTreeNode || triggerExpandNode)) {\n                    if (isColDragCell && (isCrossDrag || isPeerDrag || !params.level) && !(disabledMethod && disabledMethod(params))) {\n                        triggerDrag = true;\n                        $xeTable.handleCellDragMousedownEvent(evnt, params);\n                    }\n                }\n                if (!triggerDrag && $xeTable.handleCellMousedownEvent) {\n                    $xeTable.handleCellMousedownEvent(evnt, params);\n                }\n                $xeTable.focus();\n                $xeTable.closeFilter();\n                if ($xeTable.closeMenu) {\n                    $xeTable.closeMenu();\n                }\n            },\n            triggerCellMouseupEvent() {\n                clearDragStatus();\n            },\n            /**\n             * 行拖拽\n             */\n            handleRowDragDragstartEvent(evnt) {\n                if (evnt.dataTransfer) {\n                    evnt.dataTransfer.setDragImage(getTpImg(), 0, 0);\n                }\n            },\n            handleRowDragSwapEvent(evnt, isSyncRow, dragRow, prevDragRow, prevDragPos, prevDragToChild) {\n                const { treeConfig, dragConfig } = props;\n                const rowDragOpts = computeRowDragOpts.value;\n                const { afterFullData, tableFullData, fullAllDataRowIdData } = internalData;\n                const { isPeerDrag, isCrossDrag, isSelfToChildDrag, dragEndMethod, dragToChildMethod } = rowDragOpts;\n                const treeOpts = computeTreeOpts.value;\n                const { transform, rowField, mapChildrenField, parentField } = treeOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const dEndMethod = dragEndMethod || (dragConfig ? dragConfig.dragEndMethod : null);\n                const dragOffsetIndex = prevDragPos === 'bottom' ? 1 : 0;\n                const errRest = {\n                    status: false\n                };\n                if (prevDragRow && dragRow) {\n                    // 判断是否有拖动\n                    if (prevDragRow !== dragRow) {\n                        const dragParams = {\n                            oldRow: dragRow,\n                            newRow: prevDragRow,\n                            dragRow,\n                            dragPos: prevDragPos,\n                            dragToChild: !!prevDragToChild,\n                            offsetIndex: dragOffsetIndex\n                        };\n                        const isDragToChildFlag = isSelfToChildDrag && dragToChildMethod ? dragToChildMethod(dragParams) : prevDragToChild;\n                        return Promise.resolve(dEndMethod ? dEndMethod(dragParams) : true).then((status) => {\n                            if (!status) {\n                                return errRest;\n                            }\n                            let oafIndex = -1;\n                            let nafIndex = -1;\n                            // 如果为树结构\n                            if (treeConfig) {\n                                if (transform) {\n                                    // 移出源位置\n                                    const oldRowid = getRowid($xeTable, dragRow);\n                                    const oldRest = fullAllDataRowIdData[oldRowid];\n                                    const newRowid = getRowid($xeTable, prevDragRow);\n                                    const newRest = fullAllDataRowIdData[newRowid];\n                                    if (oldRest && newRest) {\n                                        const { level: oldLevel } = oldRest;\n                                        const { level: newLevel } = newRest;\n                                        const oldAllMaps = {};\n                                        XEUtils.eachTree([dragRow], item => {\n                                            oldAllMaps[getRowid($xeTable, item)] = item;\n                                        }, { children: mapChildrenField });\n                                        let isSelfToChildStatus = false;\n                                        if (oldLevel && newLevel) {\n                                            // 子到子\n                                            if (isPeerDrag && !isCrossDrag) {\n                                                if (oldRest.row[parentField] !== newRest.row[parentField]) {\n                                                    // 非同级\n                                                    return errRest;\n                                                }\n                                            }\n                                            else {\n                                                if (!isCrossDrag) {\n                                                    return errRest;\n                                                }\n                                                if (oldAllMaps[newRowid]) {\n                                                    isSelfToChildStatus = true;\n                                                    if (!(isCrossDrag && isSelfToChildDrag)) {\n                                                        if (VxeUI.modal) {\n                                                            VxeUI.modal.message({\n                                                                status: 'error',\n                                                                content: getI18n('vxe.error.treeDragChild')\n                                                            });\n                                                        }\n                                                        return errRest;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else if (oldLevel) {\n                                            // 子到根\n                                            if (!isCrossDrag) {\n                                                return errRest;\n                                            }\n                                        }\n                                        else if (newLevel) {\n                                            // 根到子\n                                            if (!isCrossDrag) {\n                                                return errRest;\n                                            }\n                                            if (oldAllMaps[newRowid]) {\n                                                isSelfToChildStatus = true;\n                                                if (!(isCrossDrag && isSelfToChildDrag)) {\n                                                    if (VxeUI.modal) {\n                                                        VxeUI.modal.message({\n                                                            status: 'error',\n                                                            content: getI18n('vxe.error.treeDragChild')\n                                                        });\n                                                    }\n                                                    return errRest;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            // 根到根\n                                        }\n                                        const fullList = XEUtils.toTreeArray(internalData.afterTreeFullData, {\n                                            key: rowField,\n                                            parentKey: parentField,\n                                            children: mapChildrenField\n                                        });\n                                        // 移出\n                                        const otfIndex = $xeTable.findRowIndexOf(fullList, dragRow);\n                                        fullList.splice(otfIndex, 1);\n                                        // 插入\n                                        const ptfIndex = $xeTable.findRowIndexOf(fullList, prevDragRow);\n                                        const ntfIndex = ptfIndex + dragOffsetIndex;\n                                        fullList.splice(ntfIndex, 0, dragRow);\n                                        // 改变层级\n                                        if (isSelfToChildStatus && (isCrossDrag && isSelfToChildDrag)) {\n                                            XEUtils.each(dragRow[childrenField], childRow => {\n                                                childRow[parentField] = dragRow[parentField];\n                                            });\n                                        }\n                                        dragRow[parentField] = isDragToChildFlag ? prevDragRow[rowField] : prevDragRow[parentField];\n                                        internalData.tableFullTreeData = XEUtils.toArrayTree(fullList, {\n                                            key: rowField,\n                                            parentKey: parentField,\n                                            children: childrenField,\n                                            mapChildren: mapChildrenField\n                                        });\n                                    }\n                                }\n                            }\n                            else {\n                                // 移出\n                                oafIndex = $xeTable.findRowIndexOf(afterFullData, dragRow);\n                                const otfIndex = $xeTable.findRowIndexOf(tableFullData, dragRow);\n                                afterFullData.splice(oafIndex, 1);\n                                tableFullData.splice(otfIndex, 1);\n                                // 插入\n                                const pafIndex = $xeTable.findRowIndexOf(afterFullData, prevDragRow);\n                                const ptfIndex = $xeTable.findRowIndexOf(tableFullData, prevDragRow);\n                                nafIndex = pafIndex + dragOffsetIndex;\n                                const ntfIndex = ptfIndex + dragOffsetIndex;\n                                afterFullData.splice(nafIndex, 0, dragRow);\n                                tableFullData.splice(ntfIndex, 0, dragRow);\n                            }\n                            reactData.isDragRowMove = true;\n                            $xeTable.handleTableData(treeConfig && transform);\n                            $xeTable.cacheRowMap(false);\n                            updateScrollYStatus();\n                            if (!(treeConfig && transform)) {\n                                $xeTable.updateAfterDataIndex();\n                            }\n                            $xeTable.checkSelectionStatus();\n                            if (reactData.scrollYLoad) {\n                                $xeTable.updateScrollYSpace();\n                            }\n                            if (evnt) {\n                                dispatchEvent('row-dragend', {\n                                    oldRow: dragRow,\n                                    newRow: prevDragRow,\n                                    dragRow,\n                                    dragPos: prevDragPos,\n                                    dragToChild: isDragToChildFlag,\n                                    offsetIndex: dragOffsetIndex,\n                                    _index: {\n                                        newIndex: nafIndex,\n                                        oldIndex: oafIndex\n                                    }\n                                }, evnt);\n                            }\n                            return nextTick().then(() => {\n                                $xeTable.updateCellAreas();\n                                $xeTable.recalculate();\n                            }).then(() => {\n                                return {\n                                    status: true\n                                };\n                            });\n                        }).catch(() => {\n                            return errRest;\n                        });\n                    }\n                }\n                return Promise.resolve(errRest);\n            },\n            handleRowDragDragendEvent(evnt) {\n                const { treeConfig } = props;\n                const { fullAllDataRowIdData, prevDragToChild } = internalData;\n                const { dragRow } = reactData;\n                const treeOpts = computeTreeOpts.value;\n                const { lazy } = treeOpts;\n                const hasChildField = treeOpts.hasChild || treeOpts.hasChildField;\n                const { prevDragRow, prevDragPos } = internalData;\n                if (treeConfig && lazy && prevDragToChild) {\n                    // 懒加载\n                    const newRowid = getRowid($xeTable, prevDragRow);\n                    const rowRest = fullAllDataRowIdData[newRowid];\n                    if (prevDragRow[hasChildField]) {\n                        if (rowRest && rowRest.treeLoaded) {\n                            $xeTable.handleRowDragSwapEvent(evnt, true, dragRow, prevDragRow, prevDragPos, prevDragToChild);\n                        }\n                    }\n                    else {\n                        $xeTable.handleRowDragSwapEvent(evnt, true, dragRow, prevDragRow, prevDragPos, prevDragToChild);\n                    }\n                }\n                else {\n                    $xeTable.handleRowDragSwapEvent(evnt, true, dragRow, prevDragRow, prevDragPos, prevDragToChild);\n                }\n                hideDropTip();\n                clearRowDropOrigin();\n                internalData.prevDragToChild = false;\n                reactData.dragRow = null;\n                reactData.dragCol = null;\n                setTimeout(() => {\n                    reactData.isDragRowMove = false;\n                }, 500);\n            },\n            handleRowDragDragoverEvent(evnt) {\n                const { treeConfig } = props;\n                const { fullAllDataRowIdData } = internalData;\n                const { dragRow } = reactData;\n                const treeOpts = computeTreeOpts.value;\n                const { lazy, transform, parentField } = treeOpts;\n                const hasChildField = treeOpts.hasChild || treeOpts.hasChildField;\n                const rowDragOpts = computeRowDragOpts.value;\n                const { isPeerDrag, isCrossDrag, isToChildDrag } = rowDragOpts;\n                if (!dragRow) {\n                    evnt.preventDefault();\n                    return;\n                }\n                const hasCtrlKey = evnt.ctrlKey;\n                const trEl = evnt.currentTarget;\n                const rowid = trEl.getAttribute('rowid') || '';\n                const rest = fullAllDataRowIdData[rowid];\n                if (rest) {\n                    const row = rest.row;\n                    const rowid = getRowid($xeTable, row);\n                    const rowRest = fullAllDataRowIdData[rowid];\n                    evnt.preventDefault();\n                    const { dragRow } = reactData;\n                    const offsetY = evnt.clientY - trEl.getBoundingClientRect().y;\n                    const dragPos = offsetY < trEl.clientHeight / 2 ? 'top' : 'bottom';\n                    internalData.prevDragToChild = !!(treeConfig && transform && (isCrossDrag && isToChildDrag) && hasCtrlKey);\n                    internalData.prevDragRow = row;\n                    internalData.prevDragPos = dragPos;\n                    if ($xeTable.eqRow(dragRow, row) ||\n                        (hasCtrlKey && treeConfig && lazy && row[hasChildField] && rowRest && !rowRest.treeLoaded) ||\n                        (!isCrossDrag && treeConfig && transform && (isPeerDrag ? dragRow[parentField] !== row[parentField] : rest.level))) {\n                        showDropTip(evnt, trEl, null, false, dragPos);\n                        return;\n                    }\n                    showDropTip(evnt, trEl, null, true, dragPos);\n                    dispatchEvent('row-dragover', {\n                        oldRow: dragRow,\n                        targetRow: row,\n                        dragPos\n                    }, evnt);\n                }\n            },\n            handleCellDragMousedownEvent(evnt, params) {\n                var _a;\n                evnt.stopPropagation();\n                const { dragConfig } = props;\n                const rowDragOpts = computeRowDragOpts.value;\n                const { trigger, dragStartMethod } = rowDragOpts;\n                const { row } = params;\n                const dragEl = evnt.currentTarget;\n                const tdEl = trigger === 'cell' || trigger === 'row' ? dragEl : (_a = dragEl.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement;\n                const trEl = tdEl.parentElement;\n                const dStartMethod = dragStartMethod || (dragConfig ? dragConfig.dragStartMethod : null);\n                clearRowDropOrigin();\n                if (dStartMethod && !dStartMethod(params)) {\n                    trEl.draggable = false;\n                    reactData.dragRow = null;\n                    reactData.dragCol = null;\n                    hideDropTip();\n                    return;\n                }\n                reactData.dragRow = row;\n                reactData.dragCol = null;\n                trEl.draggable = true;\n                updateRowDropOrigin(row);\n                updateRowDropTipContent(tdEl);\n                dispatchEvent('row-dragstart', params, evnt);\n            },\n            handleCellDragMouseupEvent() {\n                clearDragStatus();\n            },\n            /**\n             * 列拖拽\n             */\n            handleHeaderCellDragDragstartEvent(evnt) {\n                if (evnt.dataTransfer) {\n                    evnt.dataTransfer.setDragImage(getTpImg(), 0, 0);\n                }\n            },\n            handleColDragSwapColumn() {\n                handleUpdateColumn();\n                parseColumns(false).then(() => {\n                    $xeTable.updateCellAreas();\n                    $xeTable.saveCustomStore('update:sort');\n                });\n            },\n            handleColDragSwapEvent(evnt, isSyncColumn, dragCol, prevDragCol, prevDragPos, prevDragToChild) {\n                const { mouseConfig } = props;\n                const columnDragOpts = computeColumnDragOpts.value;\n                const { isPeerDrag, isCrossDrag, isSelfToChildDrag, isToChildDrag, dragEndMethod, dragToChildMethod } = columnDragOpts;\n                const { collectColumn } = internalData;\n                const dragOffsetIndex = prevDragPos === 'right' ? 1 : 0;\n                const errRest = {\n                    status: false\n                };\n                if (prevDragCol && dragCol) {\n                    // 判断是否有拖动\n                    if (prevDragCol !== dragCol) {\n                        const dragColumn = dragCol;\n                        const newColumn = prevDragCol;\n                        const dragParams = {\n                            oldColumn: dragColumn,\n                            newColumn,\n                            dragColumn,\n                            dragPos: prevDragPos,\n                            dragToChild: !!prevDragToChild,\n                            offsetIndex: dragOffsetIndex\n                        };\n                        const isDragToChildFlag = isSelfToChildDrag && dragToChildMethod ? dragToChildMethod(dragParams) : prevDragToChild;\n                        return Promise.resolve(dragEndMethod ? dragEndMethod(dragParams) : true).then((status) => {\n                            if (!status) {\n                                return errRest;\n                            }\n                            let oafIndex = -1;\n                            let nafIndex = -1;\n                            const oldAllMaps = {};\n                            XEUtils.eachTree([dragColumn], column => {\n                                oldAllMaps[column.id] = column;\n                            });\n                            let isSelfToChildStatus = false;\n                            if (dragColumn.parentId && newColumn.parentId) {\n                                // 子到子\n                                if (isPeerDrag && !isCrossDrag) {\n                                    if (dragColumn.parentId !== newColumn.parentId) {\n                                        // 非同级\n                                        return errRest;\n                                    }\n                                }\n                                else {\n                                    if (!isCrossDrag) {\n                                        return errRest;\n                                    }\n                                    if (oldAllMaps[newColumn.id]) {\n                                        isSelfToChildStatus = true;\n                                        if (!(isCrossDrag && isSelfToChildDrag)) {\n                                            if (VxeUI.modal) {\n                                                VxeUI.modal.message({\n                                                    status: 'error',\n                                                    content: getI18n('vxe.error.treeDragChild')\n                                                });\n                                            }\n                                            return errRest;\n                                        }\n                                    }\n                                }\n                            }\n                            else if (dragColumn.parentId) {\n                                // 子到根\n                                if (!isCrossDrag) {\n                                    return errRest;\n                                }\n                            }\n                            else if (newColumn.parentId) {\n                                // 根到子\n                                if (!isCrossDrag) {\n                                    return errRest;\n                                }\n                                if (oldAllMaps[newColumn.id]) {\n                                    isSelfToChildStatus = true;\n                                    if (!(isCrossDrag && isSelfToChildDrag)) {\n                                        if (VxeUI.modal) {\n                                            VxeUI.modal.message({\n                                                status: 'error',\n                                                content: getI18n('vxe.error.treeDragChild')\n                                            });\n                                        }\n                                        return errRest;\n                                    }\n                                }\n                            }\n                            else {\n                                // 根到根\n                            }\n                            const oldewMatchRest = XEUtils.findTree(collectColumn, item => item.id === dragColumn.id);\n                            // 改变层级\n                            if (isSelfToChildStatus && (isCrossDrag && isSelfToChildDrag)) {\n                                if (oldewMatchRest) {\n                                    const { items: oCols, index: oIndex } = oldewMatchRest;\n                                    const childList = dragColumn.children || [];\n                                    childList.forEach(column => {\n                                        column.parentId = dragColumn.parentId;\n                                    });\n                                    oCols.splice(oIndex, 1, ...childList);\n                                    dragColumn.children = [];\n                                }\n                            }\n                            else {\n                                if (oldewMatchRest) {\n                                    const { items: oCols, index: oIndex, parent: oParent } = oldewMatchRest;\n                                    oCols.splice(oIndex, 1);\n                                    if (!oParent) {\n                                        oafIndex = oIndex;\n                                    }\n                                }\n                            }\n                            const newMatchRest = XEUtils.findTree(collectColumn, item => item.id === newColumn.id);\n                            if (newMatchRest) {\n                                const { items: nCols, index: nIndex, parent: nParent } = newMatchRest;\n                                // 转子级\n                                if ((isCrossDrag && isToChildDrag) && isDragToChildFlag) {\n                                    dragColumn.parentId = newColumn.id;\n                                    newColumn.children = (newColumn.children || []).concat([dragColumn]);\n                                }\n                                else {\n                                    dragColumn.parentId = newColumn.parentId;\n                                    nCols.splice(nIndex + dragOffsetIndex, 0, dragColumn);\n                                }\n                                if (!nParent) {\n                                    nafIndex = nIndex;\n                                }\n                            }\n                            XEUtils.eachTree(collectColumn, (column, index, items, path, parentColumn) => {\n                                if (!parentColumn) {\n                                    const sortIndex = index + 1;\n                                    column.renderSortNumber = sortIndex;\n                                }\n                            });\n                            reactData.isDragColMove = true;\n                            if (mouseConfig) {\n                                if ($xeTable.clearSelected) {\n                                    $xeTable.clearSelected();\n                                }\n                                if ($xeTable.clearCellAreas) {\n                                    $xeTable.clearCellAreas();\n                                    $xeTable.clearCopyCellArea();\n                                }\n                            }\n                            if (evnt) {\n                                dispatchEvent('column-dragend', {\n                                    oldColumn: dragColumn,\n                                    newColumn,\n                                    dragColumn,\n                                    dragPos: prevDragPos,\n                                    dragToChild: isDragToChildFlag,\n                                    offsetIndex: dragOffsetIndex,\n                                    _index: {\n                                        newIndex: nafIndex,\n                                        oldIndex: oafIndex\n                                    }\n                                }, evnt);\n                            }\n                            if (isSyncColumn) {\n                                $xeTable.handleColDragSwapColumn();\n                            }\n                            return {\n                                status: true\n                            };\n                        }).catch(() => {\n                            return errRest;\n                        });\n                    }\n                }\n                return Promise.resolve(errRest);\n            },\n            handleHeaderCellDragDragendEvent(evnt) {\n                const { dragCol } = reactData;\n                const { prevDragCol, prevDragPos, prevDragToChild } = internalData;\n                $xeTable.handleColDragSwapEvent(evnt, true, dragCol, prevDragCol, prevDragPos, prevDragToChild);\n                hideDropTip();\n                clearColDropOrigin();\n                internalData.prevDragToChild = false;\n                reactData.dragRow = null;\n                reactData.dragCol = null;\n                setTimeout(() => {\n                    reactData.isDragColMove = false;\n                    $xeTable.recalculate().then(() => {\n                        loadScrollXData();\n                    });\n                }, 500);\n            },\n            handleHeaderCellDragDragoverEvent(evnt) {\n                const { dragCol } = reactData;\n                const columnDragOpts = computeColumnDragOpts.value;\n                const { isToChildDrag, isPeerDrag, isCrossDrag } = columnDragOpts;\n                if (!dragCol) {\n                    evnt.preventDefault();\n                    return;\n                }\n                const hasCtrlKey = evnt.ctrlKey;\n                const thEl = evnt.currentTarget;\n                const colid = thEl.getAttribute('colid');\n                const column = $xeTable.getColumnById(colid);\n                if (column) {\n                    evnt.preventDefault();\n                    const { clientX } = evnt;\n                    const offsetX = clientX - thEl.getBoundingClientRect().x;\n                    const dragPos = offsetX < thEl.clientWidth / 2 ? 'left' : 'right';\n                    internalData.prevDragToChild = !!((isCrossDrag && isToChildDrag) && hasCtrlKey);\n                    internalData.prevDragCol = column;\n                    internalData.prevDragPos = dragPos;\n                    if (column.fixed ||\n                        (dragCol && dragCol.id === column.id) ||\n                        (!isCrossDrag && (isPeerDrag ? dragCol.parentId !== column.parentId : column.parentId))) {\n                        showDropTip(evnt, null, thEl, false, dragPos);\n                        return;\n                    }\n                    showDropTip(evnt, null, thEl, true, dragPos);\n                    dispatchEvent('column-dragover', {\n                        oldColumn: dragCol,\n                        targetColumn: column,\n                        dragPos\n                    }, evnt);\n                    // 边缘滚动\n                    const el = refElem.value;\n                    if (!el) {\n                        return;\n                    }\n                    const xHandleEl = refScrollXHandleElem.value;\n                    const tableBody = refTableBody.value;\n                    const tableBodyElem = tableBody ? tableBody.$el : null;\n                    const scrollTargetEl = xHandleEl || tableBodyElem;\n                    if (scrollTargetEl) {\n                        const wrapperRect = el.getBoundingClientRect();\n                        const tableWrapperWidth = el.clientWidth;\n                        const leftContainerElem = refLeftContainer.value;\n                        const leftContainerWidth = leftContainerElem ? leftContainerElem.clientWidth : 0;\n                        const rightContainerElem = refRightContainer.value;\n                        const rightContainerWidth = rightContainerElem ? rightContainerElem.clientWidth : 0;\n                        const srartX = wrapperRect.x + leftContainerWidth;\n                        const endX = wrapperRect.x + tableWrapperWidth - rightContainerWidth;\n                        const distSize = 28;\n                        const startDistSize = clientX - srartX;\n                        const endDistSize = endX - clientX;\n                        if (startDistSize > 0 && startDistSize <= distSize) {\n                            const scrollRatio = Math.floor(tableWrapperWidth / (startDistSize > distSize / 2 ? 240 : 120));\n                            scrollTargetEl.scrollLeft -= scrollRatio * (distSize - startDistSize);\n                        }\n                        else if (endDistSize > 0 && endDistSize <= distSize) {\n                            const scrollRatio = Math.floor(tableWrapperWidth / (endDistSize > distSize / 2 ? 240 : 120));\n                            scrollTargetEl.scrollLeft += scrollRatio * (distSize - endDistSize);\n                        }\n                    }\n                }\n            },\n            handleHeaderCellDragMousedownEvent(evnt, params) {\n                var _a;\n                evnt.stopPropagation();\n                const columnDragOpts = computeColumnDragOpts.value;\n                const { trigger, dragStartMethod } = columnDragOpts;\n                const { column } = params;\n                const dragEl = evnt.currentTarget;\n                const thEl = trigger === 'cell' ? dragEl : (_a = dragEl.parentElement) === null || _a === void 0 ? void 0 : _a.parentElement;\n                reactData.isDragColMove = false;\n                clearColDropOrigin();\n                if (dragStartMethod && !dragStartMethod(params)) {\n                    thEl.draggable = false;\n                    reactData.dragRow = null;\n                    reactData.dragCol = null;\n                    hideDropTip();\n                    return;\n                }\n                reactData.dragCol = column;\n                reactData.dragRow = null;\n                thEl.draggable = true;\n                updateColDropOrigin(column);\n                updateColDropTipContent(thEl);\n                dispatchEvent('column-dragstart', params, evnt);\n            },\n            handleHeaderCellDragMouseupEvent() {\n                clearColDropOrigin();\n                hideDropTip();\n                reactData.dragRow = null;\n                reactData.dragCol = null;\n                reactData.isDragColMove = false;\n            },\n            handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, params) {\n                const { highlightHoverRow } = props;\n                const { lastScrollLeft, lastScrollTop } = internalData;\n                const xHandleEl = refScrollXHandleElem.value;\n                const yHandleEl = refScrollYHandleElem.value;\n                if (!xHandleEl || !yHandleEl) {\n                    return;\n                }\n                const rowOpts = computeRowOpts.value;\n                const validTip = refValidTooltip.value;\n                const tooltip = refTooltip.value;\n                const bodyHeight = yHandleEl.clientHeight;\n                const bodyWidth = xHandleEl.clientWidth;\n                const scrollHeight = yHandleEl.scrollHeight;\n                const scrollWidth = xHandleEl.scrollWidth;\n                let isTop = false;\n                let isBottom = false;\n                let isLeft = false;\n                let isRight = false;\n                let direction = '';\n                let isTopBoundary = false;\n                let isBottomBoundary = false;\n                let isLeftBoundary = false;\n                let isRightBoundary = false;\n                if (isRollX) {\n                    const xThreshold = computeScrollXThreshold.value;\n                    isLeft = scrollLeft <= 0;\n                    if (!isLeft) {\n                        isRight = scrollLeft + bodyWidth >= scrollWidth;\n                    }\n                    if (scrollLeft > lastScrollLeft) {\n                        direction = 'right';\n                        if (scrollLeft + bodyWidth >= scrollWidth - xThreshold) {\n                            isRightBoundary = true;\n                        }\n                    }\n                    else {\n                        direction = 'left';\n                        if (scrollLeft <= xThreshold) {\n                            isLeftBoundary = true;\n                        }\n                    }\n                    $xeTable.checkScrolling();\n                    internalData.lastScrollLeft = scrollLeft;\n                }\n                if (isRollY) {\n                    const yThreshold = computeScrollYThreshold.value;\n                    isTop = scrollTop <= 0;\n                    if (!isTop) {\n                        isBottom = scrollTop + bodyHeight >= scrollHeight;\n                    }\n                    if (scrollTop > lastScrollTop) {\n                        direction = 'bottom';\n                        if (scrollTop + bodyHeight >= scrollHeight - yThreshold) {\n                            isBottomBoundary = true;\n                        }\n                    }\n                    else {\n                        direction = 'top';\n                        if (scrollTop <= yThreshold) {\n                            isTopBoundary = true;\n                        }\n                    }\n                    internalData.lastScrollTop = scrollTop;\n                }\n                reactData.isDragColMove = false;\n                reactData.isDragRowMove = false;\n                reactData.lastScrollTime = Date.now();\n                const evntParams = Object.assign({ scrollTop,\n                    scrollLeft,\n                    bodyHeight,\n                    bodyWidth,\n                    scrollHeight,\n                    scrollWidth, isX: isRollX, isY: isRollY, isTop,\n                    isBottom,\n                    isLeft,\n                    isRight,\n                    direction }, params);\n                updateRowExpandStyle();\n                checkLastSyncScroll(isRollX, isRollY);\n                if (rowOpts.isHover || highlightHoverRow) {\n                    $xeTable.clearHoverRow();\n                }\n                if (validTip && validTip.reactData.visible) {\n                    validTip.close();\n                }\n                if (tooltip && tooltip.reactData.visible) {\n                    tooltip.close();\n                }\n                if (isBottomBoundary || isTopBoundary || isRightBoundary || isLeftBoundary) {\n                    dispatchEvent('scroll-boundary', evntParams, evnt);\n                }\n                dispatchEvent('scroll', evntParams, evnt);\n            },\n            /**\n             * 横向 X 可视渲染事件处理\n             */\n            triggerScrollXEvent() {\n                const virtualXOpts = computeVirtualXOpts.value;\n                if (virtualXOpts.immediate) {\n                    loadScrollXData();\n                }\n                else {\n                    lazyScrollXData();\n                }\n            },\n            /**\n             * 纵向 Y 可视渲染事件处理\n             */\n            triggerScrollYEvent() {\n                const virtualYOpts = computeVirtualYOpts.value;\n                if (virtualYOpts.immediate) {\n                    loadScrollYData();\n                }\n                else {\n                    lazyScrollYData();\n                }\n            },\n            triggerBodyScrollEvent(evnt, fixedType) {\n                const { scrollYLoad, scrollXLoad } = reactData;\n                const { elemStore, intoRunScroll, lastScrollTop, lastScrollLeft, inWheelScroll, inVirtualScroll, inHeaderScroll, inBodyScroll, scrollRenderType, inFooterScroll } = internalData;\n                if (inWheelScroll || inVirtualScroll || inHeaderScroll || inFooterScroll) {\n                    return;\n                }\n                const xHandleEl = refScrollXHandleElem.value;\n                const yHandleEl = refScrollYHandleElem.value;\n                const leftScrollElem = getRefElem(elemStore['left-body-scroll']);\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                const rightScrollElem = getRefElem(elemStore['right-body-scroll']);\n                const headerScrollElem = getRefElem(elemStore['main-header-scroll']);\n                const footerScrollElem = getRefElem(elemStore['main-footer-scroll']);\n                const rowExpandEl = refRowExpandElem.value;\n                if (intoRunScroll) {\n                    return;\n                }\n                if (!bodyScrollElem) {\n                    return;\n                }\n                if (!xHandleEl) {\n                    return;\n                }\n                if (!yHandleEl) {\n                    return;\n                }\n                if (inBodyScroll) {\n                    if (scrollRenderType !== fixedType) {\n                        return;\n                    }\n                }\n                let scrollTop = yHandleEl.scrollTop;\n                let scrollLeft = xHandleEl.scrollLeft;\n                if (leftScrollElem && fixedType === 'left') {\n                    scrollTop = leftScrollElem.scrollTop;\n                }\n                else if (rightScrollElem && fixedType === 'right') {\n                    scrollTop = rightScrollElem.scrollTop;\n                }\n                else {\n                    scrollTop = bodyScrollElem.scrollTop;\n                    scrollLeft = bodyScrollElem.scrollLeft;\n                }\n                const isRollX = scrollLeft !== lastScrollLeft;\n                const isRollY = scrollTop !== lastScrollTop;\n                internalData.inBodyScroll = true;\n                internalData.scrollRenderType = fixedType;\n                if (isRollY) {\n                    if (fixedType === 'left') {\n                        setScrollTop(bodyScrollElem, scrollTop);\n                        setScrollTop(rightScrollElem, scrollTop);\n                    }\n                    else if (fixedType === 'right') {\n                        setScrollTop(bodyScrollElem, scrollTop);\n                        setScrollTop(leftScrollElem, scrollTop);\n                    }\n                    else {\n                        setScrollTop(leftScrollElem, scrollTop);\n                        setScrollTop(rightScrollElem, scrollTop);\n                    }\n                    setScrollTop(yHandleEl, scrollTop);\n                    setScrollTop(rowExpandEl, scrollTop);\n                    if (scrollYLoad) {\n                        $xeTable.triggerScrollYEvent(evnt);\n                    }\n                }\n                if (isRollX) {\n                    setScrollLeft(xHandleEl, scrollLeft);\n                    setScrollLeft(headerScrollElem, scrollLeft);\n                    setScrollLeft(footerScrollElem, scrollLeft);\n                    if (scrollXLoad) {\n                        $xeTable.triggerScrollXEvent(evnt);\n                    }\n                }\n                $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {\n                    type: 'body',\n                    fixed: fixedType\n                });\n            },\n            triggerHeaderScrollEvent(evnt, fixedType) {\n                const { scrollXLoad } = reactData;\n                const { elemStore, intoRunScroll, inWheelScroll, inVirtualScroll, inBodyScroll, inFooterScroll } = internalData;\n                if (inWheelScroll || inVirtualScroll || inBodyScroll || inFooterScroll) {\n                    return;\n                }\n                const yHandleEl = refScrollYHandleElem.value;\n                const xHandleEl = refScrollXHandleElem.value;\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                const headerScrollElem = getRefElem(elemStore['main-header-scroll']);\n                const footerScrollElem = getRefElem(elemStore['main-footer-scroll']);\n                if (intoRunScroll) {\n                    return;\n                }\n                if (!headerScrollElem) {\n                    return;\n                }\n                if (!xHandleEl) {\n                    return;\n                }\n                if (!yHandleEl) {\n                    return;\n                }\n                const scrollTop = yHandleEl.scrollTop;\n                const scrollLeft = headerScrollElem.scrollLeft;\n                const isRollX = true;\n                const isRollY = false;\n                internalData.inHeaderScroll = true;\n                setScrollLeft(xHandleEl, scrollLeft);\n                setScrollLeft(footerScrollElem, scrollLeft);\n                setScrollLeft(bodyScrollElem, scrollLeft);\n                if (scrollXLoad) {\n                    $xeTable.triggerScrollXEvent(evnt);\n                }\n                $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {\n                    type: 'header',\n                    fixed: fixedType\n                });\n            },\n            triggerFooterScrollEvent(evnt, fixedType) {\n                const { scrollXLoad } = reactData;\n                const { elemStore, intoRunScroll, inWheelScroll, inVirtualScroll, inHeaderScroll, inBodyScroll } = internalData;\n                if (inWheelScroll || inVirtualScroll || inHeaderScroll || inBodyScroll) {\n                    return;\n                }\n                const yHandleEl = refScrollYHandleElem.value;\n                const xHandleEl = refScrollXHandleElem.value;\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                const headerScrollElem = getRefElem(elemStore['main-header-scroll']);\n                const footerScrollElem = getRefElem(elemStore['main-footer-scroll']);\n                if (intoRunScroll) {\n                    return;\n                }\n                if (!footerScrollElem) {\n                    return;\n                }\n                if (!xHandleEl) {\n                    return;\n                }\n                if (!yHandleEl) {\n                    return;\n                }\n                const scrollTop = yHandleEl.scrollTop;\n                const scrollLeft = footerScrollElem.scrollLeft;\n                const isRollX = true;\n                const isRollY = false;\n                internalData.inFooterScroll = true;\n                setScrollLeft(xHandleEl, scrollLeft);\n                setScrollLeft(headerScrollElem, scrollLeft);\n                setScrollLeft(bodyScrollElem, scrollLeft);\n                if (scrollXLoad) {\n                    $xeTable.triggerScrollXEvent(evnt);\n                }\n                $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {\n                    type: 'footer',\n                    fixed: fixedType\n                });\n            },\n            triggerBodyWheelEvent(evnt) {\n                const { target, deltaY, deltaX, shiftKey } = evnt;\n                if (target && /^textarea$/i.test(target.tagName)) {\n                    return;\n                }\n                const { highlightHoverRow } = tableProps;\n                const { scrollXLoad, scrollYLoad, expandColumn } = reactData;\n                const leftFixedWidth = computeLeftFixedWidth.value;\n                const rightFixedWidth = computeRightFixedWidth.value;\n                if (!(leftFixedWidth || rightFixedWidth || expandColumn)) {\n                    return;\n                }\n                const { elemStore, lastScrollTop, lastScrollLeft } = internalData;\n                const rowOpts = computeRowOpts.value;\n                const xHandleEl = refScrollXHandleElem.value;\n                const yHandleEl = refScrollYHandleElem.value;\n                const leftScrollElem = getRefElem(elemStore['left-body-scroll']);\n                const headerScrollElem = getRefElem(elemStore['main-header-scroll']);\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                const footerScrollElem = getRefElem(elemStore['main-footer-scroll']);\n                const rightScrollElem = getRefElem(elemStore['right-body-scroll']);\n                const rowExpandEl = refRowExpandElem.value;\n                if (!xHandleEl) {\n                    return;\n                }\n                if (!yHandleEl) {\n                    return;\n                }\n                if (!bodyScrollElem) {\n                    return;\n                }\n                const wheelSpeed = getWheelSpeed(reactData.lastScrollTime);\n                const deltaTop = shiftKey ? 0 : Math.ceil(deltaY * wheelSpeed);\n                const deltaLeft = shiftKey ? Math.ceil((shiftKey ? (deltaY || deltaX) : deltaX) * wheelSpeed) : 0;\n                const isTopWheel = deltaTop < 0;\n                const currScrollTop = bodyScrollElem.scrollTop;\n                // 如果滚动位置已经是顶部或底部，则不需要触发\n                if (isTopWheel ? currScrollTop <= 0 : currScrollTop >= bodyScrollElem.scrollHeight - bodyScrollElem.clientHeight) {\n                    return;\n                }\n                const scrollTop = currScrollTop + deltaTop;\n                const scrollLeft = bodyScrollElem.scrollLeft + deltaLeft;\n                const isRollX = scrollLeft !== lastScrollLeft;\n                const isRollY = scrollTop !== lastScrollTop;\n                if (rowOpts.isHover || highlightHoverRow) {\n                    $xeTable.clearHoverRow();\n                }\n                // 用于鼠标纵向滚轮处理\n                if (isRollX) {\n                    evnt.preventDefault();\n                    internalData.inWheelScroll = true;\n                    wheelScrollLeftTo(scrollLeft, (offsetLeft) => {\n                        internalData.inWheelScroll = true;\n                        const currLeftNum = offsetLeft;\n                        setScrollLeft(xHandleEl, currLeftNum);\n                        setScrollLeft(bodyScrollElem, currLeftNum);\n                        setScrollLeft(headerScrollElem, currLeftNum);\n                        setScrollLeft(footerScrollElem, currLeftNum);\n                        if (scrollXLoad) {\n                            $xeTable.triggerScrollXEvent(evnt);\n                        }\n                        $xeTable.handleScrollEvent(evnt, isRollY, isRollX, bodyScrollElem.scrollTop, currLeftNum, {\n                            type: 'table',\n                            fixed: ''\n                        });\n                    });\n                }\n                if (isRollY) {\n                    evnt.preventDefault();\n                    internalData.inWheelScroll = true;\n                    wheelScrollTopTo(scrollTop - currScrollTop, (offsetTop) => {\n                        internalData.inWheelScroll = true;\n                        const currTopNum = bodyScrollElem.scrollTop + offsetTop;\n                        setScrollTop(yHandleEl, currTopNum);\n                        setScrollTop(bodyScrollElem, currTopNum);\n                        setScrollTop(leftScrollElem, currTopNum);\n                        setScrollTop(rightScrollElem, currTopNum);\n                        setScrollTop(rowExpandEl, currTopNum);\n                        if (scrollYLoad) {\n                            $xeTable.triggerScrollYEvent(evnt);\n                        }\n                        $xeTable.handleScrollEvent(evnt, isRollY, isRollX, currTopNum, bodyScrollElem.scrollLeft, {\n                            type: 'table',\n                            fixed: ''\n                        });\n                    });\n                }\n            },\n            triggerVirtualScrollXEvent(evnt) {\n                const { scrollXLoad } = reactData;\n                const { elemStore, inWheelScroll, lastScrollTop, inHeaderScroll, inBodyScroll, inFooterScroll } = internalData;\n                if (inHeaderScroll || inBodyScroll || inFooterScroll) {\n                    return;\n                }\n                if (inWheelScroll) {\n                    return;\n                }\n                const headerScrollElem = getRefElem(elemStore['main-header-scroll']);\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                const footerScrollElem = getRefElem(elemStore['main-footer-scroll']);\n                const yHandleEl = refScrollYHandleElem.value;\n                const wrapperEl = evnt.currentTarget;\n                const { scrollLeft } = wrapperEl;\n                const yBodyEl = yHandleEl || bodyScrollElem;\n                let scrollTop = 0;\n                if (yBodyEl) {\n                    scrollTop = yBodyEl.scrollTop;\n                }\n                const isRollX = true;\n                const isRollY = scrollTop !== lastScrollTop;\n                internalData.inVirtualScroll = true;\n                setScrollLeft(bodyScrollElem, scrollLeft);\n                setScrollLeft(headerScrollElem, scrollLeft);\n                setScrollLeft(footerScrollElem, scrollLeft);\n                if (scrollXLoad) {\n                    $xeTable.triggerScrollXEvent(evnt);\n                }\n                $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {\n                    type: 'table',\n                    fixed: ''\n                });\n            },\n            triggerVirtualScrollYEvent(evnt) {\n                const { scrollYLoad } = reactData;\n                const { elemStore, inWheelScroll, lastScrollLeft, inHeaderScroll, inBodyScroll, inFooterScroll } = internalData;\n                if (inHeaderScroll || inBodyScroll || inFooterScroll) {\n                    return;\n                }\n                if (inWheelScroll) {\n                    return;\n                }\n                const leftScrollElem = getRefElem(elemStore['left-body-scroll']);\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                const rightScrollElem = getRefElem(elemStore['right-body-scroll']);\n                const rowExpandEl = refRowExpandElem.value;\n                const xHandleEl = refScrollXHandleElem.value;\n                const wrapperEl = evnt.currentTarget;\n                const { scrollTop } = wrapperEl;\n                const xBodyEl = xHandleEl || bodyScrollElem;\n                let scrollLeft = 0;\n                if (xBodyEl) {\n                    scrollLeft = xBodyEl.scrollLeft;\n                }\n                const isRollX = scrollLeft !== lastScrollLeft;\n                const isRollY = true;\n                internalData.inVirtualScroll = true;\n                setScrollTop(bodyScrollElem, scrollTop);\n                setScrollTop(leftScrollElem, scrollTop);\n                setScrollTop(rightScrollElem, scrollTop);\n                setScrollTop(rowExpandEl, scrollTop);\n                if (scrollYLoad) {\n                    $xeTable.triggerScrollYEvent(evnt);\n                }\n                $xeTable.handleScrollEvent(evnt, isRollY, isRollX, scrollTop, scrollLeft, {\n                    type: 'table',\n                    fixed: ''\n                });\n            },\n            /**\n             * 对于树形结构中，可以直接滚动到指定深层节点中\n             * 对于某些特定的场景可能会用到，比如定位到某一节点\n             * @param {Row} row 行对象\n             */\n            scrollToTreeRow(row) {\n                const { treeConfig } = props;\n                const { tableFullData } = internalData;\n                const rests = [];\n                if (treeConfig) {\n                    const treeOpts = computeTreeOpts.value;\n                    const childrenField = treeOpts.children || treeOpts.childrenField;\n                    const matchObj = XEUtils.findTree(tableFullData, item => $xeTable.eqRow(item, row), { children: childrenField });\n                    if (matchObj) {\n                        const nodes = matchObj.nodes;\n                        nodes.forEach((row, index) => {\n                            if (index < nodes.length - 1 && !tableMethods.isTreeExpandByRow(row)) {\n                                rests.push(tableMethods.setTreeExpand(row, true));\n                            }\n                        });\n                    }\n                }\n                return Promise.all(rests).then(() => rowToVisible($xeTable, row));\n            },\n            updateScrollYStatus,\n            // 更新横向 X 可视渲染上下剩余空间大小\n            updateScrollXSpace() {\n                const { isGroup, scrollXLoad, overflowX, scrollXWidth } = reactData;\n                const { visibleColumn, scrollXStore, elemStore, fullColumnIdData } = internalData;\n                const tableBody = refTableBody.value;\n                const tableBodyElem = tableBody ? tableBody.$el : null;\n                if (tableBodyElem) {\n                    const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                    const bodyTableElem = getRefElem(elemStore['main-body-table']);\n                    const headerTableElem = getRefElem(elemStore['main-header-table']);\n                    const footerTableElem = getRefElem(elemStore['main-footer-table']);\n                    let xSpaceLeft = 0;\n                    const firstColumn = visibleColumn[scrollXStore.startIndex];\n                    if (firstColumn) {\n                        const colRest = fullColumnIdData[firstColumn.id] || {};\n                        xSpaceLeft = colRest.oLeft;\n                    }\n                    let clientWidth = 0;\n                    if (bodyScrollElem) {\n                        clientWidth = bodyScrollElem.clientWidth;\n                    }\n                    // 虚拟渲染\n                    let isScrollXBig = false;\n                    let ySpaceWidth = scrollXWidth;\n                    if (scrollXWidth > maxXWidth) {\n                        // 触右\n                        if (bodyScrollElem && bodyTableElem && bodyScrollElem.scrollLeft + clientWidth >= maxXWidth) {\n                            xSpaceLeft = maxXWidth - bodyTableElem.clientWidth;\n                        }\n                        else {\n                            xSpaceLeft = (maxXWidth - clientWidth) * (xSpaceLeft / (scrollXWidth - clientWidth));\n                        }\n                        ySpaceWidth = maxXWidth;\n                        isScrollXBig = true;\n                    }\n                    let marginLeft = '';\n                    if (scrollXLoad && overflowX) {\n                        marginLeft = `${xSpaceLeft}px`;\n                    }\n                    if (headerTableElem) {\n                        headerTableElem.style.marginLeft = isGroup ? '' : marginLeft;\n                    }\n                    if (bodyTableElem) {\n                        bodyTableElem.style.marginLeft = marginLeft;\n                    }\n                    if (footerTableElem) {\n                        footerTableElem.style.marginLeft = marginLeft;\n                    }\n                    reactData.isScrollXBig = isScrollXBig;\n                    const containerList = ['main'];\n                    containerList.forEach(name => {\n                        const layoutList = ['header', 'body', 'footer'];\n                        layoutList.forEach(layout => {\n                            const xSpaceElem = getRefElem(elemStore[`${name}-${layout}-xSpace`]);\n                            if (xSpaceElem) {\n                                xSpaceElem.style.width = scrollXLoad ? `${ySpaceWidth}px` : '';\n                            }\n                        });\n                    });\n                    const scrollXSpaceEl = refScrollXSpaceElem.value;\n                    if (scrollXSpaceEl) {\n                        scrollXSpaceEl.style.width = `${ySpaceWidth}px`;\n                    }\n                    nextTick(() => {\n                        updateStyle();\n                    });\n                }\n            },\n            // 更新纵向 Y 可视渲染上下剩余空间大小\n            updateScrollYSpace() {\n                const { isAllOverflow, scrollYLoad, expandColumn } = reactData;\n                const { scrollYStore, elemStore, isResizeCellHeight, afterFullData, fullAllDataRowIdData, rowExpandedMaps } = internalData;\n                const { startIndex } = scrollYStore;\n                const expandOpts = computeExpandOpts.value;\n                const rowOpts = computeRowOpts.value;\n                const cellOpts = computeCellOpts.value;\n                const defaultRowHeight = computeDefaultRowHeight.value;\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                const bodyTableElem = getRefElem(elemStore['main-body-table']);\n                const containerList = ['main', 'left', 'right'];\n                let ySpaceTop = 0;\n                let scrollYHeight = 0;\n                let isScrollYBig = false;\n                if (scrollYLoad) {\n                    const isCustomCellHeight = isResizeCellHeight || cellOpts.height || rowOpts.height;\n                    if (!isCustomCellHeight && !expandColumn && isAllOverflow) {\n                        scrollYHeight = afterFullData.length * defaultRowHeight;\n                        if (scrollYHeight > maxYHeight) {\n                            isScrollYBig = true;\n                        }\n                        ySpaceTop = Math.max(0, startIndex * defaultRowHeight);\n                    }\n                    else {\n                        const firstRow = afterFullData[startIndex];\n                        let rowid = getRowid($xeTable, firstRow);\n                        let rowRest = fullAllDataRowIdData[rowid] || {};\n                        ySpaceTop = rowRest.oTop;\n                        const lastRow = afterFullData[afterFullData.length - 1];\n                        rowid = getRowid($xeTable, lastRow);\n                        rowRest = fullAllDataRowIdData[rowid] || {};\n                        scrollYHeight = rowRest.oTop + (rowRest.resizeHeight || cellOpts.height || rowOpts.height || rowRest.height || defaultRowHeight);\n                        // 是否展开行\n                        if (expandColumn && rowExpandedMaps[rowid]) {\n                            scrollYHeight += rowRest.expandHeight || expandOpts.height || 0;\n                        }\n                        if (scrollYHeight > maxYHeight) {\n                            isScrollYBig = true;\n                        }\n                    }\n                }\n                else {\n                    if (bodyTableElem) {\n                        scrollYHeight = bodyTableElem.clientHeight;\n                    }\n                }\n                let clientHeight = 0;\n                if (bodyScrollElem) {\n                    clientHeight = bodyScrollElem.clientHeight;\n                }\n                // 虚拟渲染\n                let ySpaceHeight = scrollYHeight;\n                let scrollYTop = ySpaceTop;\n                if (isScrollYBig) {\n                    // 触底\n                    if (bodyScrollElem && bodyTableElem && bodyScrollElem.scrollTop + clientHeight >= maxYHeight) {\n                        scrollYTop = maxYHeight - bodyTableElem.clientHeight;\n                    }\n                    else {\n                        scrollYTop = (maxYHeight - clientHeight) * (ySpaceTop / (scrollYHeight - clientHeight));\n                    }\n                    ySpaceHeight = maxYHeight;\n                }\n                containerList.forEach(name => {\n                    const layoutList = ['header', 'body', 'footer'];\n                    const tableElem = getRefElem(elemStore[`${name}-body-table`]);\n                    if (tableElem) {\n                        tableElem.style.marginTop = scrollYTop ? `${scrollYTop}px` : '';\n                    }\n                    layoutList.forEach(layout => {\n                        const ySpaceElem = getRefElem(elemStore[`${name}-${layout}-ySpace`]);\n                        if (ySpaceElem) {\n                            ySpaceElem.style.height = ySpaceHeight ? `${ySpaceHeight}px` : '';\n                        }\n                    });\n                });\n                const scrollYSpaceEl = refScrollYSpaceElem.value;\n                if (scrollYSpaceEl) {\n                    scrollYSpaceEl.style.height = ySpaceHeight ? `${ySpaceHeight}px` : '';\n                }\n                const rowExpandYSpaceEl = refRowExpandYSpaceElem.value;\n                if (rowExpandYSpaceEl) {\n                    rowExpandYSpaceEl.style.height = ySpaceHeight ? `${ySpaceHeight}px` : '';\n                }\n                reactData.scrollYTop = scrollYTop;\n                reactData.scrollYHeight = scrollYHeight;\n                reactData.isScrollYBig = isScrollYBig;\n                return nextTick().then(() => {\n                    updateStyle();\n                });\n            },\n            updateScrollXData() {\n                const { isAllOverflow } = reactData;\n                handleTableColumn();\n                $xeTable.updateScrollYSpace();\n                return nextTick().then(() => {\n                    handleTableColumn();\n                    $xeTable.updateScrollXSpace();\n                    if (!isAllOverflow) {\n                        $xeTable.updateScrollYSpace();\n                    }\n                });\n            },\n            updateScrollYData() {\n                $xeTable.handleTableData();\n                $xeTable.updateScrollYSpace();\n                return nextTick().then(() => {\n                    $xeTable.handleTableData();\n                    $xeTable.updateScrollYSpace();\n                });\n            },\n            /**\n             * 处理固定列的显示状态\n             */\n            checkScrolling() {\n                const { elemStore } = internalData;\n                const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n                const leftContainerElem = refLeftContainer.value;\n                const rightContainerElem = refRightContainer.value;\n                const xHandleEl = refScrollXHandleElem.value;\n                const bodtTargetEl = xHandleEl || bodyScrollElem;\n                if (bodtTargetEl) {\n                    if (leftContainerElem) {\n                        if (bodtTargetEl.scrollLeft > 0) {\n                            addClass(leftContainerElem, 'scrolling--middle');\n                        }\n                        else {\n                            removeClass(leftContainerElem, 'scrolling--middle');\n                        }\n                    }\n                    if (rightContainerElem) {\n                        if (bodtTargetEl.clientWidth < bodtTargetEl.scrollWidth - Math.ceil(bodtTargetEl.scrollLeft)) {\n                            addClass(rightContainerElem, 'scrolling--middle');\n                        }\n                        else {\n                            removeClass(rightContainerElem, 'scrolling--middle');\n                        }\n                    }\n                }\n            },\n            updateZindex() {\n                if (props.zIndex) {\n                    internalData.tZindex = props.zIndex;\n                }\n                else if (internalData.tZindex < getLastZIndex()) {\n                    internalData.tZindex = nextZIndex();\n                }\n            },\n            handleCheckedCheckboxRow,\n            /**\n             * 行 hover 事件\n             */\n            triggerHoverEvent(evnt, { row }) {\n                tablePrivateMethods.setHoverRow(row);\n            },\n            setHoverRow(row) {\n                const rowid = getRowid($xeTable, row);\n                const el = refElem.value;\n                tablePrivateMethods.clearHoverRow();\n                if (el) {\n                    XEUtils.arrayEach(el.querySelectorAll(`.vxe-body--row[rowid=\"${rowid}\"]`), elem => addClass(elem, 'row--hover'));\n                }\n                internalData.hoverRow = row;\n            },\n            clearHoverRow() {\n                const el = refElem.value;\n                if (el) {\n                    XEUtils.arrayEach(el.querySelectorAll('.vxe-body--row.row--hover'), elem => removeClass(elem, 'row--hover'));\n                }\n                internalData.hoverRow = null;\n            },\n            /**\n             * 已废弃，被 getCellElement 替换\n             * @deprecated\n             */\n            getCell(row, column) {\n                return tableMethods.getCellElement(row, column);\n            },\n            findRowIndexOf(list, row) {\n                return row ? XEUtils.findIndexOf(list, item => $xeTable.eqRow(item, row)) : -1;\n            },\n            eqRow(row1, row2) {\n                if (row1 && row2) {\n                    if (row1 === row2) {\n                        return true;\n                    }\n                    return getRowid($xeTable, row1) === getRowid($xeTable, row2);\n                }\n                return false;\n            }\n        };\n        // 检测对应模块是否安装\n        'openExport,openPrint,exportData,openImport,importData,saveFile,readFile,importByFile,print'.split(',').forEach(name => {\n            $xeTable[name] = function () {\n                errLog('vxe.error.reqModule', ['VxeTableExportModule']);\n            };\n        });\n        'clearValidate,fullValidate,validate'.split(',').forEach(name => {\n            $xeTable[name] = function () {\n                errLog('vxe.error.reqModule', ['VxeTableValidatorModule']);\n            };\n        });\n        Object.assign($xeTable, tableMethods, tablePrivateMethods);\n        /**\n         * 渲染浮固定列\n         * 分别渲染左边固定列和右边固定列\n         * 如果宽度足够情况下，则不需要渲染固定列\n         * @param {String} fixedType 固定列类型\n         */\n        const renderFixed = (fixedType) => {\n            const { showHeader, showFooter } = props;\n            const { tableData, tableColumn, tableGroupColumn, columnStore, footerTableData } = reactData;\n            const isFixedLeft = fixedType === 'left';\n            const fixedColumn = isFixedLeft ? columnStore.leftList : columnStore.rightList;\n            return h('div', {\n                ref: isFixedLeft ? refLeftContainer : refRightContainer,\n                class: `vxe-table--fixed-${fixedType}-wrapper`\n            }, [\n                showHeader\n                    ? h(TableHeaderComponent, {\n                        ref: isFixedLeft ? refTableLeftHeader : refTableRightHeader,\n                        fixedType,\n                        tableData,\n                        tableColumn,\n                        tableGroupColumn,\n                        fixedColumn\n                    })\n                    : renderEmptyElement($xeTable),\n                h(TableBodyComponent, {\n                    ref: isFixedLeft ? refTableLeftBody : refTableRightBody,\n                    fixedType,\n                    tableData,\n                    tableColumn,\n                    fixedColumn\n                }),\n                showFooter\n                    ? h(TableFooterComponent, {\n                        ref: isFixedLeft ? refTableLeftFooter : refTableRightFooter,\n                        footerTableData,\n                        tableColumn,\n                        fixedColumn,\n                        fixedType\n                    })\n                    : renderEmptyElement($xeTable)\n            ]);\n        };\n        const renderEmptyBody = () => {\n            const emptyOpts = computeEmptyOpts.value;\n            const params = { $table: $xeTable };\n            if (slots.empty) {\n                return slots.empty(params);\n            }\n            else {\n                const compConf = emptyOpts.name ? renderer.get(emptyOpts.name) : null;\n                const rtEmptyView = compConf ? (compConf.renderTableEmpty || compConf.renderTableEmptyView || compConf.renderEmpty) : null;\n                if (rtEmptyView) {\n                    return getSlotVNs(rtEmptyView(emptyOpts, params));\n                }\n            }\n            return getFuncText(props.emptyText) || getI18n('vxe.table.emptyText');\n        };\n        const renderDragTipContents = () => {\n            const { dragConfig } = props;\n            const { dragRow, dragCol, dragTipText } = reactData;\n            const columnDragOpts = computeColumnDragOpts.value;\n            const rowDragOpts = computeRowDragOpts.value;\n            const rowDragSlots = rowDragOpts.slots || {};\n            const rTipSlot = rowDragSlots.tip || (dragConfig && dragConfig.slots ? dragConfig.slots.rowTip : null);\n            const columnDragSlots = columnDragOpts.slots || {};\n            const cTipSlot = columnDragSlots.tip;\n            if (dragRow && rTipSlot) {\n                return callSlot(rTipSlot, { row: dragRow });\n            }\n            if (dragCol && cTipSlot) {\n                return callSlot(cTipSlot, { column: dragCol });\n            }\n            return [h('span', dragTipText)];\n        };\n        const renderDragTip = () => {\n            const { dragRow, dragCol } = reactData;\n            const rowOpts = computeRowOpts.value;\n            const columnOpts = computeColumnOpts.value;\n            const rowDragOpts = computeRowDragOpts.value;\n            const columnDragOpts = computeColumnDragOpts.value;\n            if (rowOpts.drag || columnOpts.drag) {\n                return h('div', {\n                    class: 'vxe-table--drag-wrapper'\n                }, [\n                    h('div', {\n                        ref: refDragRowLineElem,\n                        class: ['vxe-table--drag-row-line', {\n                                'is--guides': rowDragOpts.showGuidesStatus\n                            }]\n                    }),\n                    h('div', {\n                        ref: refDragColLineElem,\n                        class: ['vxe-table--drag-col-line', {\n                                'is--guides': columnDragOpts.showGuidesStatus\n                            }]\n                    }),\n                    (dragRow && rowDragOpts.showDragTip) || (dragCol && columnDragOpts.showDragTip)\n                        ? h('div', {\n                            ref: refDragTipElem,\n                            class: 'vxe-table--drag-sort-tip'\n                        }, [\n                            h('div', {\n                                class: 'vxe-table--drag-sort-tip-wrapper'\n                            }, [\n                                h('div', {\n                                    class: 'vxe-table--drag-sort-tip-status'\n                                }, [\n                                    h('span', {\n                                        class: ['vxe-table--drag-sort-tip-normal-status', dragRow ? getIcon().TABLE_DRAG_STATUS_ROW : getIcon().TABLE_DRAG_STATUS_COLUMN]\n                                    }),\n                                    h('span', {\n                                        class: ['vxe-table--drag-sort-tip-sub-status', getIcon().TABLE_DRAG_STATUS_SUB_ROW]\n                                    }),\n                                    h('span', {\n                                        class: ['vxe-table--drag-sort-tip-disabled-status', getIcon().TABLE_DRAG_DISABLED]\n                                    })\n                                ]),\n                                h('div', {\n                                    class: 'vxe-table--drag-sort-tip-content'\n                                }, renderDragTipContents())\n                            ])\n                        ])\n                        : renderEmptyElement($xeTable)\n                ]);\n            }\n            return renderEmptyElement($xeTable);\n        };\n        const renderRowExpandedVNs = () => {\n            const { treeConfig } = props;\n            const { expandColumn } = reactData;\n            const tableRowExpandedList = computeTableRowExpandedList.value;\n            const expandOpts = computeExpandOpts.value;\n            const { mode } = expandOpts;\n            if (mode !== 'fixed') {\n                return renderEmptyElement($xeTable);\n            }\n            const expandVNs = [\n                h('div', {\n                    key: 'repY',\n                    ref: refRowExpandYSpaceElem\n                })\n            ];\n            if (expandColumn) {\n                const { handleGetRowId } = createHandleGetRowId($xeTable);\n                tableRowExpandedList.forEach((row) => {\n                    const expandOpts = computeExpandOpts.value;\n                    const { height: expandHeight, padding } = expandOpts;\n                    const { fullAllDataRowIdData } = internalData;\n                    const treeOpts = computeTreeOpts.value;\n                    const { transform, seqMode } = treeOpts;\n                    const cellStyle = {};\n                    const rowid = handleGetRowId(row);\n                    const rest = fullAllDataRowIdData[rowid];\n                    let rowLevel = 0;\n                    let seq = -1;\n                    let _rowIndex = 0;\n                    const rowIndex = $xeTable.getRowIndex(row);\n                    const $rowIndex = $xeTable.getVMRowIndex(row);\n                    if (rest) {\n                        rowLevel = rest.level;\n                        if (treeConfig && transform && seqMode === 'increasing') {\n                            seq = rest._index + 1;\n                        }\n                        else {\n                            seq = rest.seq;\n                        }\n                        _rowIndex = rest._index;\n                    }\n                    if (expandHeight) {\n                        cellStyle.height = `${expandHeight}px`;\n                    }\n                    if (treeConfig) {\n                        cellStyle.paddingLeft = `${(rowLevel * treeOpts.indent) + 30}px`;\n                    }\n                    const expandParams = { $table: $xeTable, seq, column: expandColumn, fixed: '', type: 'body', level: rowLevel, row, rowIndex, $rowIndex, _rowIndex };\n                    expandVNs.push(h('div', {\n                        key: rowid,\n                        class: ['vxe-body--row-expanded-cell', {\n                                'is--padding': padding,\n                                'is--ellipsis': expandHeight\n                            }],\n                        rowid,\n                        style: cellStyle\n                    }, expandColumn.renderData(expandParams)));\n                });\n            }\n            return h('div', {\n                ref: refRowExpandElem,\n                class: 'vxe-table--row-expanded-wrapper'\n            }, expandVNs);\n        };\n        const renderScrollX = () => {\n            return h('div', {\n                key: 'vsx',\n                ref: refScrollXVirtualElem,\n                class: 'vxe-table--scroll-x-virtual'\n            }, [\n                h('div', {\n                    ref: refScrollXLeftCornerElem,\n                    class: 'vxe-table--scroll-x-left-corner'\n                }),\n                h('div', {\n                    ref: refScrollXWrapperElem,\n                    class: 'vxe-table--scroll-x-wrapper'\n                }, [\n                    h('div', {\n                        ref: refScrollXHandleElem,\n                        class: 'vxe-table--scroll-x-handle',\n                        onScroll: $xeTable.triggerVirtualScrollXEvent\n                    }, [\n                        h('div', {\n                            ref: refScrollXSpaceElem,\n                            class: 'vxe-table--scroll-x-space'\n                        })\n                    ])\n                ]),\n                h('div', {\n                    ref: refScrollXRightCornerElem,\n                    class: 'vxe-table--scroll-x-right-corner'\n                })\n            ]);\n        };\n        const renderScrollY = () => {\n            return h('div', {\n                ref: refScrollYVirtualElem,\n                class: 'vxe-table--scroll-y-virtual'\n            }, [\n                h('div', {\n                    ref: refScrollYTopCornerElem,\n                    class: 'vxe-table--scroll-y-top-corner'\n                }),\n                h('div', {\n                    ref: refScrollYWrapperElem,\n                    class: 'vxe-table--scroll-y-wrapper'\n                }, [\n                    h('div', {\n                        ref: refScrollYHandleElem,\n                        class: 'vxe-table--scroll-y-handle',\n                        onScroll: $xeTable.triggerVirtualScrollYEvent\n                    }, [\n                        h('div', {\n                            ref: refScrollYSpaceElem,\n                            class: 'vxe-table--scroll-y-space'\n                        })\n                    ])\n                ]),\n                h('div', {\n                    ref: refScrollYBottomCornerElem,\n                    class: 'vxe-table--scroll-y-bottom-corner'\n                })\n            ]);\n        };\n        const renderViewport = () => {\n            const { showHeader, showFooter } = props;\n            const { overflowX, tableData, tableColumn, tableGroupColumn, footerTableData, columnStore } = reactData;\n            const { leftList, rightList } = columnStore;\n            return h('div', {\n                ref: refTableViewportElem,\n                class: 'vxe-table--viewport-wrapper'\n            }, [\n                h('div', {\n                    class: 'vxe-table--main-wrapper'\n                }, [\n                    /**\n                     * 表头\n                     */\n                    showHeader\n                        ? h(TableHeaderComponent, {\n                            ref: refTableHeader,\n                            tableData,\n                            tableColumn,\n                            tableGroupColumn\n                        })\n                        : renderEmptyElement($xeTable),\n                    /**\n                     * 表体\n                     */\n                    h(TableBodyComponent, {\n                        ref: refTableBody,\n                        tableData,\n                        tableColumn\n                    }),\n                    /**\n                     * 表尾\n                     */\n                    showFooter\n                        ? h(TableFooterComponent, {\n                            ref: refTableFooter,\n                            footerTableData,\n                            tableColumn\n                        })\n                        : renderEmptyElement($xeTable)\n                ]),\n                h('div', {\n                    class: 'vxe-table--fixed-wrapper'\n                }, [\n                    leftList && leftList.length && overflowX ? renderFixed('left') : renderEmptyElement($xeTable),\n                    rightList && rightList.length && overflowX ? renderFixed('right') : renderEmptyElement($xeTable)\n                ]),\n                renderRowExpandedVNs()\n            ]);\n        };\n        const renderBody = () => {\n            const scrollbarYToLeft = computeScrollbarYToLeft.value;\n            return h('div', {\n                class: 'vxe-table--layout-wrapper'\n            }, scrollbarYToLeft\n                ? [\n                    renderScrollY(),\n                    renderViewport()\n                ]\n                : [\n                    renderViewport(),\n                    renderScrollY()\n                ]);\n        };\n        const renderVN = () => {\n            const { loading, stripe, showHeader, height, treeConfig, mouseConfig, showFooter, highlightCell, highlightHoverRow, highlightHoverColumn, editConfig, editRules } = props;\n            const { isGroup, overflowX, overflowY, scrollXLoad, scrollYLoad, tableData, initStore, columnStore, filterStore, customStore } = reactData;\n            const { leftList, rightList } = columnStore;\n            const loadingSlot = slots.loading;\n            const tableTipConfig = computeTableTipConfig.value;\n            const validTipConfig = computeValidTipConfig.value;\n            const validOpts = computeValidOpts.value;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const treeOpts = computeTreeOpts.value;\n            const rowOpts = computeRowOpts.value;\n            const columnOpts = computeColumnOpts.value;\n            const vSize = computeSize.value;\n            const tableBorder = computeTableBorder.value;\n            const mouseOpts = computeMouseOpts.value;\n            const areaOpts = computeAreaOpts.value;\n            const loadingOpts = computeLoadingOpts.value;\n            const isMenu = computeIsMenu.value;\n            const currLoading = reactData.isColLoading || reactData.isRowLoading || loading;\n            const resizableOpts = computeResizableOpts.value;\n            const isArea = mouseConfig && mouseOpts.area;\n            const columnDragOpts = computeColumnDragOpts.value;\n            const scrollbarXToTop = computeScrollbarXToTop.value;\n            const scrollbarYToLeft = computeScrollbarYToLeft.value;\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-table', 'vxe-table--render-default', `tid_${xID}`, `border--${tableBorder}`, `sx-pos--${scrollbarXToTop ? 'top' : 'bottom'}`, `sy-pos--${scrollbarYToLeft ? 'left' : 'right'}`, {\n                        [`size--${vSize}`]: vSize,\n                        [`valid-msg--${validOpts.msgMode}`]: !!editRules,\n                        'vxe-editable': !!editConfig,\n                        'old-cell-valid': editRules && getConfig().cellVaildMode === 'obsolete',\n                        'cell--highlight': highlightCell,\n                        'cell--selected': mouseConfig && mouseOpts.selected,\n                        'cell--area': isArea,\n                        'header-cell--area': isArea && areaOpts.selectCellByHeader,\n                        'body-cell--area': isArea && areaOpts.selectCellByBody,\n                        'row--highlight': rowOpts.isHover || highlightHoverRow,\n                        'column--highlight': columnOpts.isHover || highlightHoverColumn,\n                        'checkbox--range': checkboxOpts.range,\n                        'col--drag-cell': columnOpts.drag && columnDragOpts.trigger === 'cell',\n                        'is--header': showHeader,\n                        'is--footer': showFooter,\n                        'is--group': isGroup,\n                        'is--tree-line': treeConfig && (treeOpts.showLine || treeOpts.line),\n                        'is--fixed-left': leftList.length,\n                        'is--fixed-right': rightList.length,\n                        'is--animat': !!props.animat,\n                        'is--round': props.round,\n                        'is--stripe': !treeConfig && stripe,\n                        'is--loading': currLoading,\n                        'is--empty': !currLoading && !tableData.length,\n                        'is--scroll-y': overflowY,\n                        'is--scroll-x': overflowX,\n                        'is--virtual-x': scrollXLoad,\n                        'is--virtual-y': scrollYLoad\n                    }],\n                spellcheck: false,\n                onKeydown: keydownEvent\n            }, [\n                /**\n                 * 隐藏列\n                 */\n                h('div', {\n                    class: 'vxe-table-slots'\n                }, slots.default ? slots.default({}) : []),\n                h('div', {\n                    ref: refVarElem,\n                    class: 'vxe-table-vars'\n                }, [\n                    h('div', {\n                        class: 'vxe-table-var-default'\n                    }),\n                    h('div', {\n                        class: 'vxe-table-var-medium'\n                    }),\n                    h('div', {\n                        class: 'vxe-table-var-small'\n                    }),\n                    h('div', {\n                        class: 'vxe-table-var-mini'\n                    })\n                ]),\n                h('div', {\n                    key: 'tw',\n                    class: 'vxe-table--render-wrapper'\n                }, scrollbarXToTop\n                    ? [\n                        renderScrollX(),\n                        renderBody()\n                    ]\n                    : [\n                        renderBody(),\n                        renderScrollX()\n                    ]),\n                /**\n                 * 空数据\n                 */\n                h('div', {\n                    key: 'tn',\n                    ref: refEmptyPlaceholder,\n                    class: 'vxe-table--empty-placeholder'\n                }, [\n                    h('div', {\n                        class: 'vxe-table--empty-content'\n                    }, renderEmptyBody())\n                ]),\n                /**\n                 * 边框线\n                 */\n                h('div', {\n                    key: 'tl',\n                    class: 'vxe-table--border-line'\n                }),\n                /**\n                 * 列宽线\n                 */\n                h('div', {\n                    key: 'tcl',\n                    ref: refColResizeBar,\n                    class: 'vxe-table--resizable-col-bar'\n                }, resizableOpts.showDragTip\n                    ? [\n                        h('div', {\n                            class: 'vxe-table--resizable-number-tip'\n                        })\n                    ]\n                    : []),\n                /**\n                 * 行高线\n                 */\n                h('div', {\n                    key: 'trl',\n                    ref: refRowResizeBar,\n                    class: 'vxe-table--resizable-row-bar'\n                }, resizableOpts.showDragTip\n                    ? [\n                        h('div', {\n                            class: 'vxe-table--resizable-number-tip'\n                        })\n                    ]\n                    : []),\n                /**\n                 * 加载中\n                 */\n                VxeUILoadingComponent\n                    ? h(VxeUILoadingComponent, {\n                        key: 'lg',\n                        class: 'vxe-table--loading',\n                        modelValue: currLoading,\n                        icon: loadingOpts.icon,\n                        text: loadingOpts.text\n                    }, loadingSlot\n                        ? {\n                            default: () => callSlot(loadingSlot, { $table: $xeTable, $grid: $xeGrid, loading: currLoading })\n                        }\n                        : {})\n                    : loadingSlot\n                        ? h('div', {\n                            class: ['vxe-loading--custom-wrapper', {\n                                    'is--visible': currLoading\n                                }]\n                        }, callSlot(loadingSlot, { $table: $xeTable, $grid: $xeGrid, loading: currLoading }))\n                        : renderEmptyElement($xeTable),\n                /**\n                 * 自定义列\n                 */\n                initStore.custom\n                    ? h(TableCustomPanelComponent, {\n                        key: 'cs',\n                        ref: refTableCustom,\n                        customStore\n                    })\n                    : renderEmptyElement($xeTable),\n                /**\n                 * 筛选\n                 */\n                initStore.filter\n                    ? h(TableFilterPanelComponent, {\n                        key: 'tf',\n                        ref: refTableFilter,\n                        filterStore\n                    })\n                    : renderEmptyElement($xeTable),\n                /**\n                 * 导入\n                 */\n                initStore.import && props.importConfig\n                    ? h(TableImportPanelComponent, {\n                        key: 'it',\n                        defaultOptions: reactData.importParams,\n                        storeData: reactData.importStore\n                    })\n                    : renderEmptyElement($xeTable),\n                /**\n                 * 导出\n                 */\n                initStore.export && (props.exportConfig || props.printConfig)\n                    ? h(TableExportPanelComponent, {\n                        key: 'et',\n                        defaultOptions: reactData.exportParams,\n                        storeData: reactData.exportStore\n                    })\n                    : renderEmptyElement($xeTable),\n                /**\n                 * 快捷菜单\n                 */\n                isMenu\n                    ? h(TableMenuPanelComponent, {\n                        key: 'tm',\n                        ref: refTableMenu\n                    })\n                    : renderEmptyElement($xeTable),\n                /**\n                 * 拖拽排序提示\n                 */\n                renderDragTip(),\n                /**\n                 * 提示相关\n                 */\n                VxeUITooltipComponent\n                    ? h('div', {}, [\n                        /**\n                         * 通用提示\n                         */\n                        h(VxeUITooltipComponent, {\n                            key: 'ctp',\n                            ref: refCommTooltip,\n                            isArrow: false,\n                            enterable: false\n                        }),\n                        /**\n                          * 工具提示\n                          */\n                        h(VxeUITooltipComponent, {\n                            key: 'btp',\n                            ref: refTooltip,\n                            theme: tableTipConfig.theme,\n                            enterable: tableTipConfig.enterable,\n                            enterDelay: tableTipConfig.enterDelay,\n                            leaveDelay: tableTipConfig.leaveDelay\n                        }),\n                        /**\n                          * 校验提示\n                          */\n                        props.editRules && validOpts.showMessage && (validOpts.message === 'default' ? !height : validOpts.message === 'tooltip')\n                            ? h(VxeUITooltipComponent, {\n                                key: 'vtp',\n                                ref: refValidTooltip,\n                                class: [{\n                                        'old-cell-valid': editRules && getConfig().cellVaildMode === 'obsolete'\n                                    }, 'vxe-table--valid-error'],\n                                theme: validTipConfig.theme,\n                                enterable: validTipConfig.enterable,\n                                enterDelay: validTipConfig.enterDelay,\n                                leaveDelay: validTipConfig.leaveDelay\n                            })\n                            : renderEmptyElement($xeTable)\n                    ])\n                    : renderEmptyElement($xeTable)\n            ]);\n        };\n        const dataFlag = ref(0);\n        watch(() => props.data ? props.data.length : -1, () => {\n            dataFlag.value++;\n        });\n        watch(() => props.data, () => {\n            dataFlag.value++;\n        });\n        watch(dataFlag, () => {\n            const { initStatus } = internalData;\n            const value = props.data || [];\n            if (value && value.length >= 50000) {\n                warnLog('vxe.error.errLargeData', ['loadData(data), reloadData(data)']);\n            }\n            loadTableData(value, false).then(() => {\n                const { scrollXLoad, scrollYLoad, expandColumn } = reactData;\n                const expandOpts = computeExpandOpts.value;\n                internalData.inited = true;\n                internalData.initStatus = true;\n                if (!initStatus) {\n                    handleLoadDefaults();\n                }\n                // const checkboxOpts = computeCheckboxOpts.value\n                // const checkboxColumn = internalData.tableFullColumn.find(column => column.type === 'checkbox')\n                // if (checkboxColumn && internalData.tableFullData.length > 300 && !checkboxOpts.checkField) {\n                //   warnLog('vxe.error.checkProp', ['checkbox-config.checkField'])\n                // }\n                if ((scrollXLoad || scrollYLoad) && (expandColumn && expandOpts.mode !== 'fixed')) {\n                    warnLog('vxe.error.scrollErrProp', ['column.type=expand']);\n                }\n                return tableMethods.recalculate();\n            });\n        });\n        const staticColumnFlag = ref(0);\n        watch(() => reactData.staticColumns.length, () => {\n            staticColumnFlag.value++;\n        });\n        watch(() => reactData.staticColumns, () => {\n            staticColumnFlag.value++;\n        });\n        watch(staticColumnFlag, () => {\n            handleColumn(XEUtils.clone(reactData.staticColumns));\n        });\n        const tableColumnFlag = ref(0);\n        watch(() => reactData.tableColumn.length, () => {\n            tableColumnFlag.value++;\n        });\n        watch(() => reactData.tableColumn, () => {\n            tableColumnFlag.value++;\n        });\n        watch(tableColumnFlag, () => {\n            tablePrivateMethods.analyColumnWidth();\n        });\n        watch(() => reactData.upDataFlag, () => {\n            nextTick(() => {\n                tableMethods.updateData();\n            });\n        });\n        watch(() => reactData.reColumnFlag, () => {\n            nextTick(() => {\n                tableMethods.refreshColumn();\n            });\n        });\n        const reScrollFlag = ref(0);\n        watch(computeSize, () => {\n            reScrollFlag.value++;\n        });\n        watch(() => props.showHeader, () => {\n            reScrollFlag.value++;\n        });\n        watch(() => props.showFooter, () => {\n            reScrollFlag.value++;\n        });\n        watch(() => reactData.overflowX, () => {\n            reScrollFlag.value++;\n        });\n        watch(() => reactData.overflowY, () => {\n            reScrollFlag.value++;\n        });\n        watch(reScrollFlag, () => {\n            nextTick(() => {\n                tableMethods.recalculate(true).then(() => tableMethods.refreshScroll());\n            });\n        });\n        const reLayoutFlag = ref(0);\n        watch(() => props.height, () => {\n            reLayoutFlag.value++;\n        });\n        watch(() => props.maxHeight, () => {\n            reLayoutFlag.value++;\n        });\n        watch(computeScrollbarXToTop, () => {\n            reLayoutFlag.value++;\n        });\n        watch(computeScrollbarYToLeft, () => {\n            reLayoutFlag.value++;\n        });\n        watch(() => VxeUI.getLanguage(), () => {\n            reLayoutFlag.value++;\n        });\n        watch(reLayoutFlag, () => {\n            nextTick(() => tableMethods.recalculate(true));\n        });\n        const footFlag = ref(0);\n        watch(() => props.footerData ? props.footerData.length : -1, () => {\n            footFlag.value++;\n        });\n        watch(() => props.footerData, () => {\n            footFlag.value++;\n        });\n        watch(footFlag, () => {\n            tableMethods.updateFooter();\n        });\n        watch(() => props.syncResize, (value) => {\n            if (value) {\n                handleUpdateResize();\n                nextTick(() => {\n                    handleUpdateResize();\n                    setTimeout(() => handleUpdateResize());\n                });\n            }\n        });\n        const mergeCellFlag = ref(0);\n        watch(() => props.mergeCells ? props.mergeCells.length : -1, () => {\n            mergeCellFlag.value++;\n        });\n        watch(() => props.mergeCells, () => {\n            mergeCellFlag.value++;\n        });\n        watch(mergeCellFlag, () => {\n            tableMethods.clearMergeCells();\n            nextTick(() => {\n                if (props.mergeCells) {\n                    tableMethods.setMergeCells(props.mergeCells);\n                }\n            });\n        });\n        const mergeFooterItemFlag = ref(0);\n        watch(() => props.mergeFooterItems ? props.mergeFooterItems.length : -1, () => {\n            mergeFooterItemFlag.value++;\n        });\n        watch(() => props.mergeFooterItems, () => {\n            mergeFooterItemFlag.value++;\n        });\n        watch(mergeFooterItemFlag, () => {\n            tableMethods.clearMergeFooterItems();\n            nextTick(() => {\n                if (props.mergeFooterItems) {\n                    tableMethods.setMergeFooterItems(props.mergeFooterItems);\n                }\n            });\n        });\n        if ($xeTabs) {\n            watch(() => $xeTabs ? $xeTabs.reactData.resizeFlag : null, () => {\n                handleGlobalResizeEvent();\n            });\n        }\n        hooks.forEach((options) => {\n            const { setupTable } = options;\n            if (setupTable) {\n                const hookRest = setupTable($xeTable);\n                if (hookRest && XEUtils.isObject(hookRest)) {\n                    Object.assign($xeTable, hookRest);\n                }\n            }\n        });\n        tablePrivateMethods.preventEvent(null, 'created', { $table: $xeTable });\n        let resizeObserver;\n        onActivated(() => {\n            tableMethods.recalculate().then(() => tableMethods.refreshScroll());\n            tablePrivateMethods.preventEvent(null, 'activated', { $table: $xeTable });\n        });\n        onDeactivated(() => {\n            internalData.isActivated = false;\n            tablePrivateMethods.preventEvent(null, 'deactivated', { $table: $xeTable });\n        });\n        onMounted(() => {\n            const columnOpts = computeColumnOpts.value;\n            const rowOpts = computeRowOpts.value;\n            const customOpts = computeCustomOpts.value;\n            if (columnOpts.drag || rowOpts.drag || customOpts.allowSort) {\n                initTpImg();\n            }\n            nextTick(() => {\n                const { data, exportConfig, importConfig, treeConfig, showOverflow } = props;\n                const { scrollXStore, scrollYStore } = internalData;\n                const editOpts = computeEditOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const radioOpts = computeRadioOpts.value;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const expandOpts = computeExpandOpts.value;\n                const rowOpts = computeRowOpts.value;\n                const customOpts = computeCustomOpts.value;\n                const mouseOpts = computeMouseOpts.value;\n                const exportOpts = computeExportOpts.value;\n                const importOpts = computeImportOpts.value;\n                if (props.rowId) {\n                    warnLog('vxe.error.delProp', ['row-id', 'row-config.keyField']);\n                }\n                if (props.rowKey) {\n                    warnLog('vxe.error.delProp', ['row-key', 'row-config.useKey']);\n                }\n                if (props.columnKey) {\n                    warnLog('vxe.error.delProp', ['column-id', 'column-config.useKey']);\n                }\n                if (!(props.rowId || rowOpts.keyField) && (checkboxOpts.reserve || checkboxOpts.checkRowKeys || radioOpts.reserve || radioOpts.checkRowKey || expandOpts.expandRowKeys || treeOpts.expandRowKeys)) {\n                    warnLog('vxe.error.reqProp', ['row-config.keyField']);\n                }\n                if (props.editConfig && (editOpts.showStatus || editOpts.showUpdateStatus || editOpts.showInsertStatus) && !props.keepSource) {\n                    warnLog('vxe.error.reqProp', ['keep-source']);\n                }\n                if (treeConfig && (treeOpts.showLine || treeOpts.line) && (!(props.rowKey || rowOpts.useKey) || !showOverflow)) {\n                    warnLog('vxe.error.reqProp', ['row-config.useKey | show-overflow']);\n                }\n                if (treeConfig && !treeOpts.transform && props.stripe) {\n                    warnLog('vxe.error.noTree', ['stripe']);\n                }\n                if (props.showFooter && !(props.footerMethod || props.footerData)) {\n                    warnLog('vxe.error.reqProp', ['footer-data | footer-method']);\n                }\n                if (rowOpts.height) {\n                    warnLog('vxe.error.delProp', ['row-config.height', 'cell-config.height']);\n                }\n                if (props.highlightCurrentRow) {\n                    warnLog('vxe.error.delProp', ['highlight-current-row', 'row-config.isCurrent']);\n                }\n                if (props.highlightHoverRow) {\n                    warnLog('vxe.error.delProp', ['highlight-hover-row', 'row-config.isHover']);\n                }\n                if (props.highlightCurrentColumn) {\n                    warnLog('vxe.error.delProp', ['highlight-current-column', 'column-config.isCurrent']);\n                }\n                if (props.highlightHoverColumn) {\n                    warnLog('vxe.error.delProp', ['highlight-hover-column', 'column-config.isHover']);\n                }\n                // 检查导入导出类型，如果自定义导入导出方法，则不校验类型\n                if (importConfig && importOpts.types && !importOpts.importMethod && !XEUtils.includeArrays(XEUtils.keys(importOpts._typeMaps), importOpts.types)) {\n                    warnLog('vxe.error.errProp', [`export-config.types=${importOpts.types.join(',')}`, importOpts.types.filter((type) => XEUtils.includes(XEUtils.keys(importOpts._typeMaps), type)).join(',') || XEUtils.keys(importOpts._typeMaps).join(',')]);\n                }\n                if (exportConfig && exportOpts.types && !exportOpts.exportMethod && !XEUtils.includeArrays(XEUtils.keys(exportOpts._typeMaps), exportOpts.types)) {\n                    warnLog('vxe.error.errProp', [`export-config.types=${exportOpts.types.join(',')}`, exportOpts.types.filter((type) => XEUtils.includes(XEUtils.keys(exportOpts._typeMaps), type)).join(',') || XEUtils.keys(exportOpts._typeMaps).join(',')]);\n                }\n                if (!props.id) {\n                    if ((props.customConfig ? isEnableConf(customOpts) : customOpts.enabled) && customOpts.storage) {\n                        errLog('vxe.error.reqProp', ['id']);\n                    }\n                }\n                if (props.treeConfig && checkboxOpts.range) {\n                    errLog('vxe.error.noTree', ['checkbox-config.range']);\n                }\n                if (rowOpts.height && !props.showOverflow) {\n                    warnLog('vxe.error.notProp', ['table.show-overflow']);\n                }\n                if (!$xeTable.handleCellAreaMousedownEvent) {\n                    if (props.areaConfig) {\n                        warnLog('vxe.error.notProp', ['area-config']);\n                    }\n                    if (props.clipConfig) {\n                        warnLog('vxe.error.notProp', ['clip-config']);\n                    }\n                    if (props.fnrConfig) {\n                        warnLog('vxe.error.notProp', ['fnr-config']);\n                    }\n                    if (mouseOpts.area) {\n                        errLog('vxe.error.notProp', ['mouse-config.area']);\n                        return;\n                    }\n                }\n                if (treeConfig && rowOpts.drag && !treeOpts.transform) {\n                    errLog('vxe.error.notSupportProp', ['column-config.drag', 'tree-config.transform=false', 'tree-config.transform=true']);\n                }\n                if (props.dragConfig) {\n                    warnLog('vxe.error.delProp', ['drag-config', 'row-drag-config']);\n                }\n                if (props.treeConfig && treeOpts.children) {\n                    warnLog('vxe.error.delProp', ['tree-config.children', 'tree-config.childrenField']);\n                }\n                if (props.treeConfig && treeOpts.line) {\n                    warnLog('vxe.error.delProp', ['tree-config.line', 'tree-config.showLine']);\n                }\n                if (mouseOpts.area && mouseOpts.selected) {\n                    warnLog('vxe.error.errConflicts', ['mouse-config.area', 'mouse-config.selected']);\n                }\n                if (mouseOpts.area && (props.treeConfig && !treeOpts.transform)) {\n                    errLog('vxe.error.noTree', ['mouse-config.area']);\n                }\n                if (props.editConfig && editOpts.activeMethod) {\n                    warnLog('vxe.error.delProp', ['edit-config.activeMethod', 'edit-config.beforeEditMethod']);\n                }\n                if (props.treeConfig && checkboxOpts.isShiftKey) {\n                    errLog('vxe.error.errConflicts', ['tree-config', 'checkbox-config.isShiftKey']);\n                }\n                if (checkboxOpts.halfField) {\n                    warnLog('vxe.error.delProp', ['checkbox-config.halfField', 'checkbox-config.indeterminateField']);\n                }\n                // 检查是否有安装需要的模块\n                if (props.editConfig && !$xeTable.insert) {\n                    errLog('vxe.error.reqModule', ['Edit']);\n                }\n                if (props.editRules && !$xeTable.validate) {\n                    errLog('vxe.error.reqModule', ['Validator']);\n                }\n                if ((checkboxOpts.range || props.keyboardConfig || props.mouseConfig) && !$xeTable.handleCellMousedownEvent) {\n                    errLog('vxe.error.reqModule', ['Keyboard']);\n                }\n                if ((props.printConfig || props.importConfig || props.exportConfig) && !$xeTable.exportData) {\n                    errLog('vxe.error.reqModule', ['Export']);\n                }\n                Object.assign(scrollYStore, {\n                    startIndex: 0,\n                    endIndex: 0,\n                    visibleSize: 0\n                });\n                Object.assign(scrollXStore, {\n                    startIndex: 0,\n                    endIndex: 0,\n                    visibleSize: 0\n                });\n                loadTableData(data || [], true).then(() => {\n                    if (data && data.length) {\n                        internalData.inited = true;\n                        internalData.initStatus = true;\n                        handleLoadDefaults();\n                    }\n                    handleInitDefaults();\n                    updateStyle();\n                });\n                if (props.autoResize) {\n                    const el = refElem.value;\n                    const parentEl = tablePrivateMethods.getParentElem();\n                    resizeObserver = globalResize.create(() => {\n                        if (props.autoResize) {\n                            tableMethods.recalculate(true);\n                        }\n                    });\n                    if (el) {\n                        resizeObserver.observe(el);\n                    }\n                    if (parentEl) {\n                        resizeObserver.observe(parentEl);\n                    }\n                }\n            });\n            const tableViewportEl = refTableViewportElem.value;\n            if (tableViewportEl) {\n                tableViewportEl.addEventListener('wheel', $xeTable.triggerBodyWheelEvent, { passive: false });\n            }\n            globalEvents.on($xeTable, 'paste', handleGlobalPasteEvent);\n            globalEvents.on($xeTable, 'copy', handleGlobalCopyEvent);\n            globalEvents.on($xeTable, 'cut', handleGlobalCutEvent);\n            globalEvents.on($xeTable, 'mousedown', handleGlobalMousedownEvent);\n            globalEvents.on($xeTable, 'blur', handleGlobalBlurEvent);\n            globalEvents.on($xeTable, 'mousewheel', handleGlobalMousewheelEvent);\n            globalEvents.on($xeTable, 'keydown', handleGlobalKeydownEvent);\n            globalEvents.on($xeTable, 'resize', handleGlobalResizeEvent);\n            globalEvents.on($xeTable, 'contextmenu', $xeTable.handleGlobalContextmenuEvent);\n            tablePrivateMethods.preventEvent(null, 'mounted', { $table: $xeTable });\n        });\n        onBeforeUnmount(() => {\n            const tableViewportEl = refTableViewportElem.value;\n            if (tableViewportEl) {\n                tableViewportEl.removeEventListener('wheel', $xeTable.triggerBodyWheelEvent);\n            }\n            if (resizeObserver) {\n                resizeObserver.disconnect();\n            }\n            tableMethods.closeFilter();\n            if ($xeTable.closeMenu) {\n                $xeTable.closeMenu();\n            }\n            tablePrivateMethods.preventEvent(null, 'beforeUnmount', { $table: $xeTable });\n        });\n        onUnmounted(() => {\n            globalEvents.off($xeTable, 'paste');\n            globalEvents.off($xeTable, 'copy');\n            globalEvents.off($xeTable, 'cut');\n            globalEvents.off($xeTable, 'mousedown');\n            globalEvents.off($xeTable, 'blur');\n            globalEvents.off($xeTable, 'mousewheel');\n            globalEvents.off($xeTable, 'keydown');\n            globalEvents.off($xeTable, 'resize');\n            globalEvents.off($xeTable, 'contextmenu');\n            tablePrivateMethods.preventEvent(null, 'unmounted', { $table: $xeTable });\n        });\n        nextTick(() => {\n            if (props.loading) {\n                if (!VxeUILoadingComponent && !slots.loading) {\n                    errLog('vxe.error.reqComp', ['vxe-loading']);\n                }\n            }\n            if ((props.showOverflow === true || props.showOverflow === 'tooltip') ||\n                (props.showHeaderOverflow === true || props.showHeaderOverflow === 'tooltip') ||\n                (props.showFooterOverflow === true || props.showFooterOverflow === 'tooltip') ||\n                props.tooltipConfig || props.editRules) {\n                if (!VxeUITooltipComponent) {\n                    errLog('vxe.error.reqComp', ['vxe-tooltip']);\n                }\n            }\n        });\n        provide('$xeColgroup', null);\n        provide('$xeTable', $xeTable);\n        $xeTable.renderVN = renderVN;\n        return $xeTable;\n    },\n    render() {\n        return this.renderVN();\n    }\n});\n", "import { defineComponent, TransitionGroup, h, ref, inject, nextTick, onMounted, onUnmounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../ui';\nimport { getOffsetSize, calcTreeLine, mergeBodyMethod, getRowid, createHandleGetRowId } from './util';\nimport { updateCellTitle, getPropClass } from '../../ui/src/dom';\nimport { isEnableConf } from '../../ui/src/utils';\nimport { getSlotVNs } from '../../ui/src/vn';\nconst { getI18n, renderer, renderEmptyElement } = VxeUI;\nconst renderType = 'body';\nexport default defineComponent({\n    name: 'VxeTableBody',\n    props: {\n        tableData: Array,\n        tableColumn: Array,\n        fixedColumn: Array,\n        fixedType: {\n            type: String,\n            default: ''\n        }\n    },\n    setup(props) {\n        const $xeTable = inject('$xeTable', {});\n        const { xID, props: tableProps, context: tableContext, reactData: tableReactData, internalData: tableInternalData } = $xeTable;\n        const { computeEditOpts, computeMouseOpts, computeCellOffsetWidth, computeAreaOpts, computeDefaultRowHeight, computeEmptyOpts, computeTooltipOpts, computeRadioOpts, computeExpandOpts, computeTreeOpts, computeCheckboxOpts, computeCellOpts, computeValidOpts, computeRowOpts, computeColumnOpts, computeRowDragOpts, computeColumnDragOpts, computeResizableOpts } = $xeTable.getComputeMaps();\n        const refElem = ref();\n        const refBodyScroll = ref();\n        const refBodyTable = ref();\n        const refBodyColgroup = ref();\n        const refBodyTBody = ref();\n        const refBodyXSpace = ref();\n        const refBodyYSpace = ref();\n        const refBodyEmptyBlock = ref();\n        // 滚动、拖动过程中不需要触发\n        const isVMScrollProcess = () => {\n            const { delayHover } = tableProps;\n            const { lastScrollTime, isDragResize } = tableReactData;\n            return !!(isDragResize || (lastScrollTime && Date.now() < lastScrollTime + delayHover));\n        };\n        const renderLine = (rowid, params, cellHeight) => {\n            const { row, column } = params;\n            const { afterFullData } = tableInternalData;\n            const { treeConfig } = tableProps;\n            const treeOpts = computeTreeOpts.value;\n            const { slots, treeNode } = column;\n            const { fullAllDataRowIdData } = tableInternalData;\n            if (slots && slots.line) {\n                return $xeTable.callSlot(slots.line, params);\n            }\n            const rest = fullAllDataRowIdData[rowid];\n            let rLevel = 0;\n            let prevRow = null;\n            if (rest) {\n                rLevel = rest.level;\n                prevRow = rest.items[rest.treeIndex - 1];\n            }\n            const isFirstRow = $xeTable.eqRow(afterFullData[0], row);\n            if (treeConfig && treeNode && (treeOpts.showLine || treeOpts.line)) {\n                return [\n                    h('div', {\n                        key: 'tl',\n                        class: 'vxe-tree--line-wrapper'\n                    }, [\n                        h('div', {\n                            class: 'vxe-tree--line',\n                            style: {\n                                height: `${isFirstRow ? 1 : calcTreeLine(params, prevRow)}px`,\n                                bottom: `-${Math.floor(cellHeight / 2)}px`,\n                                left: `${(rLevel * treeOpts.indent) + (rLevel ? 2 - getOffsetSize($xeTable) : 0) + 16}px`\n                            }\n                        })\n                    ])\n                ];\n            }\n            return [];\n        };\n        /**\n         * 渲染列\n         */\n        const renderTdColumn = (seq, rowid, fixedType, isOptimizeMode, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, columns, items) => {\n            const $xeGrid = $xeTable.xeGrid;\n            const { fullAllDataRowIdData, fullColumnIdData, visibleColumn } = tableInternalData;\n            const { columnKey, resizable: allResizable, showOverflow: allShowOverflow, border, height, cellClassName: allCellClassName, cellStyle, align: allAlign, spanMethod, mouseConfig, editConfig, editRules, tooltipConfig, padding: allPadding } = tableProps;\n            const { tableData, dragRow, overflowX, currentColumn, scrollXLoad, scrollYLoad, calcCellHeightFlag, resizeHeightFlag, resizeWidthFlag, mergeList, editStore, isAllOverflow, validErrorMaps } = tableReactData;\n            const { afterFullData, scrollXStore, scrollYStore } = tableInternalData;\n            const cellOpts = computeCellOpts.value;\n            const validOpts = computeValidOpts.value;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const editOpts = computeEditOpts.value;\n            const tooltipOpts = computeTooltipOpts.value;\n            const resizableOpts = computeResizableOpts.value;\n            const { isAllColumnDrag, isAllRowDrag } = resizableOpts;\n            const rowOpts = computeRowOpts.value;\n            const rowDragOpts = computeRowDragOpts.value;\n            const defaultRowHeight = computeDefaultRowHeight.value;\n            const customCellHeight = calcCellHeightFlag ? (cellOpts.height || rowOpts.height) : 0;\n            const { disabledMethod: dragDisabledMethod, isCrossDrag, isPeerDrag } = rowDragOpts;\n            const columnOpts = computeColumnOpts.value;\n            const mouseOpts = computeMouseOpts.value;\n            const areaOpts = computeAreaOpts.value;\n            const cellOffsetWidth = computeCellOffsetWidth.value;\n            const { selectCellToRow } = areaOpts;\n            const { type, cellRender, editRender, align, showOverflow, className, treeNode, rowResize, padding, verticalAlign, slots } = column;\n            const { verticalAlign: allVerticalAlign } = cellOpts;\n            const { actived } = editStore;\n            const rowRest = fullAllDataRowIdData[rowid] || {};\n            const colid = column.id;\n            const colRest = fullColumnIdData[colid] || {};\n            const renderOpts = editRender || cellRender;\n            const compConf = renderOpts ? renderer.get(renderOpts.name) : null;\n            const compCellClassName = compConf ? (compConf.tableCellClassName || compConf.cellClassName) : null;\n            const compCellStyle = compConf ? (compConf.tableCellStyle || compConf.cellStyle) : '';\n            const showAllTip = tooltipOpts.showAll;\n            const columnIndex = colRest.index;\n            const _columnIndex = colRest._index;\n            const isEdit = isEnableConf(editRender);\n            const resizeHeight = resizeHeightFlag ? rowRest.resizeHeight : 0;\n            let fixedHiddenColumn = fixedType ? column.fixed !== fixedType : column.fixed && overflowX;\n            const isCellPadding = XEUtils.eqNull(padding) ? (allPadding === null ? cellOpts.padding : allPadding) : padding;\n            const cellOverflow = XEUtils.eqNull(showOverflow) ? allShowOverflow : showOverflow;\n            const showEllipsis = cellOverflow === 'ellipsis';\n            const showTitle = cellOverflow === 'title';\n            const showTooltip = cellOverflow === true || cellOverflow === 'tooltip';\n            const hasEllipsis = isAllOverflow || showTitle || showTooltip || showEllipsis;\n            const showResizable = (XEUtils.isBoolean(column.resizable) ? column.resizable : (columnOpts.resizable || allResizable));\n            const isCsHeight = !!customCellHeight;\n            const isRsHeight = resizeHeight > 0;\n            let isDirty;\n            const tdOns = {};\n            const cellAlign = align || (compConf ? compConf.tableCellAlign : '') || allAlign;\n            const cellVerticalAlign = XEUtils.eqNull(verticalAlign) ? allVerticalAlign : verticalAlign;\n            const errorValidItem = validErrorMaps[`${rowid}:${colid}`];\n            const showValidTip = editRules && validOpts.showMessage && (validOpts.message === 'default' ? (height || tableData.length > 1) : validOpts.message === 'inline');\n            const tdAttrs = { colid };\n            const cellParams = {\n                $table: $xeTable,\n                $grid: $xeGrid,\n                isEdit: false,\n                seq,\n                rowid,\n                row,\n                rowIndex,\n                $rowIndex,\n                _rowIndex,\n                column,\n                columnIndex,\n                $columnIndex,\n                _columnIndex,\n                fixed: fixedType,\n                type: renderType,\n                isHidden: !!fixedHiddenColumn,\n                level: rowLevel,\n                visibleData: afterFullData,\n                data: tableData,\n                items\n            };\n            let isRowDragCell = false;\n            let isDisabledDrag = false;\n            if (rowOpts.drag) {\n                isRowDragCell = rowDragOpts.trigger === 'row' || (column.dragSort && rowDragOpts.trigger === 'cell');\n            }\n            if (isRowDragCell) {\n                isDisabledDrag = !!(dragDisabledMethod && dragDisabledMethod(cellParams));\n            }\n            // hover 进入事件\n            if (showTitle || showTooltip || showAllTip || tooltipConfig) {\n                tdOns.onMouseenter = (evnt) => {\n                    if (isVMScrollProcess()) {\n                        return;\n                    }\n                    if (showTitle) {\n                        updateCellTitle(evnt.currentTarget, column);\n                    }\n                    else if (showTooltip || showAllTip) {\n                        // 如果配置了显示 tooltip\n                        $xeTable.triggerBodyTooltipEvent(evnt, cellParams);\n                    }\n                    $xeTable.dispatchEvent('cell-mouseenter', Object.assign({ cell: evnt.currentTarget }, cellParams), evnt);\n                };\n            }\n            // hover 退出事件\n            if (showTooltip || showAllTip || tooltipConfig) {\n                tdOns.onMouseleave = (evnt) => {\n                    if (isVMScrollProcess()) {\n                        return;\n                    }\n                    if (showTooltip || showAllTip) {\n                        $xeTable.handleTargetLeaveEvent(evnt);\n                    }\n                    $xeTable.dispatchEvent('cell-mouseleave', Object.assign({ cell: evnt.currentTarget }, cellParams), evnt);\n                };\n            }\n            // 按下事件处理\n            if (isRowDragCell || checkboxOpts.range || mouseConfig) {\n                tdOns.onMousedown = (evnt) => {\n                    $xeTable.triggerCellMousedownEvent(evnt, cellParams);\n                };\n            }\n            // 拖拽列事件\n            if (isRowDragCell) {\n                tdOns.onMouseup = $xeTable.triggerCellMouseupEvent;\n            }\n            // 点击事件处理\n            tdOns.onClick = (evnt) => {\n                $xeTable.triggerCellClickEvent(evnt, cellParams);\n            };\n            // 双击事件处理\n            tdOns.onDblclick = (evnt) => {\n                $xeTable.triggerCellDblclickEvent(evnt, cellParams);\n            };\n            let isMergeCell = false;\n            // 合并行或列\n            if (mergeList.length) {\n                const spanRest = mergeBodyMethod(mergeList, _rowIndex, _columnIndex);\n                if (spanRest) {\n                    const { rowspan, colspan } = spanRest;\n                    if (!rowspan || !colspan) {\n                        return null;\n                    }\n                    if (rowspan > 1) {\n                        isMergeCell = true;\n                        tdAttrs.rowspan = rowspan;\n                    }\n                    if (colspan > 1) {\n                        isMergeCell = true;\n                        tdAttrs.colspan = colspan;\n                    }\n                }\n            }\n            else if (spanMethod) {\n                // 自定义合并行或列的方法\n                const { rowspan = 1, colspan = 1 } = spanMethod(cellParams) || {};\n                if (!rowspan || !colspan) {\n                    return null;\n                }\n                if (rowspan > 1) {\n                    tdAttrs.rowspan = rowspan;\n                }\n                if (colspan > 1) {\n                    tdAttrs.colspan = colspan;\n                }\n            }\n            // 如果被合并不可隐藏\n            if (fixedHiddenColumn && mergeList) {\n                if (tdAttrs.colspan > 1 || tdAttrs.rowspan > 1) {\n                    fixedHiddenColumn = false;\n                }\n            }\n            // 如果编辑列开启显示状态\n            if (!fixedHiddenColumn && editConfig && (editRender || cellRender) && (editOpts.showStatus || editOpts.showUpdateStatus)) {\n                isDirty = $xeTable.isUpdateByRow(row, column.field);\n            }\n            const isVNAutoHeight = scrollYLoad && !hasEllipsis;\n            const cellHeight = rowRest.resizeHeight || cellOpts.height || rowOpts.height || rowRest.height || defaultRowHeight;\n            const isLastColumn = $columnIndex === columns.length - 1;\n            const isAutoCellWidth = !column.resizeWidth && (column.minWidth === 'auto' || column.width === 'auto');\n            let isVNPreEmptyStatus = false;\n            if (!isMergeCell) {\n                if (!dragRow || getRowid($xeTable, dragRow) !== rowid) {\n                    if (scrollYLoad && (_rowIndex < scrollYStore.visibleStartIndex - scrollYStore.preloadSize || _rowIndex > scrollYStore.visibleEndIndex + scrollYStore.preloadSize)) {\n                        isVNPreEmptyStatus = true;\n                    }\n                    else if (scrollXLoad && !column.fixed && (_columnIndex < scrollXStore.visibleStartIndex - scrollXStore.preloadSize || _columnIndex > scrollXStore.visibleEndIndex + scrollXStore.preloadSize)) {\n                        isVNPreEmptyStatus = true;\n                    }\n                }\n            }\n            const tcStyle = {};\n            if (hasEllipsis && resizeWidthFlag) {\n                let tsColspan = tdAttrs.colspan || 0;\n                if (tsColspan > 1) {\n                    for (let index = 1; index < tsColspan; index++) {\n                        const nextColumn = visibleColumn[columnIndex + index];\n                        if (nextColumn) {\n                            tsColspan += nextColumn.renderWidth;\n                        }\n                    }\n                }\n                tcStyle.width = `${column.renderWidth - (cellOffsetWidth * tsColspan)}px`;\n            }\n            if (scrollYLoad || hasEllipsis || isCsHeight || isRsHeight) {\n                tcStyle.height = `${cellHeight}px`;\n            }\n            else {\n                tcStyle.minHeight = `${cellHeight}px`;\n            }\n            const tdVNs = [];\n            if (fixedHiddenColumn && isAllOverflow) {\n                tdVNs.push(h('div', {\n                    key: 'tc',\n                    class: ['vxe-cell', {\n                            'c--title': showTitle,\n                            'c--tooltip': showTooltip,\n                            'c--ellipsis': showEllipsis\n                        }],\n                    style: tcStyle\n                }));\n            }\n            else {\n                // 渲染单元格\n                tdVNs.push(...renderLine(rowid, cellParams, cellHeight), h('div', {\n                    key: 'tc',\n                    class: ['vxe-cell', {\n                            'c--title': showTitle,\n                            'c--tooltip': showTooltip,\n                            'c--ellipsis': showEllipsis\n                        }],\n                    style: tcStyle,\n                    title: showTitle ? $xeTable.getCellLabel(row, column) : null\n                }, isVNPreEmptyStatus\n                    ? []\n                    : [\n                        h('div', {\n                            colid,\n                            rowid,\n                            class: 'vxe-cell--wrapper'\n                        }, column.renderCell(cellParams))\n                    ]));\n                if (showValidTip && errorValidItem) {\n                    const errRule = errorValidItem.rule;\n                    const validSlot = slots ? slots.valid : null;\n                    const validParams = Object.assign(Object.assign(Object.assign({}, cellParams), errorValidItem), { rule: errorValidItem });\n                    tdVNs.push(h('div', {\n                        key: 'tcv',\n                        class: ['vxe-cell--valid-error-tip', getPropClass(validOpts.className, validParams)],\n                        style: errRule && errRule.maxWidth\n                            ? {\n                                width: `${errRule.maxWidth}px`\n                            }\n                            : null\n                    }, [\n                        h('div', {\n                            class: `vxe-cell--valid-error-wrapper vxe-cell--valid-error-theme-${validOpts.theme || 'normal'}`\n                        }, [\n                            validSlot\n                                ? $xeTable.callSlot(validSlot, validParams)\n                                : [\n                                    h('span', {\n                                        class: 'vxe-cell--valid-error-msg'\n                                    }, errorValidItem.content)\n                                ]\n                        ])\n                    ]));\n                }\n            }\n            let showAreaRowStatus = false;\n            if (mouseConfig && mouseOpts.area && selectCellToRow) {\n                if ((!_columnIndex && selectCellToRow === true) ||\n                    (selectCellToRow === column.field)) {\n                    showAreaRowStatus = true;\n                }\n            }\n            if (!fixedHiddenColumn && showResizable && isAllColumnDrag) {\n                tdVNs.push(h('div', {\n                    key: 'tcc',\n                    class: ['vxe-cell--col-resizable', {\n                            'is--line': !border || border === 'none'\n                        }],\n                    onMousedown: (evnt) => $xeTable.handleColResizeMousedownEvent(evnt, fixedType, cellParams),\n                    onDblclick: (evnt) => $xeTable.handleColResizeDblclickEvent(evnt, cellParams)\n                }));\n            }\n            if ((rowResize || isAllRowDrag) && rowOpts.resizable) {\n                tdVNs.push(h('div', {\n                    key: 'tcr',\n                    class: 'vxe-cell--row-resizable',\n                    onMousedown: (evnt) => $xeTable.handleRowResizeMousedownEvent(evnt, cellParams),\n                    onDblclick: (evnt) => $xeTable.handleRowResizeDblclickEvent(evnt, cellParams)\n                }));\n            }\n            return h('td', Object.assign(Object.assign(Object.assign({ class: [\n                    'vxe-body--column',\n                    colid,\n                    cellVerticalAlign ? `col--vertical-${cellVerticalAlign}` : '',\n                    cellAlign ? `col--${cellAlign}` : '',\n                    type ? `col--${type}` : '',\n                    {\n                        'col--last': isLastColumn,\n                        'col--tree-node': treeNode,\n                        'col--edit': isEdit,\n                        'col--ellipsis': hasEllipsis,\n                        'col--cs-height': isCsHeight,\n                        'col--rs-height': isRsHeight,\n                        'col--to-row': showAreaRowStatus,\n                        'col--auto-height': isVNAutoHeight,\n                        'fixed--width': !isAutoCellWidth,\n                        'fixed--hidden': fixedHiddenColumn,\n                        'is--padding': isCellPadding,\n                        'is--progress': (fixedHiddenColumn && isAllOverflow) || isVNPreEmptyStatus,\n                        'is--drag-cell': isRowDragCell && (isCrossDrag || isPeerDrag || !rowLevel),\n                        'is--drag-disabled': isDisabledDrag,\n                        'col--dirty': isDirty,\n                        'col--active': editConfig && isEdit && (actived.row === row && (actived.column === column || editOpts.mode === 'row')),\n                        'col--valid-error': !!errorValidItem,\n                        'col--current': currentColumn === column\n                    },\n                    getPropClass(compCellClassName, cellParams),\n                    getPropClass(className, cellParams),\n                    getPropClass(allCellClassName, cellParams)\n                ], key: columnKey || scrollXLoad || scrollYLoad || columnOpts.useKey || rowOpts.useKey || columnOpts.drag ? colid : $columnIndex }, tdAttrs), { style: Object.assign({}, XEUtils.isFunction(compCellStyle) ? compCellStyle(cellParams) : compCellStyle, XEUtils.isFunction(cellStyle) ? cellStyle(cellParams) : cellStyle) }), tdOns), isOptimizeMode && fixedHiddenColumn ? [] : tdVNs);\n        };\n        const renderRows = (fixedType, isOptimizeMode, tableData, tableColumn) => {\n            const { stripe, rowKey, highlightHoverRow, rowClassName, rowStyle, editConfig, treeConfig } = tableProps;\n            const { hasFixedColumn, treeExpandedFlag, isColLoading, scrollXLoad, scrollYLoad, isAllOverflow, rowExpandedFlag, expandColumn, selectRadioRow, pendingRowFlag, isDragColMove, rowExpandHeightFlag } = tableReactData;\n            const { fullAllDataRowIdData, treeExpandedMaps, pendingRowMaps, rowExpandedMaps } = tableInternalData;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const radioOpts = computeRadioOpts.value;\n            const treeOpts = computeTreeOpts.value;\n            const editOpts = computeEditOpts.value;\n            const rowOpts = computeRowOpts.value;\n            const columnOpts = computeColumnOpts.value;\n            const columnDragOpts = computeColumnDragOpts.value;\n            const { transform, seqMode } = treeOpts;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const rows = [];\n            const { handleGetRowId } = createHandleGetRowId($xeTable);\n            tableData.forEach((row, $rowIndex) => {\n                const rowid = handleGetRowId(row);\n                const rowRest = fullAllDataRowIdData[rowid] || {};\n                let rowIndex = $rowIndex;\n                let rowLevel = 0;\n                let seq = -1;\n                let _rowIndex = -1;\n                const trOn = {};\n                // 当前行事件\n                if (rowOpts.isHover || highlightHoverRow) {\n                    trOn.onMouseenter = (evnt) => {\n                        if (isVMScrollProcess()) {\n                            return;\n                        }\n                        $xeTable.triggerHoverEvent(evnt, { row, rowIndex });\n                    };\n                    trOn.onMouseleave = () => {\n                        if (isVMScrollProcess()) {\n                            return;\n                        }\n                        $xeTable.clearHoverRow();\n                    };\n                }\n                if (rowRest) {\n                    rowLevel = rowRest.level;\n                    if (treeConfig && transform && seqMode === 'increasing') {\n                        seq = rowRest._index + 1;\n                    }\n                    else {\n                        seq = rowRest.seq;\n                    }\n                    rowIndex = rowRest.index;\n                    _rowIndex = rowRest._index;\n                }\n                const params = { $table: $xeTable, seq, rowid, fixed: fixedType, type: renderType, level: rowLevel, row, rowIndex, $rowIndex, _rowIndex };\n                // 行是否被展开\n                const isExpandRow = expandColumn && !!rowExpandedFlag && !!rowExpandedMaps[rowid];\n                // 树节点是否被展开\n                let isExpandTree = false;\n                let rowChildren = [];\n                let isNewRow = false;\n                if (editConfig) {\n                    isNewRow = $xeTable.isInsertByRow(row);\n                }\n                if (treeConfig && !scrollYLoad && !transform) {\n                    rowChildren = row[childrenField];\n                    isExpandTree = !!treeExpandedFlag && rowChildren && rowChildren.length > 0 && !!treeExpandedMaps[rowid];\n                }\n                // 拖拽行事件\n                if (rowOpts.drag && (!treeConfig || transform)) {\n                    trOn.onDragstart = $xeTable.handleRowDragDragstartEvent;\n                    trOn.onDragend = $xeTable.handleRowDragDragendEvent;\n                    trOn.onDragover = $xeTable.handleRowDragDragoverEvent;\n                }\n                const trClass = [\n                    'vxe-body--row',\n                    treeConfig ? `row--level-${rowLevel}` : '',\n                    {\n                        'row--stripe': stripe && (_rowIndex + 1) % 2 === 0,\n                        'is--new': isNewRow,\n                        'is--expand-row': isExpandRow,\n                        'is--expand-tree': isExpandTree,\n                        'row--new': isNewRow && (editOpts.showStatus || editOpts.showInsertStatus),\n                        'row--radio': radioOpts.highlight && $xeTable.eqRow(selectRadioRow, row),\n                        'row--checked': checkboxOpts.highlight && $xeTable.isCheckedByCheckboxRow(row),\n                        'row--pending': !!pendingRowFlag && !!pendingRowMaps[rowid]\n                    },\n                    getPropClass(rowClassName, params)\n                ];\n                const tdVNs = tableColumn.map((column, $columnIndex) => {\n                    return renderTdColumn(seq, rowid, fixedType, isOptimizeMode, rowLevel, row, rowIndex, $rowIndex, _rowIndex, column, $columnIndex, tableColumn, tableData);\n                });\n                rows.push(!isColLoading && (columnOpts.drag && columnDragOpts.animation)\n                    ? h(TransitionGroup, Object.assign({ name: `vxe-header--col-list${isDragColMove ? '' : '-disabled'}`, tag: 'tr', class: trClass, rowid: rowid, style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle(params) : rowStyle) : null, key: rowKey || scrollXLoad || scrollYLoad || rowOpts.useKey || rowOpts.drag || columnOpts.drag || treeConfig ? rowid : $rowIndex }, trOn), {\n                        default: () => tdVNs\n                    })\n                    : h('tr', Object.assign({ class: trClass, rowid: rowid, style: rowStyle ? (XEUtils.isFunction(rowStyle) ? rowStyle(params) : rowStyle) : null, key: rowKey || scrollXLoad || scrollYLoad || rowOpts.useKey || rowOpts.drag || columnOpts.drag || treeConfig ? rowid : $rowIndex }, trOn), tdVNs));\n                // 如果行被展开了\n                if (isExpandRow) {\n                    const expandOpts = computeExpandOpts.value;\n                    const { height: expandHeight, padding, mode: expandMode } = expandOpts;\n                    if (expandMode === 'fixed') {\n                        rows.push(h('tr', {\n                            class: 'vxe-body--row-expanded-place',\n                            key: `expand_${rowid}`,\n                            rowid\n                        }, [\n                            h('td', {\n                                class: 'vxe-body--row-expanded-place-column',\n                                colspan: tableColumn.length,\n                                style: {\n                                    height: `${rowExpandHeightFlag ? (rowRest.expandHeight || expandHeight) : 0}px`\n                                }\n                            })\n                        ]));\n                    }\n                    else {\n                        const cellStyle = {};\n                        if (expandHeight) {\n                            cellStyle.height = `${expandHeight}px`;\n                        }\n                        if (treeConfig) {\n                            cellStyle.paddingLeft = `${(rowLevel * treeOpts.indent) + 30}px`;\n                        }\n                        const { showOverflow } = expandColumn;\n                        const hasEllipsis = (XEUtils.isUndefined(showOverflow) || XEUtils.isNull(showOverflow)) ? isAllOverflow : showOverflow;\n                        const expandParams = { $table: $xeTable, seq, column: expandColumn, fixed: fixedType, type: renderType, level: rowLevel, row, rowIndex, $rowIndex, _rowIndex };\n                        rows.push(h('tr', {\n                            class: ['vxe-body--expanded-row', {\n                                    'is--padding': padding\n                                }],\n                            key: `expand_${rowid}`\n                        }, [\n                            h('td', {\n                                class: ['vxe-body--expanded-column', {\n                                        'fixed--hidden': fixedType && !hasFixedColumn,\n                                        'col--ellipsis': hasEllipsis\n                                    }],\n                                colspan: tableColumn.length\n                            }, [\n                                h('div', {\n                                    class: ['vxe-body--expanded-cell', {\n                                            'is--ellipsis': expandHeight\n                                        }],\n                                    style: cellStyle\n                                }, [\n                                    expandColumn.renderData(expandParams)\n                                ])\n                            ])\n                        ]));\n                    }\n                }\n                // 如果是树形表格\n                if (isExpandTree) {\n                    rows.push(...renderRows(fixedType, isOptimizeMode, rowChildren, tableColumn));\n                }\n            });\n            return rows;\n        };\n        onMounted(() => {\n            nextTick(() => {\n                const { fixedType } = props;\n                const { elemStore } = tableInternalData;\n                const prefix = `${fixedType || 'main'}-body-`;\n                elemStore[`${prefix}wrapper`] = refElem;\n                elemStore[`${prefix}scroll`] = refBodyScroll;\n                elemStore[`${prefix}table`] = refBodyTable;\n                elemStore[`${prefix}colgroup`] = refBodyColgroup;\n                elemStore[`${prefix}list`] = refBodyTBody;\n                elemStore[`${prefix}xSpace`] = refBodyXSpace;\n                elemStore[`${prefix}ySpace`] = refBodyYSpace;\n                elemStore[`${prefix}emptyBlock`] = refBodyEmptyBlock;\n            });\n        });\n        onUnmounted(() => {\n            const { fixedType } = props;\n            const { elemStore } = tableInternalData;\n            const prefix = `${fixedType || 'main'}-body-`;\n            elemStore[`${prefix}wrapper`] = null;\n            elemStore[`${prefix}scroll`] = null;\n            elemStore[`${prefix}table`] = null;\n            elemStore[`${prefix}colgroup`] = null;\n            elemStore[`${prefix}list`] = null;\n            elemStore[`${prefix}xSpace`] = null;\n            elemStore[`${prefix}ySpace`] = null;\n            elemStore[`${prefix}emptyBlock`] = null;\n        });\n        const renderVN = () => {\n            const { slots } = tableContext;\n            const $xeGrid = $xeTable.xeGrid;\n            const { fixedColumn, fixedType, tableColumn } = props;\n            const { spanMethod, footerSpanMethod, mouseConfig } = tableProps;\n            const { isGroup, tableData, isRowLoading, isColLoading, overflowX, scrollXLoad, scrollYLoad, isAllOverflow, isDragRowMove, expandColumn, dragRow, dragCol } = tableReactData;\n            const { visibleColumn, fullAllDataRowIdData, fullColumnIdData } = tableInternalData;\n            const rowOpts = computeRowOpts.value;\n            const emptyOpts = computeEmptyOpts.value;\n            const mouseOpts = computeMouseOpts.value;\n            const rowDragOpts = computeRowDragOpts.value;\n            const expandOpts = computeExpandOpts.value;\n            let renderDataList = tableData;\n            let renderColumnList = tableColumn;\n            let isOptimizeMode = false;\n            // 如果是使用优化模式\n            if (scrollXLoad || scrollYLoad || isAllOverflow) {\n                if ((expandColumn && expandOpts.mode !== 'fixed') || spanMethod || footerSpanMethod) {\n                    // 如果不支持优化模式\n                }\n                else {\n                    isOptimizeMode = true;\n                }\n            }\n            if (!isColLoading && (fixedType || !overflowX)) {\n                renderColumnList = visibleColumn;\n            }\n            if (fixedType) {\n                if (isOptimizeMode) {\n                    renderColumnList = fixedColumn || [];\n                }\n            }\n            // 行拖拽\n            if (scrollYLoad && dragRow) {\n                if (renderDataList.length > 2) {\n                    const dRowRest = fullAllDataRowIdData[getRowid($xeTable, dragRow)];\n                    if (dRowRest) {\n                        const drIndex = dRowRest._index;\n                        const firstRow = renderDataList[0];\n                        const lastRow = renderDataList[renderDataList.length - 1];\n                        const firstRowRest = fullAllDataRowIdData[getRowid($xeTable, firstRow)];\n                        const lastRowRest = fullAllDataRowIdData[getRowid($xeTable, lastRow)];\n                        if (firstRowRest && lastRowRest) {\n                            const frIndex = firstRowRest._index;\n                            const lrIndex = lastRowRest._index;\n                            if (drIndex < frIndex) {\n                                renderDataList = [dragRow].concat(renderDataList);\n                            }\n                            else if (drIndex > lrIndex) {\n                                renderDataList = renderDataList.concat([dragRow]);\n                            }\n                        }\n                    }\n                }\n            }\n            if (!fixedType && !isGroup) {\n                // 列拖拽\n                if (scrollXLoad && dragCol) {\n                    if (renderColumnList.length > 2) {\n                        const dCowRest = fullColumnIdData[dragCol.id];\n                        if (dCowRest) {\n                            const dcIndex = dCowRest._index;\n                            const firstCol = renderColumnList[0];\n                            const lastCol = renderColumnList[renderColumnList.length - 1];\n                            const firstColRest = fullColumnIdData[firstCol.id];\n                            const lastColRest = fullColumnIdData[lastCol.id];\n                            if (firstColRest && lastColRest) {\n                                const fcIndex = firstColRest._index;\n                                const lcIndex = lastColRest._index;\n                                if (dcIndex < fcIndex) {\n                                    renderColumnList = [dragCol].concat(renderColumnList);\n                                }\n                                else if (dcIndex > lcIndex) {\n                                    renderColumnList = renderColumnList.concat([dragCol]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            let emptyContent;\n            const emptySlot = slots ? slots.empty : null;\n            if (emptySlot) {\n                emptyContent = $xeTable.callSlot(emptySlot, { $table: $xeTable, $grid: $xeGrid });\n            }\n            else {\n                const compConf = emptyOpts.name ? renderer.get(emptyOpts.name) : null;\n                const rtEmptyView = compConf ? (compConf.renderTableEmpty || compConf.renderTableEmptyView || compConf.renderEmpty) : null;\n                if (rtEmptyView) {\n                    emptyContent = getSlotVNs(rtEmptyView(emptyOpts, { $table: $xeTable }));\n                }\n                else {\n                    emptyContent = tableProps.emptyText || getI18n('vxe.table.emptyText');\n                }\n            }\n            const ons = {\n                onScroll(evnt) {\n                    $xeTable.triggerBodyScrollEvent(evnt, fixedType);\n                }\n            };\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-table--body-wrapper', fixedType ? `fixed-${fixedType}--wrapper` : 'body--wrapper'],\n                xid: xID\n            }, [\n                h('div', Object.assign({ ref: refBodyScroll, class: 'vxe-table--body-inner-wrapper' }, ons), [\n                    fixedType\n                        ? renderEmptyElement($xeTable)\n                        : h('div', {\n                            ref: refBodyXSpace,\n                            class: 'vxe-body--x-space'\n                        }),\n                    h('div', {\n                        ref: refBodyYSpace,\n                        class: 'vxe-body--y-space'\n                    }),\n                    h('table', {\n                        ref: refBodyTable,\n                        class: 'vxe-table--body',\n                        xid: xID,\n                        cellspacing: 0,\n                        cellpadding: 0,\n                        border: 0\n                    }, [\n                        /**\n                         * 列宽\n                         */\n                        h('colgroup', {\n                            ref: refBodyColgroup\n                        }, renderColumnList.map((column, $columnIndex) => {\n                            return h('col', {\n                                name: column.id,\n                                key: $columnIndex,\n                                style: {\n                                    width: `${column.renderWidth}px`\n                                }\n                            });\n                        })),\n                        /**\n                         * 内容\n                         */\n                        !(isRowLoading || isColLoading) && (rowOpts.drag && rowDragOpts.animation)\n                            ? h(TransitionGroup, {\n                                ref: refBodyTBody,\n                                name: `vxe-body--row-list${isDragRowMove ? '' : '-disabled'}`,\n                                tag: 'tbody'\n                            }, {\n                                default: () => renderRows(fixedType, isOptimizeMode, renderDataList, renderColumnList)\n                            })\n                            : h('tbody', {\n                                ref: refBodyTBody\n                            }, renderRows(fixedType, isOptimizeMode, renderDataList, renderColumnList))\n                    ]),\n                    h('div', {\n                        class: 'vxe-table--checkbox-range'\n                    }),\n                    mouseConfig && mouseOpts.area\n                        ? h('div', {\n                            class: 'vxe-table--cell-area'\n                        }, [\n                            h('span', {\n                                class: 'vxe-table--cell-main-area'\n                            }, mouseOpts.extension\n                                ? [\n                                    h('span', {\n                                        class: 'vxe-table--cell-main-area-btn',\n                                        onMousedown(evnt) {\n                                            if ($xeTable.triggerCellAreaExtendMousedownEvent) {\n                                                $xeTable.triggerCellAreaExtendMousedownEvent(evnt, { $table: $xeTable, fixed: fixedType, type: renderType });\n                                            }\n                                        }\n                                    })\n                                ]\n                                : []),\n                            h('span', {\n                                class: 'vxe-table--cell-copy-area'\n                            }),\n                            h('span', {\n                                class: 'vxe-table--cell-extend-area'\n                            }),\n                            h('span', {\n                                class: 'vxe-table--cell-multi-area'\n                            }),\n                            h('span', {\n                                class: 'vxe-table--cell-active-area'\n                            }),\n                            h('span', {\n                                class: 'vxe-table--cell-row-status-area'\n                            })\n                        ])\n                        : renderEmptyElement($xeTable),\n                    !fixedType\n                        ? h('div', {\n                            class: 'vxe-table--empty-block',\n                            ref: refBodyEmptyBlock\n                        }, [\n                            h('div', {\n                                class: 'vxe-table--empty-content'\n                            }, emptyContent)\n                        ])\n                        : renderEmptyElement($xeTable)\n                ])\n            ]);\n        };\n        return renderVN;\n    }\n});\n", "import { defineComponent, TransitionGroup, h, ref, inject, nextTick, watch, onMounted, onUnmounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../ui';\nimport { getCellHeight, convertHeaderColumnToRows } from './util';\nconst { renderer, renderEmptyElement } = VxeUI;\nconst renderType = 'header';\nexport default defineComponent({\n    name: 'VxeTableHeader',\n    props: {\n        tableData: Array,\n        tableColumn: Array,\n        tableGroupColumn: Array,\n        fixedColumn: Array,\n        fixedType: {\n            type: String,\n            default: null\n        }\n    },\n    setup(props) {\n        const $xeTable = inject('$xeTable', {});\n        const { xID, props: tableProps, reactData: tableReactData, internalData: tableInternalData } = $xeTable;\n        const { computeColumnOpts, computeColumnDragOpts, computeCellOpts, computeMouseOpts, computeHeaderCellOpts, computeDefaultRowHeight } = $xeTable.getComputeMaps();\n        const headerColumn = ref([]);\n        const refElem = ref();\n        const refHeaderScroll = ref();\n        const refHeaderTable = ref();\n        const refHeaderColgroup = ref();\n        const refHeaderTHead = ref();\n        const refHeaderXSpace = ref();\n        const refHeaderBorderRepair = ref();\n        const uploadColumn = () => {\n            const { isGroup } = tableReactData;\n            headerColumn.value = isGroup ? convertHeaderColumnToRows(props.tableGroupColumn) : [];\n        };\n        const renderRows = (isGroup, isOptimizeMode, cols, $rowIndex) => {\n            const $xeGrid = $xeTable.xeGrid;\n            const { fixedType } = props;\n            const { resizable: allResizable, columnKey, headerCellClassName, headerCellStyle, showHeaderOverflow: allColumnHeaderOverflow, headerAlign: allHeaderAlign, align: allAlign, mouseConfig } = tableProps;\n            const { currentColumn, dragCol, scrollXLoad, scrollYLoad, overflowX } = tableReactData;\n            const { fullColumnIdData, scrollXStore } = tableInternalData;\n            const columnOpts = computeColumnOpts.value;\n            const columnDragOpts = computeColumnDragOpts.value;\n            const cellOpts = computeCellOpts.value;\n            const defaultRowHeight = computeDefaultRowHeight.value;\n            const headerCellOpts = computeHeaderCellOpts.value;\n            const currCellHeight = getCellHeight(headerCellOpts.height || cellOpts.height) || defaultRowHeight;\n            const { disabledMethod: dragDisabledMethod, isCrossDrag, isPeerDrag } = columnDragOpts;\n            return cols.map((column, $columnIndex) => {\n                const { type, showHeaderOverflow, headerAlign, align, filters, headerClassName, editRender, cellRender } = column;\n                const colid = column.id;\n                const colRest = fullColumnIdData[colid] || {};\n                const renderOpts = editRender || cellRender;\n                const compConf = renderOpts ? renderer.get(renderOpts.name) : null;\n                const isColGroup = column.children && column.children.length;\n                const fixedHiddenColumn = fixedType ? (column.fixed !== fixedType && !isColGroup) : !!column.fixed && overflowX;\n                const isPadding = XEUtils.isBoolean(headerCellOpts.padding) ? headerCellOpts.padding : cellOpts.padding;\n                const headOverflow = XEUtils.eqNull(showHeaderOverflow) ? allColumnHeaderOverflow : showHeaderOverflow;\n                const headAlign = headerAlign || (compConf ? compConf.tableHeaderCellAlign : '') || allHeaderAlign || align || (compConf ? compConf.tableCellAlign : '') || allAlign;\n                let showEllipsis = headOverflow === 'ellipsis';\n                const showTitle = headOverflow === 'title';\n                const showTooltip = headOverflow === true || headOverflow === 'tooltip';\n                let hasEllipsis = showTitle || showTooltip || showEllipsis;\n                let hasFilter = false;\n                let firstFilterOption = null;\n                if (filters) {\n                    firstFilterOption = filters[0];\n                    hasFilter = filters.some((item) => item.checked);\n                }\n                const columnIndex = colRest.index;\n                const _columnIndex = colRest._index;\n                const cellParams = { $table: $xeTable, $grid: $xeGrid, $rowIndex, column, columnIndex, $columnIndex, _columnIndex, firstFilterOption, fixed: fixedType, type: renderType, isHidden: fixedHiddenColumn, hasFilter };\n                const thAttrs = {\n                    colid,\n                    colspan: column.colSpan > 1 ? column.colSpan : null,\n                    rowspan: column.rowSpan > 1 ? column.rowSpan : null\n                };\n                const thOns = {\n                    onClick: (evnt) => $xeTable.triggerHeaderCellClickEvent(evnt, cellParams),\n                    onDblclick: (evnt) => $xeTable.triggerHeaderCellDblclickEvent(evnt, cellParams)\n                };\n                // 横向虚拟滚动不支持动态行高\n                if (scrollXLoad && !hasEllipsis) {\n                    showEllipsis = hasEllipsis = true;\n                }\n                const isColDragCell = columnOpts.drag && columnDragOpts.trigger === 'cell';\n                let isDisabledDrag = false;\n                if (isColDragCell) {\n                    isDisabledDrag = !!(dragDisabledMethod && dragDisabledMethod(cellParams));\n                }\n                // 按下事件处理\n                if (mouseConfig || isColDragCell) {\n                    thOns.onMousedown = (evnt) => $xeTable.triggerHeaderCellMousedownEvent(evnt, cellParams);\n                }\n                // 拖拽列事件\n                if (columnOpts.drag) {\n                    thOns.onDragstart = $xeTable.handleHeaderCellDragDragstartEvent;\n                    thOns.onDragend = $xeTable.handleHeaderCellDragDragendEvent;\n                    thOns.onDragover = $xeTable.handleHeaderCellDragDragoverEvent;\n                    if (isColDragCell) {\n                        thOns.onMouseup = $xeTable.handleHeaderCellDragMouseupEvent;\n                    }\n                }\n                const isLastColumn = $columnIndex === cols.length - 1;\n                const showResizable = (XEUtils.isBoolean(column.resizable) ? column.resizable : (columnOpts.resizable || allResizable));\n                const isAutoCellWidth = !column.resizeWidth && (column.minWidth === 'auto' || column.width === 'auto');\n                let isVNPreEmptyStatus = false;\n                if (!isGroup) {\n                    if (!dragCol || dragCol.id !== colid) {\n                        if (scrollXLoad && !column.fixed && (_columnIndex < scrollXStore.visibleStartIndex - scrollXStore.preloadSize || _columnIndex > scrollXStore.visibleEndIndex + scrollXStore.preloadSize)) {\n                            isVNPreEmptyStatus = true;\n                        }\n                    }\n                }\n                const tcStyle = {};\n                if (hasEllipsis) {\n                    tcStyle.height = `${currCellHeight}px`;\n                }\n                else {\n                    tcStyle.minHeight = `${currCellHeight}px`;\n                }\n                return h('th', Object.assign(Object.assign(Object.assign({ class: ['vxe-header--column', colid, {\n                            [`col--${headAlign}`]: headAlign,\n                            [`col--${type}`]: type,\n                            'col--last': isLastColumn,\n                            'col--fixed': column.fixed,\n                            'col--group': isColGroup,\n                            'col--ellipsis': hasEllipsis,\n                            'fixed--width': !isAutoCellWidth,\n                            'fixed--hidden': fixedHiddenColumn,\n                            'is--padding': isPadding,\n                            'is--sortable': column.sortable,\n                            'col--filter': !!filters,\n                            'is--filter-active': hasFilter,\n                            'is--drag-active': columnOpts.drag && !column.fixed && !isDisabledDrag && (isCrossDrag || isPeerDrag || !column.parentId),\n                            'is--drag-disabled': columnOpts.drag && isDisabledDrag,\n                            'col--current': currentColumn === column\n                        },\n                        headerClassName ? (XEUtils.isFunction(headerClassName) ? headerClassName(cellParams) : headerClassName) : '',\n                        headerCellClassName ? (XEUtils.isFunction(headerCellClassName) ? headerCellClassName(cellParams) : headerCellClassName) : ''\n                    ], style: headerCellStyle ? (XEUtils.isFunction(headerCellStyle) ? headerCellStyle(cellParams) : headerCellStyle) : null }, thAttrs), thOns), { key: columnKey || scrollXLoad || scrollYLoad || columnOpts.useKey || columnOpts.drag || isColGroup ? colid : $columnIndex }), [\n                    h('div', {\n                        class: ['vxe-cell', {\n                                'c--title': showTitle,\n                                'c--tooltip': showTooltip,\n                                'c--ellipsis': showEllipsis\n                            }],\n                        style: tcStyle\n                    }, isVNPreEmptyStatus || (isOptimizeMode && fixedHiddenColumn)\n                        ? []\n                        : [\n                            h('div', {\n                                colid,\n                                class: 'vxe-cell--wrapper'\n                            }, column.renderHeader(cellParams))\n                        ]),\n                    /**\n                     * 列宽拖动\n                     */\n                    !fixedHiddenColumn && showResizable\n                        ? h('div', {\n                            class: 'vxe-cell--col-resizable',\n                            onMousedown: (evnt) => $xeTable.handleColResizeMousedownEvent(evnt, fixedType, cellParams),\n                            onDblclick: (evnt) => $xeTable.handleColResizeDblclickEvent(evnt, cellParams)\n                        })\n                        : renderEmptyElement($xeTable)\n                ]);\n            });\n        };\n        const renderHeads = (isGroup, isOptimizeMode, headerGroups) => {\n            const { fixedType } = props;\n            const { headerRowClassName, headerRowStyle } = tableProps;\n            const { isColLoading, isDragColMove } = tableReactData;\n            const columnOpts = computeColumnOpts.value;\n            const columnDragOpts = computeColumnDragOpts.value;\n            return headerGroups.map((cols, $rowIndex) => {\n                const params = { $table: $xeTable, $rowIndex, fixed: fixedType, type: renderType };\n                if (!isColLoading && columnOpts.drag && columnDragOpts.animation) {\n                    return h(TransitionGroup, {\n                        key: $rowIndex,\n                        name: `vxe-header--col-list${isDragColMove ? '' : '-disabled'}`,\n                        tag: 'tr',\n                        class: [\n                            'vxe-header--row',\n                            headerRowClassName ? (XEUtils.isFunction(headerRowClassName) ? headerRowClassName(params) : headerRowClassName) : ''\n                        ],\n                        style: headerRowStyle ? (XEUtils.isFunction(headerRowStyle) ? headerRowStyle(params) : headerRowStyle) : null\n                    }, {\n                        default: () => renderRows(isGroup, isOptimizeMode, cols, $rowIndex)\n                    });\n                }\n                return h('tr', {\n                    key: $rowIndex,\n                    class: [\n                        'vxe-header--row',\n                        headerRowClassName ? (XEUtils.isFunction(headerRowClassName) ? headerRowClassName(params) : headerRowClassName) : ''\n                    ],\n                    style: headerRowStyle ? (XEUtils.isFunction(headerRowStyle) ? headerRowStyle(params) : headerRowStyle) : null\n                }, renderRows(isGroup, isOptimizeMode, cols, $rowIndex));\n            });\n        };\n        const renderVN = () => {\n            const { fixedType, fixedColumn, tableColumn } = props;\n            const { mouseConfig, showHeaderOverflow: allColumnHeaderOverflow, spanMethod, footerSpanMethod } = tableProps;\n            const { isGroup, isColLoading, overflowX, scrollXLoad, scrollYLoad, dragCol } = tableReactData;\n            const { visibleColumn, fullColumnIdData } = tableInternalData;\n            const mouseOpts = computeMouseOpts.value;\n            let renderHeaderList = headerColumn.value;\n            let renderColumnList = tableColumn;\n            let isOptimizeMode = false;\n            if (isGroup) {\n                renderColumnList = visibleColumn;\n            }\n            else {\n                // 如果是使用优化模式\n                if (scrollXLoad || scrollYLoad || allColumnHeaderOverflow) {\n                    if (spanMethod || footerSpanMethod) {\n                        // 如果不支持优化模式\n                    }\n                    else {\n                        isOptimizeMode = true;\n                    }\n                }\n                if (!isColLoading && (fixedType || !overflowX)) {\n                    renderColumnList = visibleColumn;\n                }\n                if (fixedType) {\n                    // 如果是使用优化模式\n                    if (isOptimizeMode) {\n                        renderColumnList = fixedColumn || [];\n                    }\n                }\n                renderHeaderList = [renderColumnList];\n            }\n            if (!fixedType && !isGroup) {\n                // 列拖拽\n                if (scrollXLoad && dragCol) {\n                    if (renderColumnList.length > 2) {\n                        const dCowRest = fullColumnIdData[dragCol.id];\n                        if (dCowRest) {\n                            const dcIndex = dCowRest._index;\n                            const firstCol = renderColumnList[0];\n                            const lastCol = renderColumnList[renderColumnList.length - 1];\n                            const firstColRest = fullColumnIdData[firstCol.id];\n                            const lastColRest = fullColumnIdData[lastCol.id];\n                            if (firstColRest && lastColRest) {\n                                const fcIndex = firstColRest._index;\n                                const lcIndex = lastColRest._index;\n                                if (dcIndex < fcIndex) {\n                                    renderColumnList = [dragCol].concat(renderColumnList);\n                                    renderHeaderList = [[dragCol].concat(renderHeaderList[0])].concat(renderHeaderList.slice(1));\n                                }\n                                else if (dcIndex > lcIndex) {\n                                    renderColumnList = renderColumnList.concat([dragCol]);\n                                    renderHeaderList = [renderHeaderList[0].concat([dragCol])].concat(renderHeaderList.slice(1));\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-table--header-wrapper', fixedType ? `fixed-${fixedType}--wrapper` : 'body--wrapper'],\n                xid: xID\n            }, [\n                h('div', {\n                    ref: refHeaderScroll,\n                    class: 'vxe-table--header-inner-wrapper',\n                    onScroll(evnt) {\n                        $xeTable.triggerHeaderScrollEvent(evnt, fixedType);\n                    }\n                }, [\n                    fixedType\n                        ? renderEmptyElement($xeTable)\n                        : h('div', {\n                            ref: refHeaderXSpace,\n                            class: 'vxe-body--x-space'\n                        }),\n                    h('table', {\n                        ref: refHeaderTable,\n                        class: 'vxe-table--header',\n                        xid: xID,\n                        cellspacing: 0,\n                        cellpadding: 0,\n                        border: 0\n                    }, [\n                        /**\n                         * 列宽\n                         */\n                        h('colgroup', {\n                            ref: refHeaderColgroup\n                        }, renderColumnList.map((column, $columnIndex) => {\n                            return h('col', {\n                                name: column.id,\n                                key: $columnIndex,\n                                style: {\n                                    width: `${column.renderWidth}px`\n                                }\n                            });\n                        })),\n                        /**\n                       * 头部\n                       */\n                        h('thead', {\n                            ref: refHeaderTHead\n                        }, renderHeads(isGroup, isOptimizeMode, renderHeaderList))\n                    ]),\n                    mouseConfig && mouseOpts.area\n                        ? h('div', {\n                            class: 'vxe-table--cell-area'\n                        }, [\n                            h('span', {\n                                class: 'vxe-table--cell-main-area'\n                            }),\n                            h('span', {\n                                class: 'vxe-table--cell-copy-area'\n                            }),\n                            h('span', {\n                                class: 'vxe-table--cell-extend-area'\n                            }),\n                            h('span', {\n                                class: 'vxe-table--cell-multi-area'\n                            }),\n                            h('span', {\n                                class: 'vxe-table--cell-active-area'\n                            }),\n                            h('span', {\n                                class: 'vxe-table--cell-col-status-area'\n                            })\n                        ])\n                        : renderEmptyElement($xeTable)\n                ])\n            ]);\n        };\n        watch(() => props.tableColumn, uploadColumn);\n        onMounted(() => {\n            nextTick(() => {\n                const { fixedType } = props;\n                const { internalData } = $xeTable;\n                const { elemStore } = internalData;\n                const prefix = `${fixedType || 'main'}-header-`;\n                elemStore[`${prefix}wrapper`] = refElem;\n                elemStore[`${prefix}scroll`] = refHeaderScroll;\n                elemStore[`${prefix}table`] = refHeaderTable;\n                elemStore[`${prefix}colgroup`] = refHeaderColgroup;\n                elemStore[`${prefix}list`] = refHeaderTHead;\n                elemStore[`${prefix}xSpace`] = refHeaderXSpace;\n                elemStore[`${prefix}repair`] = refHeaderBorderRepair;\n                uploadColumn();\n            });\n        });\n        onUnmounted(() => {\n            const { fixedType } = props;\n            const { internalData } = $xeTable;\n            const { elemStore } = internalData;\n            const prefix = `${fixedType || 'main'}-header-`;\n            elemStore[`${prefix}wrapper`] = null;\n            elemStore[`${prefix}scroll`] = null;\n            elemStore[`${prefix}table`] = null;\n            elemStore[`${prefix}colgroup`] = null;\n            elemStore[`${prefix}list`] = null;\n            elemStore[`${prefix}xSpace`] = null;\n            elemStore[`${prefix}repair`] = null;\n        });\n        return renderVN;\n    }\n});\n", "import { defineComponent, TransitionGroup, h, ref, inject, nextTick, onMounted, onUnmounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../ui';\nimport { updateCellTitle, getPropClass } from '../../ui/src/dom';\nimport { getCellHeight } from './util';\nconst { renderer, renderEmptyElement } = VxeUI;\nconst renderType = 'footer';\nfunction mergeFooterMethod(mergeFooterList, _rowIndex, _columnIndex) {\n    for (let mIndex = 0; mIndex < mergeFooterList.length; mIndex++) {\n        const { row: mergeRowIndex, col: mergeColIndex, rowspan: mergeRowspan, colspan: mergeColspan } = mergeFooterList[mIndex];\n        if (mergeColIndex > -1 && mergeRowIndex > -1 && mergeRowspan && mergeColspan) {\n            if (mergeRowIndex === _rowIndex && mergeColIndex === _columnIndex) {\n                return { rowspan: mergeRowspan, colspan: mergeColspan };\n            }\n            if (_rowIndex >= mergeRowIndex && _rowIndex < mergeRowIndex + mergeRowspan && _columnIndex >= mergeColIndex && _columnIndex < mergeColIndex + mergeColspan) {\n                return { rowspan: 0, colspan: 0 };\n            }\n        }\n    }\n}\nexport default defineComponent({\n    name: 'VxeTableFooter',\n    props: {\n        footerTableData: {\n            type: Array,\n            default: () => []\n        },\n        tableColumn: {\n            type: Array,\n            default: () => []\n        },\n        fixedColumn: {\n            type: Array,\n            default: () => []\n        },\n        fixedType: {\n            type: String,\n            default: null\n        }\n    },\n    setup(props) {\n        const $xeTable = inject('$xeTable', {});\n        const { xID, props: tableProps, reactData: tableReactData, internalData: tableInternalData } = $xeTable;\n        const { computeTooltipOpts, computeColumnOpts, computeColumnDragOpts, computeCellOpts, computeFooterCellOpts, computeDefaultRowHeight, computeResizableOpts } = $xeTable.getComputeMaps();\n        const refElem = ref();\n        const refFooterScroll = ref();\n        const refFooterTable = ref();\n        const refFooterColgroup = ref();\n        const refFooterTFoot = ref();\n        const refFooterXSpace = ref();\n        const renderRows = (tableColumn, footerTableData, row, $rowIndex, _rowIndex) => {\n            const $xeGrid = $xeTable.xeGrid;\n            const { fixedType } = props;\n            const { resizable: allResizable, border, footerCellClassName, footerCellStyle, footerAlign: allFooterAlign, footerSpanMethod, align: allAlign, columnKey, showFooterOverflow: allColumnFooterOverflow } = tableProps;\n            const { scrollXLoad, scrollYLoad, overflowX, currentColumn, mergeFooterList } = tableReactData;\n            const { fullColumnIdData, scrollXStore } = tableInternalData;\n            const tooltipOpts = computeTooltipOpts.value;\n            const resizableOpts = computeResizableOpts.value;\n            const { isAllColumnDrag } = resizableOpts;\n            const columnOpts = computeColumnOpts.value;\n            const defaultRowHeight = computeDefaultRowHeight.value;\n            const cellOpts = computeCellOpts.value;\n            const footerCellOpts = computeFooterCellOpts.value;\n            const currCellHeight = getCellHeight(footerCellOpts.height || cellOpts.height) || defaultRowHeight;\n            return tableColumn.map((column, $columnIndex) => {\n                const { type, showFooterOverflow, footerAlign, align, footerClassName, editRender, cellRender } = column;\n                const colid = column.id;\n                const colRest = fullColumnIdData[colid] || {};\n                const renderOpts = editRender || cellRender;\n                const compConf = renderOpts ? renderer.get(renderOpts.name) : null;\n                const showAllTip = tooltipOpts.showAll;\n                const isColGroup = column.children && column.children.length;\n                const fixedHiddenColumn = fixedType ? column.fixed !== fixedType && !isColGroup : column.fixed && overflowX;\n                const isPadding = XEUtils.isBoolean(footerCellOpts.padding) ? footerCellOpts.padding : cellOpts.padding;\n                const footOverflow = XEUtils.eqNull(showFooterOverflow) ? allColumnFooterOverflow : showFooterOverflow;\n                const footAlign = footerAlign || (compConf ? compConf.tableFooterCellAlign : '') || allFooterAlign || align || (compConf ? compConf.tableCellAlign : '') || allAlign;\n                let showEllipsis = footOverflow === 'ellipsis';\n                const showTitle = footOverflow === 'title';\n                const showTooltip = footOverflow === true || footOverflow === 'tooltip';\n                let hasEllipsis = showTitle || showTooltip || showEllipsis;\n                const showResizable = (XEUtils.isBoolean(column.resizable) ? column.resizable : (columnOpts.resizable || allResizable));\n                const attrs = { colid };\n                const tfOns = {};\n                const columnIndex = colRest.index;\n                const _columnIndex = colRest._index;\n                const itemIndex = _columnIndex;\n                const cellParams = {\n                    $table: $xeTable,\n                    $grid: $xeGrid,\n                    row,\n                    rowIndex: _rowIndex,\n                    _rowIndex,\n                    $rowIndex,\n                    column,\n                    columnIndex,\n                    $columnIndex,\n                    _columnIndex,\n                    itemIndex,\n                    items: row,\n                    fixed: fixedType,\n                    type: renderType,\n                    data: footerTableData\n                };\n                // 纵向虚拟滚动不支持动态行高\n                if (scrollXLoad && !hasEllipsis) {\n                    showEllipsis = hasEllipsis = true;\n                }\n                if (showTitle || showTooltip || showAllTip) {\n                    tfOns.onMouseenter = (evnt) => {\n                        if (showTitle) {\n                            updateCellTitle(evnt.currentTarget, column);\n                        }\n                        else if (showTooltip || showAllTip) {\n                            $xeTable.triggerFooterTooltipEvent(evnt, cellParams);\n                        }\n                    };\n                }\n                if (showTooltip || showAllTip) {\n                    tfOns.onMouseleave = (evnt) => {\n                        if (showTooltip || showAllTip) {\n                            $xeTable.handleTargetLeaveEvent(evnt);\n                        }\n                    };\n                }\n                tfOns.onClick = (evnt) => {\n                    $xeTable.dispatchEvent('footer-cell-click', Object.assign({ cell: evnt.currentTarget }, cellParams), evnt);\n                };\n                tfOns.onDblclick = (evnt) => {\n                    $xeTable.dispatchEvent('footer-cell-dblclick', Object.assign({ cell: evnt.currentTarget }, cellParams), evnt);\n                };\n                let isMergeCell = false;\n                // 合并行或列\n                if (mergeFooterList.length) {\n                    const spanRest = mergeFooterMethod(mergeFooterList, _rowIndex, _columnIndex);\n                    if (spanRest) {\n                        const { rowspan, colspan } = spanRest;\n                        if (!rowspan || !colspan) {\n                            return null;\n                        }\n                        if (rowspan > 1) {\n                            isMergeCell = true;\n                            attrs.rowspan = rowspan;\n                        }\n                        if (colspan > 1) {\n                            isMergeCell = true;\n                            attrs.colspan = colspan;\n                        }\n                    }\n                }\n                else if (footerSpanMethod) {\n                    // 自定义合并方法\n                    const { rowspan = 1, colspan = 1 } = footerSpanMethod(cellParams) || {};\n                    if (!rowspan || !colspan) {\n                        return null;\n                    }\n                    if (rowspan > 1) {\n                        attrs.rowspan = rowspan;\n                    }\n                    if (colspan > 1) {\n                        attrs.colspan = colspan;\n                    }\n                }\n                const isLastColumn = $columnIndex === tableColumn.length - 1;\n                const isAutoCellWidth = !column.resizeWidth && (column.minWidth === 'auto' || column.width === 'auto');\n                let isVNPreEmptyStatus = false;\n                if (!isMergeCell) {\n                    if (scrollXLoad && !column.fixed && (_columnIndex < scrollXStore.visibleStartIndex - scrollXStore.preloadSize || _columnIndex > scrollXStore.visibleEndIndex + scrollXStore.preloadSize)) {\n                        isVNPreEmptyStatus = true;\n                    }\n                }\n                const tcStyle = {};\n                if (hasEllipsis) {\n                    tcStyle.height = `${currCellHeight}px`;\n                }\n                else {\n                    tcStyle.minHeight = `${currCellHeight}px`;\n                }\n                return h('td', Object.assign(Object.assign(Object.assign(Object.assign({ class: ['vxe-footer--column', column.id, {\n                            [`col--${footAlign}`]: footAlign,\n                            [`col--${type}`]: type,\n                            'col--last': isLastColumn,\n                            'fixed--width': !isAutoCellWidth,\n                            'fixed--hidden': fixedHiddenColumn,\n                            'is--padding': isPadding,\n                            'col--ellipsis': hasEllipsis,\n                            'col--current': currentColumn === column\n                        }, getPropClass(footerClassName, cellParams), getPropClass(footerCellClassName, cellParams)] }, attrs), { style: footerCellStyle ? (XEUtils.isFunction(footerCellStyle) ? footerCellStyle(cellParams) : footerCellStyle) : null }), tfOns), { key: columnKey || scrollXLoad || scrollYLoad || columnOpts.useKey || columnOpts.drag ? column.id : $columnIndex }), [\n                    h('div', {\n                        class: ['vxe-cell', {\n                                'c--title': showTitle,\n                                'c--tooltip': showTooltip,\n                                'c--ellipsis': showEllipsis\n                            }],\n                        style: tcStyle\n                    }, isVNPreEmptyStatus\n                        ? []\n                        : [\n                            h('div', {\n                                colid,\n                                class: 'vxe-cell--wrapper'\n                            }, column.renderFooter(cellParams))\n                        ]),\n                    /**\n                     * 列宽拖动\n                     */\n                    !fixedHiddenColumn && showResizable && isAllColumnDrag\n                        ? h('div', {\n                            class: ['vxe-cell--col-resizable', {\n                                    'is--line': !border || border === 'none'\n                                }],\n                            onMousedown: (evnt) => $xeTable.handleColResizeMousedownEvent(evnt, fixedType, cellParams),\n                            onDblclick: (evnt) => $xeTable.handleColResizeDblclickEvent(evnt, cellParams)\n                        })\n                        : renderEmptyElement($xeTable)\n                ]);\n            });\n        };\n        const renderHeads = (renderColumnList) => {\n            const { fixedType, footerTableData } = props;\n            const { footerRowClassName, footerRowStyle } = tableProps;\n            const { isColLoading, isDragColMove } = tableReactData;\n            const columnOpts = computeColumnOpts.value;\n            const columnDragOpts = computeColumnDragOpts.value;\n            return footerTableData.map((row, $rowIndex) => {\n                const _rowIndex = $rowIndex;\n                const rowParams = { $table: $xeTable, row, _rowIndex, $rowIndex, fixed: fixedType, type: renderType };\n                if (!isColLoading && columnOpts.drag && columnDragOpts.animation) {\n                    return h(TransitionGroup, {\n                        key: $rowIndex,\n                        name: `vxe-header--col-list${isDragColMove ? '' : '-disabled'}`,\n                        tag: 'tr',\n                        class: [\n                            'vxe-footer--row',\n                            footerRowClassName ? XEUtils.isFunction(footerRowClassName) ? footerRowClassName(rowParams) : footerRowClassName : ''\n                        ],\n                        style: footerRowStyle ? (XEUtils.isFunction(footerRowStyle) ? footerRowStyle(rowParams) : footerRowStyle) : null\n                    }, {\n                        default: () => renderRows(renderColumnList, footerTableData, row, $rowIndex, _rowIndex)\n                    });\n                }\n                return h('tr', {\n                    key: $rowIndex,\n                    class: [\n                        'vxe-footer--row',\n                        footerRowClassName ? XEUtils.isFunction(footerRowClassName) ? footerRowClassName(rowParams) : footerRowClassName : ''\n                    ],\n                    style: footerRowStyle ? (XEUtils.isFunction(footerRowStyle) ? footerRowStyle(rowParams) : footerRowStyle) : null\n                }, renderRows(renderColumnList, footerTableData, row, $rowIndex, _rowIndex));\n            });\n        };\n        const renderVN = () => {\n            const { fixedType, fixedColumn, tableColumn } = props;\n            const { spanMethod, footerSpanMethod, showFooterOverflow: allColumnFooterOverflow } = tableProps;\n            const { visibleColumn, fullColumnIdData } = tableInternalData;\n            const { isGroup, isColLoading, overflowX, scrollXLoad, scrollYLoad, dragCol } = tableReactData;\n            let renderColumnList = tableColumn;\n            let isOptimizeMode = false;\n            // 如果是使用优化模式\n            if (scrollXLoad || scrollYLoad || allColumnFooterOverflow) {\n                if (spanMethod || footerSpanMethod) {\n                    // 如果不支持优化模式\n                }\n                else {\n                    isOptimizeMode = true;\n                }\n            }\n            if (!isColLoading && (fixedType || !overflowX)) {\n                renderColumnList = visibleColumn;\n            }\n            if (fixedType) {\n                if (isOptimizeMode) {\n                    renderColumnList = fixedColumn || [];\n                }\n            }\n            if (!fixedType && !isGroup) {\n                // 列拖拽\n                if (scrollXLoad && dragCol) {\n                    if (renderColumnList.length > 2) {\n                        const dCowRest = fullColumnIdData[dragCol.id];\n                        if (dCowRest) {\n                            const dcIndex = dCowRest._index;\n                            const firstCol = renderColumnList[0];\n                            const lastCol = renderColumnList[renderColumnList.length - 1];\n                            const firstColRest = fullColumnIdData[firstCol.id];\n                            const lastColRest = fullColumnIdData[lastCol.id];\n                            if (firstColRest && lastColRest) {\n                                const fcIndex = firstColRest._index;\n                                const lcIndex = lastColRest._index;\n                                if (dcIndex < fcIndex) {\n                                    renderColumnList = [dragCol].concat(renderColumnList);\n                                }\n                                else if (dcIndex > lcIndex) {\n                                    renderColumnList = renderColumnList.concat([dragCol]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-table--footer-wrapper', fixedType ? `fixed-${fixedType}--wrapper` : 'body--wrapper'],\n                xid: xID\n            }, [\n                h('div', {\n                    ref: refFooterScroll,\n                    class: 'vxe-table--footer-inner-wrapper',\n                    onScroll(evnt) {\n                        $xeTable.triggerFooterScrollEvent(evnt, fixedType);\n                    }\n                }, [\n                    fixedType\n                        ? renderEmptyElement($xeTable)\n                        : h('div', {\n                            ref: refFooterXSpace,\n                            class: 'vxe-body--x-space'\n                        }),\n                    h('table', {\n                        ref: refFooterTable,\n                        class: 'vxe-table--footer',\n                        xid: xID,\n                        cellspacing: 0,\n                        cellpadding: 0,\n                        border: 0\n                    }, [\n                        /**\n                     * 列宽\n                     */\n                        h('colgroup', {\n                            ref: refFooterColgroup\n                        }, renderColumnList.map((column, $columnIndex) => {\n                            return h('col', {\n                                name: column.id,\n                                key: $columnIndex,\n                                style: {\n                                    width: `${column.renderWidth}px`\n                                }\n                            });\n                        })),\n                        /**\n                     * 底部\n                     */\n                        h('tfoot', {\n                            ref: refFooterTFoot\n                        }, renderHeads(renderColumnList))\n                    ])\n                ])\n            ]);\n        };\n        onMounted(() => {\n            nextTick(() => {\n                const { fixedType } = props;\n                const { elemStore } = tableInternalData;\n                const prefix = `${fixedType || 'main'}-footer-`;\n                elemStore[`${prefix}wrapper`] = refElem;\n                elemStore[`${prefix}scroll`] = refFooterScroll;\n                elemStore[`${prefix}table`] = refFooterTable;\n                elemStore[`${prefix}colgroup`] = refFooterColgroup;\n                elemStore[`${prefix}list`] = refFooterTFoot;\n                elemStore[`${prefix}xSpace`] = refFooterXSpace;\n            });\n        });\n        onUnmounted(() => {\n            const { fixedType } = props;\n            const { elemStore } = tableInternalData;\n            const prefix = `${fixedType || 'main'}-footer-`;\n            elemStore[`${prefix}wrapper`] = null;\n            elemStore[`${prefix}scroll`] = null;\n            elemStore[`${prefix}table`] = null;\n            elemStore[`${prefix}colgroup`] = null;\n            elemStore[`${prefix}list`] = null;\n            elemStore[`${prefix}xSpace`] = null;\n        });\n        return renderVN;\n    }\n});\n", "import { VxeUI } from '../../ui';\nconst { getConfig } = VxeUI;\nexport default {\n    /** 基本属性 */\n    id: [String, Function],\n    // 数据\n    data: Array,\n    // 表格的高度\n    height: [Number, String],\n    // 表格的最小高度\n    minHeight: {\n        type: [Number, String],\n        default: () => getConfig().table.minHeight\n    },\n    // 表格的最大高度\n    maxHeight: [Number, String],\n    // 已废弃，被 column-config.resizable 替换\n    resizable: {\n        type: Boolean,\n        default: () => getConfig().table.resizable\n    },\n    // 是否带有斑马纹\n    stripe: {\n        type: Boolean,\n        default: () => getConfig().table.stripe\n    },\n    // 是否带有边框\n    border: {\n        type: [Boolean, String],\n        default: () => getConfig().table.border\n    },\n    // 已废弃，被 cell-config.padding 替换\n    padding: {\n        type: Boolean,\n        default: null\n    },\n    // 是否圆角边框\n    round: {\n        type: Boolean,\n        default: () => getConfig().table.round\n    },\n    // 表格的尺寸\n    size: {\n        type: String,\n        default: () => getConfig().table.size || getConfig().size\n    },\n    // 列的宽度是否自撑开（可能会被废弃的参数，不要使用）\n    fit: {\n        type: Boolean,\n        default: () => getConfig().table.fit\n    },\n    // 表格是否加载中\n    loading: Boolean,\n    // 所有的列对其方式\n    align: {\n        type: String,\n        default: () => getConfig().table.align\n    },\n    // 所有的表头列的对齐方式\n    headerAlign: {\n        type: String,\n        default: () => getConfig().table.headerAlign\n    },\n    // 所有的表尾列的对齐方式\n    footerAlign: {\n        type: String,\n        default: () => getConfig().table.footerAlign\n    },\n    // 是否显示表头\n    showHeader: {\n        type: Boolean,\n        default: () => getConfig().table.showHeader\n    },\n    // （即将废弃）是否要高亮当前选中行\n    highlightCurrentRow: {\n        type: Boolean,\n        default: () => getConfig().table.highlightCurrentRow\n    },\n    // （即将废弃）鼠标移到行是否要高亮显示\n    highlightHoverRow: {\n        type: Boolean,\n        default: () => getConfig().table.highlightHoverRow\n    },\n    /**\n     * （即将废弃）是否要高亮当前选中列\n     * @deprecated\n     */\n    highlightCurrentColumn: {\n        type: Boolean,\n        default: () => getConfig().table.highlightCurrentColumn\n    },\n    /**\n     * （即将废弃）鼠标移到列是否要高亮显示\n     * @deprecated\n     */\n    highlightHoverColumn: {\n        type: Boolean,\n        default: () => getConfig().table.highlightHoverColumn\n    },\n    // （即将废弃）激活单元格编辑时是否高亮显示\n    highlightCell: Boolean,\n    // 是否显示表尾合计\n    showFooter: Boolean,\n    // 表尾数据\n    footerData: Array,\n    // 表尾合计的计算方法\n    footerMethod: Function,\n    // 给行附加 className\n    rowClassName: [String, Function],\n    // 给单元格附加 className\n    cellClassName: [String, Function],\n    // 给表头的行附加 className\n    headerRowClassName: [String, Function],\n    // 给表头的单元格附加 className\n    headerCellClassName: [String, Function],\n    // 给表尾的行附加 className\n    footerRowClassName: [String, Function],\n    // 给表尾的单元格附加 className\n    footerCellClassName: [String, Function],\n    // 给单元格附加样式\n    cellStyle: [Object, Function],\n    // 给表头单元格附加样式\n    headerCellStyle: [Object, Function],\n    // 给表尾单元格附加样式\n    footerCellStyle: [Object, Function],\n    // 给行附加样式\n    rowStyle: [Object, Function],\n    // 给表头行附加样式\n    headerRowStyle: [Object, Function],\n    // 给表尾行附加样式\n    footerRowStyle: [Object, Function],\n    // 合并指定单元格\n    mergeCells: Array,\n    // 合并指定的表尾\n    mergeFooterItems: Array,\n    // 自定义合并行或列的方法\n    spanMethod: Function,\n    // 表尾合并行或列\n    footerSpanMethod: Function,\n    // 设置所有内容过长时显示为省略号\n    showOverflow: {\n        type: [Boolean, String],\n        default: () => getConfig().table.showOverflow\n    },\n    // 设置表头所有内容过长时显示为省略号\n    showHeaderOverflow: {\n        type: [Boolean, String],\n        default: () => getConfig().table.showHeaderOverflow\n    },\n    // 设置表尾所有内容过长时显示为省略号\n    showFooterOverflow: {\n        type: [Boolean, String],\n        default: () => getConfig().table.showFooterOverflow\n    },\n    /** 高级属性 */\n    // （即将废弃）columnKey 已废弃，被 column-config.useKey 替换\n    columnKey: Boolean,\n    // （即将废弃）rowKey 已废弃，被 row-config.useKey 替换\n    rowKey: Boolean,\n    // （即将废弃）rowId 已废弃，被 row-config.keyField 替换\n    rowId: {\n        type: String,\n        default: () => getConfig().table.rowId\n    },\n    zIndex: Number,\n    emptyText: {\n        type: String,\n        default: () => getConfig().table.emptyText\n    },\n    keepSource: {\n        type: Boolean,\n        default: () => getConfig().table.keepSource\n    },\n    // 是否自动监听父容器变化去更新响应式表格宽高\n    autoResize: {\n        type: Boolean,\n        default: () => getConfig().table.autoResize\n    },\n    // 是否自动根据状态属性去更新响应式表格宽高\n    syncResize: [Boolean, String, Number],\n    // 响应式布局配置项\n    resizeConfig: Object,\n    // 列配置信息\n    columnConfig: Object,\n    // 当前列配置信息\n    currentColumnConfig: Object,\n    // 单元格配置信息\n    cellConfig: Object,\n    // 表头单元格配置信息\n    headerCellConfig: Object,\n    // 表尾单元格配置信息\n    footerCellConfig: Object,\n    // 行配置信息\n    rowConfig: Object,\n    // 当前行配置信息\n    currentRowConfig: Object,\n    // 已废弃，被 rowDragConfig 替换\n    dragConfig: Object,\n    // 行拖拽排序配置项\n    rowDragConfig: Object,\n    // 列拖拽排序配置项\n    columnDragConfig: Object,\n    // 列调整配置项\n    resizableConfig: Object,\n    // 序号配置项\n    seqConfig: Object,\n    // 排序配置项\n    sortConfig: Object,\n    // 筛选配置项\n    filterConfig: Object,\n    // 单选框配置\n    radioConfig: Object,\n    // 复选框配置项\n    checkboxConfig: Object,\n    // tooltip 配置项\n    tooltipConfig: Object,\n    // 导出配置项\n    exportConfig: Object,\n    // 导入配置项\n    importConfig: Object,\n    // 打印配置项\n    printConfig: Object,\n    // 展开行配置项\n    expandConfig: Object,\n    // 树形结构配置项\n    treeConfig: Object,\n    // 快捷菜单配置项\n    menuConfig: Object,\n    // 鼠标配置项\n    mouseConfig: Object,\n    // 区域配置项\n    areaConfig: Object,\n    // 按键配置项\n    keyboardConfig: Object,\n    // 复制粘/贴配置项\n    clipConfig: Object,\n    // 查找/替换配置项\n    fnrConfig: Object,\n    // 编辑配置项\n    editConfig: Object,\n    // 校验配置项\n    validConfig: Object,\n    // 校验规则配置项\n    editRules: Object,\n    // 加载中配置项\n    loadingConfig: Object,\n    // 空内容渲染配置项\n    emptyRender: Object,\n    // 自定义列配置项\n    customConfig: Object,\n    // （即将废弃）横向虚拟滚动配置项\n    scrollX: Object,\n    // （即将废弃）纵向虚拟滚动配置项\n    scrollY: Object,\n    // 横向虚拟滚动配置项\n    virtualXConfig: Object,\n    // 纵向虚拟滚动配置项\n    virtualYConfig: Object,\n    // 滚动条配置项\n    scrollbarConfig: Object,\n    // （即将废弃）优化相关\n    animat: {\n        type: Boolean,\n        default: () => getConfig().table.animat\n    },\n    // （可能会被废弃的参数，不要使用）\n    delayHover: {\n        type: Number,\n        default: () => getConfig().table.delayHover\n    },\n    // 额外的参数\n    params: Object\n};\n", "export default [\n    'update:data',\n    'keydown-start',\n    'keydown',\n    'keydown-end',\n    'paste',\n    'copy',\n    'cut',\n    'current-change',\n    'radio-change',\n    'checkbox-change',\n    'checkbox-all',\n    'checkbox-range-start',\n    'checkbox-range-change',\n    'checkbox-range-end',\n    'checkbox-range-select',\n    'cell-click',\n    'cell-dblclick',\n    'cell-menu',\n    'cell-mouseenter',\n    'cell-mouseleave',\n    'cell-selected',\n    'cell-delete-value',\n    'cell-backspace-value',\n    'header-cell-click',\n    'header-cell-dblclick',\n    'header-cell-menu',\n    'footer-cell-click',\n    'footer-cell-dblclick',\n    'footer-cell-menu',\n    'clear-merge',\n    'sort-change',\n    'clear-sort',\n    'filter-change',\n    'filter-visible',\n    'clear-filter',\n    'resizable-change',\n    'column-resizable-change',\n    'row-resizable-change',\n    'toggle-row-expand',\n    'toggle-tree-expand',\n    'menu-click',\n    'edit-closed',\n    'row-dragstart',\n    'row-dragover',\n    'row-dragend',\n    'column-dragstart',\n    'column-dragover',\n    'column-dragend',\n    'enter-append-row',\n    'edit-actived',\n    'edit-activated',\n    'edit-disabled',\n    'valid-error',\n    'scroll',\n    'scroll-boundary',\n    'custom',\n    'change-fnr',\n    'open-fnr',\n    'show-fnr',\n    'hide-fnr',\n    'fnr-change',\n    'fnr-find',\n    'fnr-find-all',\n    'fnr-replace',\n    'fnr-replace-all',\n    'cell-area-copy',\n    'cell-area-cut',\n    'cell-area-paste',\n    'cell-area-merge',\n    'clear-cell-area-selection',\n    'clear-cell-area-merge',\n    'header-cell-area-selection',\n    'cell-area-selection-invalid',\n    'cell-area-selection-start',\n    'cell-area-selection-drag',\n    'cell-area-selection-end',\n    'cell-area-extension-start',\n    'cell-area-extension-drag',\n    'cell-area-extension-end',\n    'cell-area-selection-all-start',\n    'cell-area-selection-all-end',\n    'cell-area-arrows-start',\n    'cell-area-arrows-end',\n    'active-cell-change-start',\n    'active-cell-change-end'\n];\n", "import { defineComponent, h, inject, ref, nextTick, TransitionGroup, createCommentVNode } from 'vue';\nimport { VxeUI } from '../../../ui';\nimport { formatText } from '../../../ui/src/utils';\nimport { getTpImg, addClass, removeClass } from '../../../ui/src/dom';\nimport { errLog } from '../../../ui/src/log';\nimport XEUtils from 'xe-utils';\nconst { getI18n, getIcon, renderEmptyElement } = VxeUI;\nexport default defineComponent({\n    name: 'TableCustomPanel',\n    props: {\n        customStore: {\n            type: Object,\n            default: () => ({})\n        }\n    },\n    setup(props) {\n        const VxeUIModalComponent = VxeUI.getComponent('VxeModal');\n        const VxeUIDrawerComponent = VxeUI.getComponent('VxeDrawer');\n        const VxeUIButtonComponent = VxeUI.getComponent('VxeButton');\n        const VxeUINumberInputComponent = VxeUI.getComponent('VxeNumberInput');\n        const VxeUIRadioGroupComponent = VxeUI.getComponent('VxeRadioGroup');\n        const $xeTable = inject('$xeTable', {});\n        const { props: tableProps, reactData, internalData } = $xeTable;\n        const { computeCustomOpts, computeColumnDragOpts, computeColumnOpts, computeIsMaxFixedColumn, computeResizableOpts } = $xeTable.getComputeMaps();\n        const refElem = ref();\n        const bodyElemRef = ref();\n        const refDragLineElem = ref();\n        const refDragTipElem = ref();\n        const dragColumnRef = ref();\n        let prevDragCol;\n        let prevDragToChild = false;\n        let prevDragPos;\n        const handleWrapperMouseenterEvent = (evnt) => {\n            const { customStore } = props;\n            customStore.activeWrapper = true;\n            $xeTable.customOpenEvent(evnt);\n        };\n        const handleWrapperMouseleaveEvent = (evnt) => {\n            const { customStore } = props;\n            customStore.activeWrapper = false;\n            setTimeout(() => {\n                if (!customStore.activeBtn && !customStore.activeWrapper) {\n                    $xeTable.customCloseEvent(evnt);\n                }\n            }, 300);\n        };\n        const confirmCustomEvent = ({ $event }) => {\n            reactData.isCustomStatus = true;\n            $xeTable.saveCustom();\n            $xeTable.closeCustom();\n            $xeTable.emitCustomEvent('confirm', $event);\n        };\n        const cancelCloseEvent = ({ $event }) => {\n            $xeTable.closeCustom();\n            $xeTable.emitCustomEvent('close', $event);\n        };\n        const cancelCustomEvent = ({ $event }) => {\n            $xeTable.cancelCustom();\n            $xeTable.closeCustom();\n            $xeTable.emitCustomEvent('cancel', $event);\n        };\n        const handleResetCustomEvent = (evnt) => {\n            $xeTable.resetCustom(true);\n            $xeTable.closeCustom();\n            $xeTable.emitCustomEvent('reset', evnt);\n        };\n        const resetCustomEvent = ({ $event }) => {\n            if (VxeUI.modal) {\n                VxeUI.modal.confirm({\n                    content: getI18n('vxe.custom.cstmConfirmRestore'),\n                    className: 'vxe-table--ignore-clear',\n                    escClosable: true\n                }).then(type => {\n                    if (type === 'confirm') {\n                        handleResetCustomEvent($event);\n                    }\n                });\n            }\n            else {\n                handleResetCustomEvent($event);\n            }\n        };\n        const handleOptionCheck = (column) => {\n            const { customColumnList } = reactData;\n            const matchObj = XEUtils.findTree(customColumnList, item => item === column);\n            if (matchObj && matchObj.parent) {\n                const { parent } = matchObj;\n                if (parent.children && parent.children.length) {\n                    parent.renderVisible = parent.children.every((column) => column.renderVisible);\n                    parent.halfVisible = !parent.renderVisible && parent.children.some((column) => column.renderVisible || column.halfVisible);\n                    handleOptionCheck(parent);\n                }\n            }\n        };\n        const changeCheckboxOption = (column) => {\n            const isChecked = !column.renderVisible;\n            const customOpts = computeCustomOpts.value;\n            if (customOpts.immediate) {\n                XEUtils.eachTree([column], (item) => {\n                    item.visible = isChecked;\n                    item.renderVisible = isChecked;\n                    item.halfVisible = false;\n                });\n                reactData.isCustomStatus = true;\n                $xeTable.handleCustom();\n                $xeTable.saveCustomStore('update:visible');\n            }\n            else {\n                XEUtils.eachTree([column], (item) => {\n                    item.renderVisible = isChecked;\n                    item.halfVisible = false;\n                });\n            }\n            handleOptionCheck(column);\n            $xeTable.checkCustomStatus();\n        };\n        const changeColumnWidth = (column) => {\n            const customOpts = computeCustomOpts.value;\n            if (customOpts.immediate) {\n                if (column.renderResizeWidth !== column.renderWidth) {\n                    column.resizeWidth = column.renderResizeWidth;\n                    column.renderWidth = column.renderResizeWidth;\n                    reactData.isCustomStatus = true;\n                    $xeTable.handleCustom();\n                    $xeTable.saveCustomStore('update:width');\n                }\n            }\n        };\n        const changeFixedOption = (column, colFixed) => {\n            const isMaxFixedColumn = computeIsMaxFixedColumn.value;\n            const customOpts = computeCustomOpts.value;\n            if (customOpts.immediate) {\n                if (column.renderFixed === colFixed) {\n                    XEUtils.eachTree([column], col => {\n                        col.fixed = '';\n                        col.renderFixed = '';\n                    });\n                }\n                else {\n                    if (!isMaxFixedColumn || column.renderFixed) {\n                        XEUtils.eachTree([column], col => {\n                            col.fixed = colFixed;\n                            col.renderFixed = colFixed;\n                        });\n                    }\n                }\n                reactData.isCustomStatus = true;\n                $xeTable.handleCustom();\n                $xeTable.saveCustomStore('update:fixed');\n            }\n            else {\n                if (column.renderFixed === colFixed) {\n                    XEUtils.eachTree([column], col => {\n                        col.renderFixed = '';\n                    });\n                }\n                else {\n                    if (!isMaxFixedColumn || column.renderFixed) {\n                        XEUtils.eachTree([column], col => {\n                            col.renderFixed = colFixed;\n                        });\n                    }\n                }\n            }\n        };\n        const allOptionEvent = () => {\n            $xeTable.toggleCustomAllCheckbox();\n        };\n        const showDropTip = (evnt, optEl, showLine, dragPos) => {\n            const el = bodyElemRef.value;\n            if (!el) {\n                return;\n            }\n            const wrapperRect = el.getBoundingClientRect();\n            if (optEl) {\n                const dragLineEl = refDragLineElem.value;\n                if (dragLineEl) {\n                    if (showLine) {\n                        const optRect = optEl.getBoundingClientRect();\n                        dragLineEl.style.display = 'block';\n                        dragLineEl.style.top = `${Math.max(1, optRect.y + el.scrollTop - wrapperRect.y)}px`;\n                        dragLineEl.style.height = `${optRect.height}px`;\n                        dragLineEl.style.width = `${optRect.width}px`;\n                        dragLineEl.setAttribute('drag-pos', dragPos);\n                        dragLineEl.setAttribute('drag-to-child', prevDragToChild ? 'y' : 'n');\n                    }\n                    else {\n                        dragLineEl.style.display = '';\n                    }\n                }\n            }\n            const dragTipEl = refDragTipElem.value;\n            if (dragTipEl) {\n                dragTipEl.style.display = 'block';\n                dragTipEl.style.top = `${Math.min(el.clientHeight + el.scrollTop - dragTipEl.clientHeight, evnt.clientY + el.scrollTop - wrapperRect.y)}px`;\n                dragTipEl.style.left = `${Math.min(el.clientWidth + el.scrollLeft - dragTipEl.clientWidth, evnt.clientX + el.scrollLeft - wrapperRect.x)}px`;\n                dragTipEl.setAttribute('drag-status', showLine ? (prevDragToChild ? 'sub' : 'normal') : 'disabled');\n            }\n        };\n        const hideDropTip = () => {\n            const dragTipEl = refDragTipElem.value;\n            const dragLineEl = refDragLineElem.value;\n            if (dragTipEl) {\n                dragTipEl.style.display = '';\n            }\n            if (dragLineEl) {\n                dragLineEl.style.display = '';\n            }\n        };\n        const sortMousedownEvent = (evnt) => {\n            const btnEl = evnt.currentTarget;\n            const cellEl = btnEl.parentElement;\n            const tdEl = cellEl.parentElement;\n            const trEl = tdEl.parentElement;\n            const colid = trEl.getAttribute('colid');\n            const column = $xeTable.getColumnById(colid);\n            trEl.draggable = true;\n            dragColumnRef.value = column;\n            addClass(trEl, 'active--drag-origin');\n        };\n        const sortMouseupEvent = (evnt) => {\n            const btnEl = evnt.currentTarget;\n            const cellEl = btnEl.parentElement;\n            const tdEl = cellEl.parentElement;\n            const trEl = tdEl.parentElement;\n            hideDropTip();\n            trEl.draggable = false;\n            dragColumnRef.value = null;\n            removeClass(trEl, 'active--drag-origin');\n        };\n        const sortDragstartEvent = (evnt) => {\n            if (evnt.dataTransfer) {\n                evnt.dataTransfer.setDragImage(getTpImg(), 0, 0);\n            }\n        };\n        const sortDragendEvent = (evnt) => {\n            const { mouseConfig } = tableProps;\n            const { customColumnList } = reactData;\n            const { collectColumn } = internalData;\n            const customOpts = computeCustomOpts.value;\n            const { immediate } = customOpts;\n            const trEl = evnt.currentTarget;\n            const dragCol = dragColumnRef.value;\n            const columnDragOpts = computeColumnDragOpts.value;\n            const { isCrossDrag, isSelfToChildDrag, isToChildDrag, dragEndMethod } = columnDragOpts;\n            const dragOffsetIndex = prevDragPos === 'bottom' ? 1 : 0;\n            if (prevDragCol && dragCol) {\n                // 判断是否有拖动\n                if (prevDragCol !== dragCol) {\n                    const dragColumn = dragCol;\n                    const newColumn = prevDragCol;\n                    Promise.resolve(dragEndMethod\n                        ? dragEndMethod({\n                            oldColumn: dragColumn,\n                            newColumn,\n                            dragColumn,\n                            dragPos: prevDragPos,\n                            dragToChild: !!prevDragToChild,\n                            offsetIndex: dragOffsetIndex\n                        })\n                        : true).then((status) => {\n                        if (!status) {\n                            return;\n                        }\n                        let oafIndex = -1;\n                        let nafIndex = -1;\n                        const oldAllMaps = {};\n                        XEUtils.eachTree([dragColumn], column => {\n                            oldAllMaps[column.id] = column;\n                        });\n                        let isSelfToChildStatus = false;\n                        // 只有实时拖拽支持跨层级\n                        if (immediate) {\n                            if (dragColumn.parentId && newColumn.parentId) {\n                                // 子到子\n                                if (!isCrossDrag) {\n                                    return;\n                                }\n                                if (oldAllMaps[newColumn.id]) {\n                                    isSelfToChildStatus = true;\n                                    if (!(isCrossDrag && isSelfToChildDrag)) {\n                                        if (VxeUI.modal) {\n                                            VxeUI.modal.message({\n                                                status: 'error',\n                                                content: getI18n('vxe.error.treeDragChild')\n                                            });\n                                        }\n                                        return;\n                                    }\n                                }\n                            }\n                            else if (dragColumn.parentId) {\n                                // 子到根\n                                if (!isCrossDrag) {\n                                    return;\n                                }\n                            }\n                            else if (newColumn.parentId) {\n                                // 根到子\n                                if (!isCrossDrag) {\n                                    return;\n                                }\n                                if (oldAllMaps[newColumn.id]) {\n                                    isSelfToChildStatus = true;\n                                    if (!(isCrossDrag && isSelfToChildDrag)) {\n                                        if (VxeUI.modal) {\n                                            VxeUI.modal.message({\n                                                status: 'error',\n                                                content: getI18n('vxe.error.treeDragChild')\n                                            });\n                                        }\n                                        return;\n                                    }\n                                }\n                            }\n                            else {\n                                // 根到根\n                            }\n                            const oldewMatchRest = XEUtils.findTree(collectColumn, item => item.id === dragColumn.id);\n                            // 改变层级\n                            if (isSelfToChildStatus && (isCrossDrag && isSelfToChildDrag)) {\n                                if (oldewMatchRest) {\n                                    const { items: oCols, index: oIndex } = oldewMatchRest;\n                                    const childList = dragColumn.children || [];\n                                    childList.forEach(column => {\n                                        column.parentId = dragColumn.parentId;\n                                    });\n                                    oCols.splice(oIndex, 1, ...childList);\n                                    dragColumn.children = [];\n                                }\n                            }\n                            else {\n                                if (oldewMatchRest) {\n                                    const { items: oCols, index: oIndex, parent: oParent } = oldewMatchRest;\n                                    oCols.splice(oIndex, 1);\n                                    if (!oParent) {\n                                        oafIndex = oIndex;\n                                    }\n                                }\n                            }\n                            const newMatchRest = XEUtils.findTree(collectColumn, item => item.id === newColumn.id);\n                            if (newMatchRest) {\n                                const { items: nCols, index: nIndex, parent: nParent } = newMatchRest;\n                                // 转子级\n                                if ((isCrossDrag && isToChildDrag) && prevDragToChild) {\n                                    dragColumn.parentId = newColumn.id;\n                                    newColumn.children = (newColumn.children || []).concat([dragColumn]);\n                                }\n                                else {\n                                    dragColumn.parentId = newColumn.parentId;\n                                    nCols.splice(nIndex + dragOffsetIndex, 0, dragColumn);\n                                }\n                                if (!nParent) {\n                                    nafIndex = nIndex;\n                                }\n                            }\n                            XEUtils.eachTree(collectColumn, (column, index, items, path, parent) => {\n                                if (!parent) {\n                                    const sortIndex = index + 1;\n                                    column.renderSortNumber = sortIndex;\n                                }\n                            });\n                        }\n                        else {\n                            oafIndex = XEUtils.findIndexOf(customColumnList, item => item.id === dragColumn.id);\n                            customColumnList.splice(oafIndex, 1);\n                            nafIndex = XEUtils.findIndexOf(customColumnList, item => item.id === newColumn.id);\n                            customColumnList.splice(nafIndex + dragOffsetIndex, 0, dragColumn);\n                        }\n                        reactData.isDragColMove = true;\n                        if (mouseConfig) {\n                            if ($xeTable.clearSelected) {\n                                $xeTable.clearSelected();\n                            }\n                            if ($xeTable.clearCellAreas) {\n                                $xeTable.clearCellAreas();\n                                $xeTable.clearCopyCellArea();\n                            }\n                        }\n                        $xeTable.dispatchEvent('column-dragend', {\n                            oldColumn: dragColumn,\n                            newColumn,\n                            dragColumn,\n                            dragPos: prevDragPos,\n                            offsetIndex: dragOffsetIndex,\n                            _index: {\n                                newIndex: nafIndex,\n                                oldIndex: oafIndex\n                            }\n                        }, evnt);\n                        if (immediate) {\n                            reactData.customColumnList = collectColumn.slice(0);\n                            $xeTable.handleColDragSwapColumn();\n                        }\n                    }).catch(() => {\n                    });\n                }\n            }\n            hideDropTip();\n            dragColumnRef.value = null;\n            trEl.draggable = false;\n            trEl.removeAttribute('drag-pos');\n            removeClass(trEl, 'active--drag-target');\n            removeClass(trEl, 'active--drag-origin');\n        };\n        const sortDragoverEvent = (evnt) => {\n            const customOpts = computeCustomOpts.value;\n            const { immediate } = customOpts;\n            const columnDragOpts = computeColumnDragOpts.value;\n            const { isCrossDrag, isToChildDrag } = columnDragOpts;\n            const optEl = evnt.currentTarget;\n            const hasCtrlKey = evnt.ctrlKey;\n            const colid = optEl.getAttribute('colid');\n            const column = $xeTable.getColumnById(colid);\n            const dragCol = dragColumnRef.value;\n            // 是否移入有效列\n            if (column && (isCrossDrag || column.level === 1)) {\n                evnt.preventDefault();\n                const offsetY = evnt.clientY - optEl.getBoundingClientRect().y;\n                const dragPos = offsetY < optEl.clientHeight / 2 ? 'top' : 'bottom';\n                if ((dragCol && dragCol.id === column.id) ||\n                    (!isCrossDrag && column.level > 1) ||\n                    (!immediate && column.level > 1) ||\n                    column.renderFixed) {\n                    showDropTip(evnt, optEl, false, dragPos);\n                    return;\n                }\n                prevDragToChild = !!((isCrossDrag && isToChildDrag) && hasCtrlKey && immediate);\n                prevDragCol = column;\n                prevDragPos = dragPos;\n                showDropTip(evnt, optEl, true, dragPos);\n            }\n        };\n        const renderDragTip = () => {\n            const dragCol = dragColumnRef.value;\n            const columnDragOpts = computeColumnDragOpts.value;\n            return h('div', {}, [\n                h('div', {\n                    ref: refDragLineElem,\n                    class: ['vxe-table-custom-popup--drag-line', {\n                            'is--guides': columnDragOpts.showGuidesStatus\n                        }]\n                }),\n                h('div', {\n                    ref: refDragTipElem,\n                    class: 'vxe-table-custom-popup--drag-tip'\n                }, [\n                    h('div', {\n                        class: 'vxe-table-custom-popup--drag-tip-wrapper'\n                    }, [\n                        h('div', {\n                            class: 'vxe-table-custom-popup--drag-tip-status'\n                        }, [\n                            h('span', {\n                                class: ['vxe-table-custom-popup--drag-tip-normal-status', getIcon().TABLE_DRAG_STATUS_ROW]\n                            }),\n                            h('span', {\n                                class: ['vxe-table-custom-popup--drag-tip-sub-status', getIcon().TABLE_DRAG_STATUS_SUB_ROW]\n                            }),\n                            h('span', {\n                                class: ['vxe-table-custom-popup--drag-tip-disabled-status', getIcon().TABLE_DRAG_DISABLED]\n                            })\n                        ]),\n                        h('div', {\n                            class: 'vxe-table-custom-popup--drag-tip-content'\n                        }, getI18n('vxe.custom.cstmDragTarget', [dragCol && dragCol.type !== 'html' ? dragCol.getTitle() : '']))\n                    ])\n                ])\n            ]);\n        };\n        const renderSimplePanel = () => {\n            const $xeGrid = $xeTable.xeGrid;\n            const { customStore } = props;\n            const { isCustomStatus, customColumnList } = reactData;\n            const customOpts = computeCustomOpts.value;\n            const { immediate } = customOpts;\n            const columnDragOpts = computeColumnDragOpts.value;\n            const { maxHeight } = customStore;\n            const { checkMethod, visibleMethod, allowVisible, allowSort, allowFixed, trigger, placement } = customOpts;\n            const isMaxFixedColumn = computeIsMaxFixedColumn.value;\n            const { isCrossDrag } = columnDragOpts;\n            const slots = customOpts.slots || {};\n            const headerSlot = slots.header;\n            const topSlot = slots.top;\n            const bottomSlot = slots.bottom;\n            const defaultSlot = slots.default;\n            const footerSlot = slots.footer;\n            const colVNs = [];\n            const customWrapperOns = {};\n            const isAllChecked = customStore.isAll;\n            const isAllIndeterminate = customStore.isIndeterminate;\n            // hover 触发\n            if (trigger === 'hover') {\n                customWrapperOns.onMouseenter = handleWrapperMouseenterEvent;\n                customWrapperOns.onMouseleave = handleWrapperMouseleaveEvent;\n            }\n            const params = {\n                $table: $xeTable,\n                $grid: $xeGrid,\n                columns: customColumnList,\n                isAllChecked,\n                isAllIndeterminate,\n                isCustomStatus\n            };\n            XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {\n                const isVisible = visibleMethod ? visibleMethod({ column }) : true;\n                if (isVisible) {\n                    const isChecked = column.renderVisible;\n                    const isIndeterminate = column.halfVisible;\n                    const isColGroup = column.children && column.children.length;\n                    const colTitle = formatText(column.getTitle(), 1);\n                    const isDisabled = checkMethod ? !checkMethod({ column }) : false;\n                    const isHidden = !isChecked;\n                    colVNs.push(h('li', {\n                        key: column.id,\n                        colid: column.id,\n                        class: ['vxe-table-custom--option', `level--${column.level}`, {\n                                'is--hidden': isDisabled || isHidden,\n                                'is--group': isColGroup\n                            }],\n                        onDragstart: sortDragstartEvent,\n                        onDragend: sortDragendEvent,\n                        onDragover: sortDragoverEvent\n                    }, [\n                        allowVisible\n                            ? h('div', {\n                                class: ['vxe-table-custom--checkbox-option', {\n                                        'is--checked': isChecked,\n                                        'is--indeterminate': isIndeterminate,\n                                        'is--disabled': isDisabled\n                                    }],\n                                title: getI18n('vxe.custom.setting.colVisible'),\n                                onClick: () => {\n                                    if (!isDisabled) {\n                                        changeCheckboxOption(column);\n                                    }\n                                }\n                            }, [\n                                h('span', {\n                                    class: ['vxe-checkbox--icon', isIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                                })\n                            ])\n                            : createCommentVNode(),\n                        h('div', {\n                            class: 'vxe-table-custom--name-option'\n                        }, [\n                            allowSort && ((isCrossDrag ? immediate : false) || column.level === 1)\n                                ? h('div', {\n                                    class: 'vxe-table-custom--sort-option'\n                                }, [\n                                    h('span', Object.assign({ class: ['vxe-table-custom--sort-btn', {\n                                                'is--disabled': isDisabled || isHidden || column.renderFixed\n                                            }], title: getI18n('vxe.custom.setting.sortHelpTip') }, (isDisabled || isHidden || column.renderFixed\n                                        ? {}\n                                        : {\n                                            onMousedown: sortMousedownEvent,\n                                            onMouseup: sortMouseupEvent\n                                        })), [\n                                        h('i', {\n                                            class: getIcon().TABLE_CUSTOM_SORT\n                                        })\n                                    ])\n                                ])\n                                : createCommentVNode(),\n                            column.type === 'html'\n                                ? h('div', {\n                                    key: '1',\n                                    class: 'vxe-table-custom--checkbox-label',\n                                    innerHTML: colTitle\n                                })\n                                : h('div', {\n                                    key: '0',\n                                    class: 'vxe-table-custom--checkbox-label'\n                                }, colTitle)\n                        ]),\n                        !parent && allowFixed\n                            ? h('div', {\n                                class: 'vxe-table-custom--fixed-option'\n                            }, [\n                                VxeUIButtonComponent\n                                    ? h(VxeUIButtonComponent, {\n                                        mode: 'text',\n                                        icon: column.renderFixed === 'left' ? getIcon().TOOLBAR_TOOLS_FIXED_LEFT_ACTIVE : getIcon().TOOLBAR_TOOLS_FIXED_LEFT,\n                                        status: column.renderFixed === 'left' ? 'primary' : '',\n                                        disabled: isDisabled || isHidden || (isMaxFixedColumn && !column.renderFixed),\n                                        title: getI18n(column.renderFixed === 'left' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedLeft'),\n                                        onClick: () => {\n                                            changeFixedOption(column, 'left');\n                                        }\n                                    })\n                                    : createCommentVNode(),\n                                VxeUIButtonComponent\n                                    ? h(VxeUIButtonComponent, {\n                                        mode: 'text',\n                                        icon: column.renderFixed === 'right' ? getIcon().TOOLBAR_TOOLS_FIXED_RIGHT_ACTIVE : getIcon().TOOLBAR_TOOLS_FIXED_RIGHT,\n                                        status: column.renderFixed === 'right' ? 'primary' : '',\n                                        disabled: isDisabled || isHidden || (isMaxFixedColumn && !column.renderFixed),\n                                        title: getI18n(column.renderFixed === 'right' ? 'vxe.toolbar.cancelFixed' : 'vxe.toolbar.fixedRight'),\n                                        onClick: () => {\n                                            changeFixedOption(column, 'right');\n                                        }\n                                    })\n                                    : createCommentVNode()\n                            ])\n                            : createCommentVNode()\n                    ]));\n                }\n            });\n            return h('div', {\n                ref: refElem,\n                key: 'simple',\n                class: ['vxe-table-custom-wrapper', `placement--${placement}`, {\n                        'is--active': customStore.visible\n                    }],\n                style: maxHeight && !['left', 'right'].includes(placement)\n                    ? {\n                        maxHeight: `${maxHeight}px`\n                    }\n                    : {}\n            }, customStore.visible\n                ? [\n                    h('div', {\n                        class: 'vxe-table-custom--header'\n                    }, headerSlot\n                        ? $xeTable.callSlot(headerSlot, params)\n                        : [\n                            h('ul', {\n                                class: 'vxe-table-custom--panel-list'\n                            }, [\n                                h('li', {\n                                    class: 'vxe-table-custom--option'\n                                }, [\n                                    allowVisible\n                                        ? h('div', {\n                                            class: ['vxe-table-custom--checkbox-option', {\n                                                    'is--checked': isAllChecked,\n                                                    'is--indeterminate': isAllIndeterminate\n                                                }],\n                                            title: getI18n('vxe.table.allTitle'),\n                                            onClick: allOptionEvent\n                                        }, [\n                                            h('span', {\n                                                class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                                            }),\n                                            h('span', {\n                                                class: 'vxe-checkbox--label'\n                                            }, getI18n('vxe.toolbar.customAll'))\n                                        ])\n                                        : h('span', {\n                                            class: 'vxe-checkbox--label'\n                                        }, getI18n('vxe.table.customTitle'))\n                                ])\n                            ])\n                        ]),\n                    h('div', {\n                        ref: bodyElemRef,\n                        class: 'vxe-table-custom--body'\n                    }, [\n                        topSlot\n                            ? h('div', {\n                                class: 'vxe-table-custom--panel-top'\n                            }, $xeTable.callSlot(topSlot, params))\n                            : renderEmptyElement($xeTable),\n                        defaultSlot\n                            ? h('div', {\n                                class: 'vxe-table-custom--panel-body'\n                            }, $xeTable.callSlot(defaultSlot, params))\n                            : h(TransitionGroup, Object.assign({ class: 'vxe-table-custom--panel-list', name: 'vxe-table-custom--list', tag: 'ul' }, customWrapperOns), {\n                                default: () => colVNs\n                            }),\n                        bottomSlot\n                            ? h('div', {\n                                class: 'vxe-table-custom--panel-bottom'\n                            }, $xeTable.callSlot(bottomSlot, params))\n                            : renderEmptyElement($xeTable),\n                        renderDragTip()\n                    ]),\n                    customOpts.showFooter\n                        ? h('div', {\n                            class: 'vxe-table-custom--footer'\n                        }, footerSlot\n                            ? $xeTable.callSlot(footerSlot, params)\n                            : [\n                                h('div', {\n                                    class: 'vxe-table-custom--footer-buttons'\n                                }, [\n                                    VxeUIButtonComponent\n                                        ? h(VxeUIButtonComponent, {\n                                            mode: 'text',\n                                            content: customOpts.resetButtonText || getI18n('vxe.table.customRestore'),\n                                            disabled: !isCustomStatus,\n                                            onClick: resetCustomEvent\n                                        })\n                                        : createCommentVNode(),\n                                    immediate\n                                        ? (VxeUIButtonComponent\n                                            ? h(VxeUIButtonComponent, {\n                                                mode: 'text',\n                                                content: customOpts.closeButtonText || getI18n('vxe.table.customClose'),\n                                                onClick: cancelCloseEvent\n                                            })\n                                            : createCommentVNode())\n                                        : (VxeUIButtonComponent\n                                            ? h(VxeUIButtonComponent, {\n                                                mode: 'text',\n                                                content: customOpts.cancelButtonText || getI18n('vxe.table.customCancel'),\n                                                onClick: cancelCustomEvent\n                                            })\n                                            : createCommentVNode()),\n                                    immediate\n                                        ? createCommentVNode()\n                                        : (VxeUIButtonComponent\n                                            ? h(VxeUIButtonComponent, {\n                                                mode: 'text',\n                                                status: 'primary',\n                                                content: customOpts.confirmButtonText || getI18n('vxe.table.customConfirm'),\n                                                onClick: confirmCustomEvent\n                                            })\n                                            : createCommentVNode())\n                                ])\n                            ])\n                        : null\n                ]\n                : []);\n        };\n        const renderPopupPanel = () => {\n            const $xeGrid = $xeTable.xeGrid;\n            const { customStore } = props;\n            const { resizable: allResizable } = tableProps;\n            const { isCustomStatus, customColumnList } = reactData;\n            const customOpts = computeCustomOpts.value;\n            const { immediate } = customOpts;\n            const columnDragOpts = computeColumnDragOpts.value;\n            const { mode, modalOptions, drawerOptions, allowVisible, allowSort, allowFixed, allowResizable, checkMethod, visibleMethod } = customOpts;\n            const columnOpts = computeColumnOpts.value;\n            const { maxFixedSize } = columnOpts;\n            const resizableOpts = computeResizableOpts.value;\n            const { minWidth: reMinWidth, maxWidth: reMaxWidth } = resizableOpts;\n            const modalOpts = Object.assign({}, modalOptions);\n            const drawerOpts = Object.assign({}, drawerOptions);\n            const isMaxFixedColumn = computeIsMaxFixedColumn.value;\n            const { isCrossDrag } = columnDragOpts;\n            const slots = customOpts.slots || {};\n            const headerSlot = slots.header;\n            const topSlot = slots.top;\n            const bottomSlot = slots.bottom;\n            const defaultSlot = slots.default;\n            const footerSlot = slots.footer;\n            const trVNs = [];\n            const isAllChecked = customStore.isAll;\n            const isAllIndeterminate = customStore.isIndeterminate;\n            const params = {\n                $table: $xeTable,\n                $grid: $xeGrid,\n                columns: customColumnList,\n                isAllChecked,\n                isAllIndeterminate,\n                isCustomStatus\n            };\n            XEUtils.eachTree(customColumnList, (column, index, items, path, parent) => {\n                const isVisible = visibleMethod ? visibleMethod({ column }) : true;\n                if (isVisible) {\n                    // 默认继承调整宽度\n                    let customMinWidth = 0;\n                    let customMaxWidth = 0;\n                    if (allowResizable) {\n                        const resizeParams = {\n                            $table: $xeTable,\n                            column,\n                            columnIndex: index,\n                            $columnIndex: index,\n                            $rowIndex: -1\n                        };\n                        if (reMinWidth) {\n                            customMinWidth = XEUtils.toNumber(XEUtils.isFunction(reMinWidth) ? reMinWidth(resizeParams) : reMinWidth);\n                        }\n                        if (reMaxWidth) {\n                            customMaxWidth = XEUtils.toNumber(XEUtils.isFunction(reMaxWidth) ? reMaxWidth(resizeParams) : reMaxWidth);\n                        }\n                    }\n                    const isChecked = column.renderVisible;\n                    const isIndeterminate = column.halfVisible;\n                    const colTitle = formatText(column.getTitle(), 1);\n                    const isColGroup = column.children && column.children.length;\n                    const isDisabled = checkMethod ? !checkMethod({ column }) : false;\n                    const isHidden = !isChecked;\n                    trVNs.push(h('tr', {\n                        key: column.id,\n                        colid: column.id,\n                        class: [`vxe-table-custom-popup--row level--${column.level}`, {\n                                'is--group': isColGroup\n                            }],\n                        onDragstart: sortDragstartEvent,\n                        onDragend: sortDragendEvent,\n                        onDragover: sortDragoverEvent\n                    }, [\n                        allowVisible\n                            ? h('td', {\n                                class: 'vxe-table-custom-popup--column-item col--visible'\n                            }, [\n                                h('div', {\n                                    class: ['vxe-table-custom--checkbox-option', {\n                                            'is--checked': isChecked,\n                                            'is--indeterminate': isIndeterminate,\n                                            'is--disabled': isDisabled\n                                        }],\n                                    title: getI18n('vxe.custom.setting.colVisible'),\n                                    onClick: () => {\n                                        if (!isDisabled) {\n                                            changeCheckboxOption(column);\n                                        }\n                                    }\n                                }, [\n                                    h('span', {\n                                        class: ['vxe-checkbox--icon', isIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                                    })\n                                ])\n                            ])\n                            : createCommentVNode(),\n                        h('td', {\n                            class: 'vxe-table-custom-popup--column-item col--name'\n                        }, [\n                            h('div', {\n                                class: 'vxe-table-custom-popup--name'\n                            }, [\n                                allowSort\n                                    ? ((isCrossDrag ? immediate : false) || column.level === 1\n                                        ? h('div', Object.assign({ class: ['vxe-table-custom-popup--column-sort-btn', {\n                                                    'is--disabled': isDisabled || isHidden || column.renderFixed\n                                                }], title: getI18n('vxe.custom.setting.sortHelpTip') }, (isDisabled || isHidden || column.renderFixed\n                                            ? {}\n                                            : {\n                                                onMousedown: sortMousedownEvent,\n                                                onMouseup: sortMouseupEvent\n                                            })), [\n                                            h('i', {\n                                                class: getIcon().TABLE_CUSTOM_SORT\n                                            })\n                                        ])\n                                        : h('div', {\n                                            class: 'vxe-table-custom-popup--column-sort-placeholder'\n                                        }))\n                                    : createCommentVNode(),\n                                column.type === 'html'\n                                    ? h('div', {\n                                        key: '1',\n                                        class: 'vxe-table-custom-popup--title',\n                                        innerHTML: colTitle\n                                    })\n                                    : h('div', {\n                                        key: '0',\n                                        class: 'vxe-table-custom-popup--title',\n                                        title: colTitle\n                                    }, colTitle)\n                            ])\n                        ]),\n                        allowResizable\n                            ? h('td', {\n                                class: 'vxe-table-custom-popup--column-item col--resizable'\n                            }, [\n                                ((column.children && column.children.length) ||\n                                    !(XEUtils.isBoolean(column.resizable) ? column.resizable : (columnOpts.resizable || allResizable)))\n                                    ? h('span', '-')\n                                    : (VxeUINumberInputComponent\n                                        ? h(VxeUINumberInputComponent, {\n                                            type: 'integer',\n                                            immediate: false,\n                                            disabled: isDisabled || isHidden,\n                                            modelValue: column.renderResizeWidth,\n                                            min: customMinWidth || undefined,\n                                            max: customMaxWidth || undefined,\n                                            'onUpdate:modelValue'(value) {\n                                                const width = Math.max(0, Number(value));\n                                                column.renderResizeWidth = width;\n                                            },\n                                            onChange() {\n                                                changeColumnWidth(column);\n                                            }\n                                        })\n                                        : createCommentVNode())\n                            ])\n                            : createCommentVNode(),\n                        allowFixed\n                            ? h('td', {\n                                class: 'vxe-table-custom-popup--column-item col--fixed'\n                            }, [\n                                parent\n                                    ? h('span', '-')\n                                    : (VxeUIRadioGroupComponent\n                                        ? h(VxeUIRadioGroupComponent, {\n                                            modelValue: column.renderFixed || '',\n                                            type: 'button',\n                                            size: 'mini',\n                                            disabled: isDisabled || isHidden,\n                                            options: [\n                                                { label: getI18n('vxe.custom.setting.fixedLeft'), value: 'left', disabled: isDisabled || isHidden || isMaxFixedColumn },\n                                                { label: getI18n('vxe.custom.setting.fixedUnset'), value: '', disabled: isDisabled || isHidden },\n                                                { label: getI18n('vxe.custom.setting.fixedRight'), value: 'right', disabled: isDisabled || isHidden || isMaxFixedColumn }\n                                            ],\n                                            'onUpdate:modelValue'(value) {\n                                                changeFixedOption(column, value);\n                                            }\n                                        })\n                                        : createCommentVNode())\n                            ])\n                            : createCommentVNode()\n                    ]));\n                }\n            });\n            const scopedSlots = {\n                default: () => {\n                    if (defaultSlot) {\n                        return $xeTable.callSlot(defaultSlot, params);\n                    }\n                    return h('div', {\n                        ref: bodyElemRef,\n                        class: 'vxe-table-custom-popup--body'\n                    }, [\n                        topSlot\n                            ? h('div', {\n                                class: 'vxe-table-custom-popup--table-top'\n                            }, $xeTable.callSlot(topSlot, params))\n                            : renderEmptyElement($xeTable),\n                        h('div', {\n                            class: 'vxe-table-custom-popup--table-wrapper'\n                        }, [\n                            h('table', {}, [\n                                h('colgroup', {}, [\n                                    allowVisible\n                                        ? h('col', {\n                                            class: 'vxe-table-custom-popup--table-col-seq'\n                                        })\n                                        : createCommentVNode(),\n                                    h('col', {\n                                        class: 'vxe-table-custom-popup--table-col-title'\n                                    }),\n                                    allowResizable\n                                        ? h('col', {\n                                            class: 'vxe-table-custom-popup--table-col-width'\n                                        })\n                                        : createCommentVNode(),\n                                    allowFixed\n                                        ? h('col', {\n                                            class: 'vxe-table-custom-popup--table-col-fixed'\n                                        })\n                                        : createCommentVNode()\n                                ]),\n                                h('thead', {}, [\n                                    h('tr', {}, [\n                                        allowVisible\n                                            ? h('th', {}, [\n                                                h('div', {\n                                                    class: ['vxe-table-custom--checkbox-option', {\n                                                            'is--checked': isAllChecked,\n                                                            'is--indeterminate': isAllIndeterminate\n                                                        }],\n                                                    title: getI18n('vxe.table.allTitle'),\n                                                    onClick: allOptionEvent\n                                                }, [\n                                                    h('span', {\n                                                        class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                                                    }),\n                                                    h('span', {\n                                                        class: 'vxe-checkbox--label'\n                                                    }, getI18n('vxe.toolbar.customAll'))\n                                                ])\n                                            ])\n                                            : createCommentVNode(),\n                                        h('th', {}, getI18n('vxe.custom.setting.colTitle')),\n                                        allowResizable\n                                            ? h('th', {}, getI18n('vxe.custom.setting.colResizable'))\n                                            : createCommentVNode(),\n                                        allowFixed\n                                            ? h('th', {}, getI18n(`vxe.custom.setting.${maxFixedSize ? 'colFixedMax' : 'colFixed'}`, [maxFixedSize]))\n                                            : createCommentVNode()\n                                    ])\n                                ]),\n                                h(TransitionGroup, {\n                                    class: 'vxe-table-custom--panel-list',\n                                    tag: 'tbody',\n                                    name: 'vxe-table-custom--list'\n                                }, {\n                                    default: () => trVNs\n                                })\n                            ])\n                        ]),\n                        bottomSlot\n                            ? h('div', {\n                                class: 'vxe-table-custom-popup--table-bottom'\n                            }, $xeTable.callSlot(bottomSlot, params))\n                            : renderEmptyElement($xeTable),\n                        renderDragTip()\n                    ]);\n                },\n                footer: () => {\n                    if (footerSlot) {\n                        return $xeTable.callSlot(footerSlot, params);\n                    }\n                    return h('div', {\n                        class: 'vxe-table-custom-popup--footer'\n                    }, [\n                        VxeUIButtonComponent\n                            ? h(VxeUIButtonComponent, {\n                                content: customOpts.resetButtonText || getI18n('vxe.custom.cstmRestore'),\n                                disabled: !isCustomStatus,\n                                onClick: resetCustomEvent\n                            })\n                            : createCommentVNode(),\n                        immediate\n                            ? (VxeUIButtonComponent\n                                ? h(VxeUIButtonComponent, {\n                                    content: customOpts.closeButtonText || getI18n('vxe.table.customClose'),\n                                    onClick: cancelCloseEvent\n                                })\n                                : createCommentVNode())\n                            : (VxeUIButtonComponent\n                                ? h(VxeUIButtonComponent, {\n                                    content: customOpts.cancelButtonText || getI18n('vxe.table.customCancel'),\n                                    onClick: cancelCustomEvent\n                                })\n                                : createCommentVNode()),\n                        immediate\n                            ? createCommentVNode()\n                            : (VxeUIButtonComponent\n                                ? h(VxeUIButtonComponent, {\n                                    status: 'primary',\n                                    content: customOpts.confirmButtonText || getI18n('vxe.custom.cstmConfirm'),\n                                    onClick: confirmCustomEvent\n                                })\n                                : createCommentVNode())\n                    ]);\n                }\n            };\n            if (headerSlot) {\n                scopedSlots.header = () => $xeTable.callSlot(headerSlot, params);\n            }\n            if (mode === 'drawer') {\n                return VxeUIDrawerComponent\n                    ? h(VxeUIDrawerComponent, {\n                        key: 'drawer',\n                        className: ['vxe-table-custom-drawer-wrapper', 'vxe-table--ignore-clear', drawerOpts.className || ''].join(' '),\n                        modelValue: customStore.visible,\n                        title: drawerOpts.title || getI18n('vxe.custom.cstmTitle'),\n                        width: drawerOpts.width || Math.min(880, Math.floor(document.documentElement.clientWidth * 0.6)),\n                        position: drawerOpts.position,\n                        resize: !!drawerOpts.resize,\n                        escClosable: !!drawerOpts.escClosable,\n                        maskClosable: !!drawerOpts.maskClosable,\n                        destroyOnClose: true,\n                        showFooter: true,\n                        'onUpdate:modelValue'(value) {\n                            customStore.visible = value;\n                        }\n                    }, scopedSlots)\n                    : createCommentVNode();\n            }\n            return VxeUIModalComponent\n                ? h(VxeUIModalComponent, {\n                    key: 'modal',\n                    className: ['vxe-table-custom-modal-wrapper', 'vxe-table--ignore-clear', modalOpts.className || ''].join(' '),\n                    modelValue: customStore.visible,\n                    title: modalOpts.title || getI18n('vxe.custom.cstmTitle'),\n                    width: modalOpts.width || Math.min(880, document.documentElement.clientWidth),\n                    minWidth: modalOpts.minWidth || 700,\n                    height: modalOpts.height || Math.min(680, document.documentElement.clientHeight),\n                    minHeight: modalOpts.minHeight || 400,\n                    showZoom: modalOpts.showZoom,\n                    showMaximize: modalOpts.showMaximize,\n                    showMinimize: modalOpts.showMinimize,\n                    mask: modalOpts.mask,\n                    lockView: modalOpts.lockView,\n                    resize: modalOpts.resize,\n                    escClosable: !!modalOpts.escClosable,\n                    maskClosable: !!modalOpts.maskClosable,\n                    destroyOnClose: true,\n                    showFooter: true,\n                    'onUpdate:modelValue'(value) {\n                        customStore.visible = value;\n                    }\n                }, scopedSlots)\n                : createCommentVNode();\n        };\n        const renderVN = () => {\n            const customOpts = computeCustomOpts.value;\n            if (['modal', 'drawer', 'popup'].includes(`${customOpts.mode}`)) {\n                return renderPopupPanel();\n            }\n            return renderSimplePanel();\n        };\n        nextTick(() => {\n            const customOpts = computeCustomOpts.value;\n            const { mode } = customOpts;\n            if (!VxeUIModalComponent) {\n                errLog('vxe.error.reqComp', ['vxe-modal']);\n            }\n            if (!VxeUIDrawerComponent && (mode === 'drawer')) {\n                errLog('vxe.error.reqComp', ['vxe-drawer']);\n            }\n            if (!VxeUIButtonComponent) {\n                errLog('vxe.error.reqComp', ['vxe-button']);\n            }\n            if (!VxeUINumberInputComponent) {\n                errLog('vxe.error.reqComp', ['vxe-number-input']);\n            }\n            if (!VxeUIRadioGroupComponent) {\n                errLog('vxe.error.reqComp', ['vxe-radio-group']);\n            }\n        });\n        return renderVN;\n    }\n});\n", "import { defineComponent, h, computed, inject } from 'vue';\nimport { VxeUI } from '../../../ui';\nimport { formatText, isEnableConf } from '../../../ui/src/utils';\nimport { getPropClass } from '../../../ui/src/dom';\nimport { getSlotVNs } from '../../../ui/src/vn';\nconst { getI18n, getIcon, renderer } = VxeUI;\nexport default defineComponent({\n    name: 'VxeTableFilterPanel',\n    props: {\n        filterStore: Object\n    },\n    setup(props) {\n        const $xeTable = inject('$xeTable', {});\n        const { reactData: tableReactData, internalData: tableInternalData, getComputeMaps } = $xeTable;\n        const { computeFilterOpts } = getComputeMaps();\n        const computeHasCheckOption = computed(() => {\n            const { filterStore } = props;\n            return filterStore && filterStore.options.some((option) => option.checked);\n        });\n        // 全部筛选事件\n        const filterCheckAllEvent = (evnt, value) => {\n            const { filterStore } = props;\n            filterStore.options.forEach((option) => {\n                option._checked = value;\n                option.checked = value;\n            });\n            filterStore.isAllSelected = value;\n            filterStore.isIndeterminate = false;\n        };\n        /*************************\n         * Publish methods\n         *************************/\n        // 确认筛选\n        const confirmFilter = (evnt) => {\n            $xeTable.handleFilterConfirmFilter(evnt);\n        };\n        // （单选）筛选发生改变\n        const changeRadioOption = (evnt, checked, item) => {\n            $xeTable.handleFilterChangeRadioOption(evnt, checked, item);\n        };\n        /**\n         * 重置筛选\n         * 当筛选面板中的重置按钮被按下时触发\n         * @param {Event} evnt 事件\n         */\n        const resetFilter = (evnt) => {\n            $xeTable.handleFilterResetFilter(evnt);\n        };\n        // （多选）筛选发生改变\n        const changeMultipleOption = (evnt, checked, item) => {\n            $xeTable.handleFilterChangeMultipleOption(evnt, checked, item);\n        };\n        // 筛选发生改变\n        const changeOption = (evnt, checked, item) => {\n            $xeTable.handleFilterChangeOption(evnt, checked, item);\n        };\n        const changeAllOption = (evnt, checked) => {\n            const { filterStore } = props;\n            if (filterStore.multiple) {\n                filterCheckAllEvent(evnt, checked);\n            }\n            else {\n                resetFilter(evnt);\n            }\n        };\n        /*************************\n         * Publish methods\n         *************************/\n        const $panel = {\n            changeRadioOption,\n            changeMultipleOption,\n            changeAllOption,\n            changeOption,\n            confirmFilter,\n            resetFilter\n        };\n        const renderOptions = (filterRender, compConf) => {\n            const { filterStore } = props;\n            const { column, multiple, maxHeight } = filterStore;\n            const slots = column ? column.slots : null;\n            const filterSlot = slots ? slots.filter : null;\n            const params = Object.assign({}, tableInternalData._currFilterParams, { $panel, $table: $xeTable });\n            const rtFilter = compConf ? (compConf.renderTableFilter || compConf.renderFilter) : null;\n            if (filterSlot) {\n                return [\n                    h('div', {\n                        class: 'vxe-table--filter-template',\n                        style: maxHeight\n                            ? {\n                                maxHeight: `${maxHeight}px`\n                            }\n                            : {}\n                    }, $xeTable.callSlot(filterSlot, params))\n                ];\n            }\n            else if (rtFilter) {\n                return [\n                    h('div', {\n                        class: 'vxe-table--filter-template',\n                        style: maxHeight\n                            ? {\n                                maxHeight: `${maxHeight}px`\n                            }\n                            : {}\n                    }, getSlotVNs(rtFilter(filterRender, params)))\n                ];\n            }\n            const isAllChecked = multiple ? filterStore.isAllSelected : !filterStore.options.some((item) => item._checked);\n            const isAllIndeterminate = multiple && filterStore.isIndeterminate;\n            return [\n                h('ul', {\n                    class: 'vxe-table--filter-header'\n                }, [\n                    h('li', {\n                        class: ['vxe-table--filter-option', {\n                                'is--checked': isAllChecked,\n                                'is--indeterminate': isAllIndeterminate\n                            }],\n                        title: getI18n(multiple ? 'vxe.table.allTitle' : 'vxe.table.allFilter'),\n                        onClick: (evnt) => {\n                            changeAllOption(evnt, !filterStore.isAllSelected);\n                        }\n                    }, (multiple\n                        ? [\n                            h('span', {\n                                class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                            })\n                        ]\n                        : []).concat([\n                        h('span', {\n                            class: 'vxe-checkbox--label'\n                        }, getI18n('vxe.table.allFilter'))\n                    ]))\n                ]),\n                h('ul', {\n                    class: 'vxe-table--filter-body',\n                    style: maxHeight\n                        ? {\n                            maxHeight: `${maxHeight}px`\n                        }\n                        : {}\n                }, filterStore.options.map((item) => {\n                    const isChecked = item._checked;\n                    const isIndeterminate = false;\n                    return h('li', {\n                        class: ['vxe-table--filter-option', {\n                                'is--checked': item._checked\n                            }],\n                        title: item.label,\n                        onClick: (evnt) => {\n                            changeOption(evnt, !item._checked, item);\n                        }\n                    }, (multiple\n                        ? [\n                            h('span', {\n                                class: ['vxe-checkbox--icon', isIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                            })\n                        ]\n                        : []).concat([\n                        h('span', {\n                            class: 'vxe-checkbox--label'\n                        }, formatText(item.label, 1))\n                    ]));\n                }))\n            ];\n        };\n        const renderFooters = () => {\n            const { filterStore } = props;\n            const { column, multiple } = filterStore;\n            const filterOpts = computeFilterOpts.value;\n            const hasCheckOption = computeHasCheckOption.value;\n            const { filterRender } = column;\n            const compConf = isEnableConf(filterRender) ? renderer.get(filterRender.name) : null;\n            const isDisabled = !hasCheckOption && !filterStore.isAllSelected && !filterStore.isIndeterminate;\n            return multiple && (compConf ? !(compConf.showTableFilterFooter === false || compConf.showFilterFooter === false || compConf.isFooter === false) : true)\n                ? [\n                    h('div', {\n                        class: 'vxe-table--filter-footer'\n                    }, [\n                        h('button', {\n                            class: {\n                                'is--disabled': isDisabled\n                            },\n                            disabled: isDisabled,\n                            onClick: confirmFilter\n                        }, filterOpts.confirmButtonText || getI18n('vxe.table.confirmFilter')),\n                        h('button', {\n                            onClick: resetFilter\n                        }, filterOpts.resetButtonText || getI18n('vxe.table.resetFilter'))\n                    ])\n                ]\n                : [];\n        };\n        const renderVN = () => {\n            const { filterStore } = props;\n            const { initStore } = tableReactData;\n            const { visible, multiple, column } = filterStore;\n            const filterRender = column ? column.filterRender : null;\n            const compConf = isEnableConf(filterRender) ? renderer.get(filterRender.name) : null;\n            const filterClassName = compConf ? (compConf.tableFilterClassName || compConf.filterClassName) : '';\n            const params = Object.assign({}, tableInternalData._currFilterParams, { $panel, $table: $xeTable });\n            const filterOpts = computeFilterOpts.value;\n            const { destroyOnClose } = filterOpts;\n            return h('div', {\n                class: [\n                    'vxe-table--filter-wrapper',\n                    'filter--prevent-default',\n                    getPropClass(filterClassName, params),\n                    {\n                        'is--animat': $xeTable.props.animat,\n                        'is--multiple': multiple,\n                        'is--active': visible\n                    }\n                ],\n                style: filterStore.style\n            }, initStore.filter && (destroyOnClose ? visible : true) && column ? renderOptions(filterRender, compConf).concat(renderFooters()) : []);\n        };\n        return renderVN;\n    }\n});\n", "import { defineComponent, h, ref, computed, inject, reactive, nextTick, createCommentVNode } from 'vue';\nimport { VxeUI } from '../../../ui';\nimport XEUtils from 'xe-utils';\nimport { parseFile } from '../../../ui/src/utils';\nimport { errLog } from '../../../ui/src/log';\nconst { getI18n, getIcon } = VxeUI;\nexport default defineComponent({\n    name: 'VxeTableImportPanel',\n    props: {\n        defaultOptions: Object,\n        storeData: Object\n    },\n    setup(props) {\n        const VxeUIModalComponent = VxeUI.getComponent('VxeModal');\n        const VxeUIButtonComponent = VxeUI.getComponent('VxeButton');\n        const VxeUISelectComponent = VxeUI.getComponent('VxeSelect');\n        const $xeTable = inject('$xeTable', {});\n        const { computeImportOpts } = $xeTable.getComputeMaps();\n        const reactData = reactive({\n            loading: false\n        });\n        const refFileBtn = ref();\n        const computeSelectName = computed(() => {\n            const { storeData } = props;\n            return `${storeData.filename}.${storeData.type}`;\n        });\n        const computeHasFile = computed(() => {\n            const { storeData } = props;\n            return storeData.file && storeData.type;\n        });\n        const computeParseTypeLabel = computed(() => {\n            const { storeData } = props;\n            const { type, typeList } = storeData;\n            if (type) {\n                const selectItem = XEUtils.find(typeList, item => type === item.value);\n                return selectItem ? selectItem.label : '*.*';\n            }\n            return `*.${typeList.map((item) => item.value).join(', *.')}`;\n        });\n        const clearFileEvent = () => {\n            const { storeData } = props;\n            Object.assign(storeData, {\n                filename: '',\n                sheetName: '',\n                type: ''\n            });\n        };\n        const selectFileEvent = () => {\n            const { storeData, defaultOptions } = props;\n            $xeTable.readFile(defaultOptions).then((params) => {\n                const { file } = params;\n                Object.assign(storeData, parseFile(file), { file });\n            }).catch((e) => e);\n        };\n        const showEvent = () => {\n            nextTick(() => {\n                const targetElem = refFileBtn.value;\n                if (targetElem) {\n                    targetElem.focus();\n                }\n            });\n        };\n        const cancelEvent = () => {\n            const { storeData } = props;\n            storeData.visible = false;\n        };\n        const importEvent = () => {\n            const { storeData, defaultOptions } = props;\n            const importOpts = computeImportOpts.value;\n            reactData.loading = true;\n            $xeTable.importByFile(storeData.file, Object.assign({}, importOpts, defaultOptions)).then(() => {\n                reactData.loading = false;\n                storeData.visible = false;\n            }).catch(() => {\n                reactData.loading = false;\n            });\n        };\n        const renderVN = () => {\n            const $xeGrid = $xeTable.xeGrid;\n            const { defaultOptions, storeData } = props;\n            const selectName = computeSelectName.value;\n            const hasFile = computeHasFile.value;\n            const parseTypeLabel = computeParseTypeLabel.value;\n            const slots = defaultOptions.slots || {};\n            const topSlot = slots.top;\n            const bottomSlot = slots.bottom;\n            const defaultSlot = slots.default;\n            const footerSlot = slots.footer;\n            return VxeUIModalComponent\n                ? h(VxeUIModalComponent, {\n                    id: 'VXE_IMPORT_MODAL',\n                    modelValue: storeData.visible,\n                    title: getI18n('vxe.import.impTitle'),\n                    className: 'vxe-table-export-popup-wrapper',\n                    width: 540,\n                    minWidth: 360,\n                    minHeight: 240,\n                    mask: true,\n                    lockView: true,\n                    showFooter: true,\n                    escClosable: true,\n                    maskClosable: true,\n                    showMaximize: true,\n                    resize: true,\n                    loading: reactData.loading,\n                    'onUpdate:modelValue'(value) {\n                        storeData.visible = value;\n                    },\n                    onShow: showEvent\n                }, {\n                    default: () => {\n                        const params = {\n                            $table: $xeTable,\n                            $grid: $xeGrid,\n                            options: defaultOptions,\n                            params: defaultOptions.params\n                        };\n                        return h('div', {\n                            class: 'vxe-table-export--panel'\n                        }, [\n                            topSlot\n                                ? h('div', {\n                                    class: 'vxe-table-export--panel-top'\n                                }, $xeTable.callSlot(topSlot, params))\n                                : createCommentVNode(),\n                            h('div', {\n                                class: 'vxe-table-export--panel-body'\n                            }, defaultSlot\n                                ? $xeTable.callSlot(defaultSlot, params)\n                                : [\n                                    h('table', {\n                                        class: 'vxe-table-export--panel-table',\n                                        cellspacing: 0,\n                                        cellpadding: 0,\n                                        border: 0\n                                    }, [\n                                        h('tbody', [\n                                            h('tr', [\n                                                h('td', getI18n('vxe.import.impFile')),\n                                                h('td', [\n                                                    hasFile\n                                                        ? h('div', {\n                                                            class: 'vxe-table-export--selected--file',\n                                                            title: selectName\n                                                        }, [\n                                                            h('span', selectName),\n                                                            h('i', {\n                                                                class: getIcon().INPUT_CLEAR,\n                                                                onClick: clearFileEvent\n                                                            })\n                                                        ])\n                                                        : h('button', {\n                                                            ref: refFileBtn,\n                                                            class: 'vxe-table-export--select--file',\n                                                            onClick: selectFileEvent\n                                                        }, getI18n('vxe.import.impSelect'))\n                                                ])\n                                            ]),\n                                            h('tr', [\n                                                h('td', getI18n('vxe.import.impType')),\n                                                h('td', parseTypeLabel)\n                                            ]),\n                                            h('tr', [\n                                                h('td', getI18n('vxe.import.impMode')),\n                                                h('td', [\n                                                    VxeUISelectComponent\n                                                        ? h(VxeUISelectComponent, {\n                                                            modelValue: defaultOptions.mode,\n                                                            options: storeData.modeList,\n                                                            'onUpdate:modelValue'(value) {\n                                                                defaultOptions.mode = value;\n                                                            }\n                                                        })\n                                                        : createCommentVNode()\n                                                ])\n                                            ])\n                                        ])\n                                    ])\n                                ]),\n                            bottomSlot\n                                ? h('div', {\n                                    class: 'vxe-table-export--panel-bottom'\n                                }, $xeTable.callSlot(bottomSlot, params))\n                                : createCommentVNode()\n                        ]);\n                    },\n                    footer() {\n                        const params = {\n                            $table: $xeTable,\n                            $grid: $xeGrid,\n                            options: defaultOptions,\n                            params: defaultOptions.params\n                        };\n                        return h('div', {\n                            class: 'vxe-table-export--panel-footer'\n                        }, footerSlot\n                            ? $xeTable.callSlot(footerSlot, params)\n                            : [\n                                h('div', {\n                                    class: 'vxe-table-export--panel-btns'\n                                }, [\n                                    VxeUIButtonComponent\n                                        ? h(VxeUIButtonComponent, {\n                                            content: getI18n('vxe.import.impCancel'),\n                                            onClick: cancelEvent\n                                        })\n                                        : createCommentVNode(),\n                                    VxeUIButtonComponent\n                                        ? h(VxeUIButtonComponent, {\n                                            status: 'primary',\n                                            disabled: !hasFile || reactData.loading,\n                                            content: getI18n('vxe.import.impConfirm'),\n                                            onClick: importEvent\n                                        })\n                                        : createCommentVNode()\n                                ])\n                            ]);\n                    }\n                })\n                : createCommentVNode();\n        };\n        nextTick(() => {\n            if (!VxeUIModalComponent) {\n                errLog('vxe.error.reqComp', ['vxe-modal']);\n            }\n            if (!VxeUIButtonComponent) {\n                errLog('vxe.error.reqComp', ['vxe-button']);\n            }\n            if (!VxeUISelectComponent) {\n                errLog('vxe.error.reqComp', ['vxe-select']);\n            }\n        });\n        return renderVN;\n    }\n});\n", "import { defineComponent, h, createCommentVNode, ref, computed, reactive, inject, nextTick } from 'vue';\nimport { VxeUI } from '../../../ui';\nimport XEUtils from 'xe-utils';\nimport { formatText } from '../../../ui/src/utils';\nimport { errLog } from '../../../ui/src/log';\nconst { getI18n, getIcon } = VxeUI;\nexport default defineComponent({\n    name: 'VxeTableExportPanel',\n    props: {\n        defaultOptions: Object,\n        storeData: Object\n    },\n    setup(props) {\n        const VxeUIModalComponent = VxeUI.getComponent('VxeModal');\n        const VxeUIButtonComponent = VxeUI.getComponent('VxeButton');\n        const VxeUISelectComponent = VxeUI.getComponent('VxeSelect');\n        const VxeUIInputComponent = VxeUI.getComponent('VxeInput');\n        const VxeUICheckboxComponent = VxeUI.getComponent('VxeCheckbox');\n        const $xeTable = inject('$xeTable', {});\n        const { computeExportOpts, computePrintOpts } = $xeTable.getComputeMaps();\n        const reactData = reactive({\n            isAll: false,\n            isIndeterminate: false,\n            loading: false\n        });\n        const xButtonConfirm = ref();\n        const xInputFilename = ref();\n        const xInputSheetname = ref();\n        const computeCheckedAll = computed(() => {\n            const { storeData } = props;\n            return storeData.columns.every((column) => column.checked);\n        });\n        const computeShowSheet = computed(() => {\n            const { defaultOptions } = props;\n            return ['html', 'xml', 'xlsx', 'pdf'].indexOf(defaultOptions.type) > -1;\n        });\n        const computeSupportMerge = computed(() => {\n            const { storeData, defaultOptions } = props;\n            return !defaultOptions.original && defaultOptions.mode === 'current' && (storeData.isPrint || ['html', 'xlsx'].indexOf(defaultOptions.type) > -1);\n        });\n        // const computeSupportGroup = computed(() => {\n        //   const { defaultOptions } = props\n        //   return ['html', 'xlsx', 'csv', 'txt'].indexOf(defaultOptions.type) > -1\n        // })\n        const computeSupportStyle = computed(() => {\n            const { defaultOptions } = props;\n            return !defaultOptions.original && ['xlsx'].indexOf(defaultOptions.type) > -1;\n        });\n        const handleOptionCheck = (column) => {\n            const { storeData } = props;\n            const matchObj = XEUtils.findTree(storeData.columns, item => item === column);\n            if (matchObj && matchObj.parent) {\n                const { parent } = matchObj;\n                if (parent.children && parent.children.length) {\n                    parent.checked = parent.children.every((column) => column.checked);\n                    parent.halfChecked = !parent.checked && parent.children.some((column) => column.checked || column.halfChecked);\n                    handleOptionCheck(parent);\n                }\n            }\n        };\n        const checkStatus = () => {\n            const { storeData } = props;\n            const columns = storeData.columns;\n            reactData.isAll = columns.every((column) => column.disabled || column.checked);\n            reactData.isIndeterminate = !reactData.isAll && columns.some((column) => !column.disabled && (column.checked || column.halfChecked));\n        };\n        const changeOption = (column) => {\n            const isChecked = !column.checked;\n            XEUtils.eachTree([column], (item) => {\n                item.checked = isChecked;\n                item.halfChecked = false;\n            });\n            handleOptionCheck(column);\n            checkStatus();\n        };\n        const allColumnEvent = () => {\n            const { storeData } = props;\n            const isAll = !reactData.isAll;\n            XEUtils.eachTree(storeData.columns, (column) => {\n                if (!column.disabled) {\n                    column.checked = isAll;\n                    column.halfChecked = false;\n                }\n            });\n            reactData.isAll = isAll;\n            checkStatus();\n        };\n        const showEvent = () => {\n            nextTick(() => {\n                const filenameInp = xInputFilename.value;\n                const sheetnameInp = xInputSheetname.value;\n                const confirmBtn = xButtonConfirm.value;\n                const targetElem = filenameInp || sheetnameInp || confirmBtn;\n                if (targetElem) {\n                    targetElem.focus();\n                }\n            });\n            checkStatus();\n        };\n        const getExportOption = () => {\n            const { storeData, defaultOptions } = props;\n            const { hasMerge, columns } = storeData;\n            const checkedAll = computeCheckedAll.value;\n            const supportMerge = computeSupportMerge.value;\n            const expColumns = XEUtils.searchTree(columns, (column) => column.checked, { children: 'children', mapChildren: 'childNodes', original: true });\n            return Object.assign({}, defaultOptions, {\n                columns: expColumns,\n                isMerge: hasMerge && supportMerge && checkedAll ? defaultOptions.isMerge : false\n            });\n        };\n        const printEvent = () => {\n            const { storeData } = props;\n            const printOpts = computePrintOpts.value;\n            storeData.visible = false;\n            $xeTable.print(Object.assign({}, printOpts, getExportOption()));\n        };\n        const exportEvent = () => {\n            const { storeData } = props;\n            const exportOpts = computeExportOpts.value;\n            reactData.loading = true;\n            $xeTable.exportData(Object.assign({}, exportOpts, getExportOption())).then(() => {\n                reactData.loading = false;\n                storeData.visible = false;\n            }).catch(() => {\n                reactData.loading = false;\n            });\n        };\n        const cancelEvent = () => {\n            const { storeData } = props;\n            storeData.visible = false;\n        };\n        const confirmEvent = () => {\n            const { storeData } = props;\n            if (storeData.isPrint) {\n                printEvent();\n            }\n            else {\n                exportEvent();\n            }\n        };\n        const renderVN = () => {\n            const $xeGrid = $xeTable.xeGrid;\n            const { defaultOptions, storeData } = props;\n            const { isAll: isAllChecked, isIndeterminate: isAllIndeterminate } = reactData;\n            const { hasTree, hasMerge, isPrint, hasColgroup, columns } = storeData;\n            const { isHeader } = defaultOptions;\n            const cols = [];\n            const checkedAll = computeCheckedAll.value;\n            const showSheet = computeShowSheet.value;\n            const supportMerge = computeSupportMerge.value;\n            const supportStyle = computeSupportStyle.value;\n            // const supportGroup = computeSupportGroup.value\n            const slots = defaultOptions.slots || {};\n            const topSlot = slots.top;\n            const bottomSlot = slots.bottom;\n            const defaultSlot = slots.default;\n            const footerSlot = slots.footer;\n            const parameterSlot = slots.parameter;\n            XEUtils.eachTree(columns, (column) => {\n                const colTitle = formatText(column.getTitle(), 1);\n                const isColGroup = column.children && column.children.length;\n                const isChecked = column.checked;\n                const indeterminate = column.halfChecked;\n                const isHtml = column.type === 'html';\n                cols.push(h('li', {\n                    key: column.id,\n                    class: ['vxe-table-export--panel-column-option', `level--${column.level}`, {\n                            'is--group': isColGroup,\n                            'is--checked': isChecked,\n                            'is--indeterminate': indeterminate,\n                            'is--disabled': column.disabled\n                        }],\n                    title: isHtml ? '' : colTitle,\n                    onClick: () => {\n                        if (!column.disabled) {\n                            changeOption(column);\n                        }\n                    }\n                }, [\n                    h('span', {\n                        class: ['vxe-checkbox--icon', indeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                    }),\n                    isHtml\n                        ? h('span', {\n                            key: '1',\n                            class: 'vxe-checkbox--label',\n                            innerHTML: colTitle\n                        })\n                        : h('span', {\n                            key: '0',\n                            class: 'vxe-checkbox--label'\n                        }, colTitle)\n                ]));\n            });\n            return VxeUIModalComponent\n                ? h(VxeUIModalComponent, {\n                    id: 'VXE_EXPORT_MODAL',\n                    modelValue: storeData.visible,\n                    title: getI18n(isPrint ? 'vxe.export.printTitle' : 'vxe.export.expTitle'),\n                    className: 'vxe-table-export-popup-wrapper',\n                    width: 660,\n                    minWidth: 500,\n                    minHeight: 400,\n                    mask: true,\n                    lockView: true,\n                    showFooter: true,\n                    escClosable: true,\n                    maskClosable: true,\n                    showMaximize: true,\n                    resize: true,\n                    loading: reactData.loading,\n                    'onUpdate:modelValue'(value) {\n                        storeData.visible = value;\n                    },\n                    onShow: showEvent\n                }, {\n                    default: () => {\n                        const params = {\n                            $table: $xeTable,\n                            $grid: $xeGrid,\n                            options: defaultOptions,\n                            columns,\n                            params: defaultOptions.params\n                        };\n                        const hasEmptyData = defaultOptions.mode === 'empty';\n                        return h('div', {\n                            class: 'vxe-table-export--panel'\n                        }, [\n                            topSlot\n                                ? h('div', {\n                                    class: 'vxe-table-export--panel-top'\n                                }, $xeTable.callSlot(topSlot, params))\n                                : createCommentVNode(),\n                            h('div', {\n                                class: 'vxe-table-export--panel-body'\n                            }, defaultSlot\n                                ? $xeTable.callSlot(defaultSlot, params)\n                                : [\n                                    h('table', {\n                                        class: 'vxe-table-export--panel-table',\n                                        cellspacing: 0,\n                                        cellpadding: 0,\n                                        border: 0\n                                    }, [\n                                        h('tbody', [\n                                            [\n                                                isPrint\n                                                    ? createCommentVNode()\n                                                    : h('tr', [\n                                                        h('td', getI18n('vxe.export.expName')),\n                                                        h('td', [\n                                                            VxeUIInputComponent\n                                                                ? h(VxeUIInputComponent, {\n                                                                    ref: xInputFilename,\n                                                                    modelValue: defaultOptions.filename,\n                                                                    type: 'text',\n                                                                    clearable: true,\n                                                                    placeholder: getI18n('vxe.export.expNamePlaceholder'),\n                                                                    'onUpdate:modelValue'(value) {\n                                                                        defaultOptions.filename = value;\n                                                                    }\n                                                                })\n                                                                : createCommentVNode()\n                                                        ])\n                                                    ]),\n                                                isPrint\n                                                    ? createCommentVNode()\n                                                    : h('tr', [\n                                                        h('td', getI18n('vxe.export.expType')),\n                                                        h('td', [\n                                                            VxeUISelectComponent\n                                                                ? h(VxeUISelectComponent, {\n                                                                    modelValue: defaultOptions.type,\n                                                                    options: storeData.typeList,\n                                                                    'onUpdate:modelValue'(value) {\n                                                                        defaultOptions.type = value;\n                                                                    }\n                                                                })\n                                                                : createCommentVNode()\n                                                        ])\n                                                    ]),\n                                                isPrint || showSheet\n                                                    ? h('tr', [\n                                                        h('td', getI18n('vxe.export.expSheetName')),\n                                                        h('td', [\n                                                            VxeUIInputComponent\n                                                                ? h(VxeUIInputComponent, {\n                                                                    ref: xInputSheetname,\n                                                                    modelValue: defaultOptions.sheetName,\n                                                                    type: 'text',\n                                                                    clearable: true,\n                                                                    placeholder: getI18n('vxe.export.expSheetNamePlaceholder'),\n                                                                    'onUpdate:modelValue'(value) {\n                                                                        defaultOptions.sheetName = value;\n                                                                    }\n                                                                })\n                                                                : createCommentVNode()\n                                                        ])\n                                                    ])\n                                                    : createCommentVNode(),\n                                                h('tr', [\n                                                    h('td', getI18n('vxe.export.expMode')),\n                                                    h('td', [\n                                                        VxeUISelectComponent\n                                                            ? h(VxeUISelectComponent, {\n                                                                modelValue: defaultOptions.mode,\n                                                                options: storeData.modeList.map((item) => {\n                                                                    return {\n                                                                        value: item.value,\n                                                                        label: getI18n(item.label)\n                                                                    };\n                                                                }),\n                                                                'onUpdate:modelValue'(value) {\n                                                                    defaultOptions.mode = value;\n                                                                }\n                                                            })\n                                                            : createCommentVNode()\n                                                    ])\n                                                ]),\n                                                h('tr', [\n                                                    h('td', [getI18n('vxe.export.expColumn')]),\n                                                    h('td', [\n                                                        h('div', {\n                                                            class: 'vxe-table-export--panel-column'\n                                                        }, [\n                                                            h('ul', {\n                                                                class: 'vxe-table-export--panel-column-header'\n                                                            }, [\n                                                                h('li', {\n                                                                    class: ['vxe-table-export--panel-column-option', {\n                                                                            'is--checked': isAllChecked,\n                                                                            'is--indeterminate': isAllIndeterminate\n                                                                        }],\n                                                                    title: getI18n('vxe.table.allTitle'),\n                                                                    onClick: allColumnEvent\n                                                                }, [\n                                                                    h('span', {\n                                                                        class: ['vxe-checkbox--icon', isAllIndeterminate ? getIcon().TABLE_CHECKBOX_INDETERMINATE : (isAllChecked ? getIcon().TABLE_CHECKBOX_CHECKED : getIcon().TABLE_CHECKBOX_UNCHECKED)]\n                                                                    }),\n                                                                    h('span', {\n                                                                        class: 'vxe-checkbox--label'\n                                                                    }, getI18n('vxe.export.expCurrentColumn'))\n                                                                ])\n                                                            ]),\n                                                            h('ul', {\n                                                                class: 'vxe-table-export--panel-column-body'\n                                                            }, cols)\n                                                        ])\n                                                    ])\n                                                ]),\n                                                h('tr', [\n                                                    h('td', getI18n('vxe.export.expOpts')),\n                                                    parameterSlot\n                                                        ? h('td', [\n                                                            h('div', {\n                                                                class: 'vxe-table-export--panel-option-row'\n                                                            }, $xeTable.callSlot(parameterSlot, params))\n                                                        ])\n                                                        : h('td', [\n                                                            h('div', {\n                                                                class: 'vxe-table-export--panel-option-row'\n                                                            }, [\n                                                                VxeUICheckboxComponent\n                                                                    ? h(VxeUICheckboxComponent, {\n                                                                        modelValue: hasEmptyData || defaultOptions.isHeader,\n                                                                        disabled: hasEmptyData,\n                                                                        title: getI18n('vxe.export.expHeaderTitle'),\n                                                                        content: getI18n('vxe.export.expOptHeader'),\n                                                                        'onUpdate:modelValue'(value) {\n                                                                            defaultOptions.isHeader = value;\n                                                                        }\n                                                                    })\n                                                                    : createCommentVNode(),\n                                                                VxeUICheckboxComponent\n                                                                    ? h(VxeUICheckboxComponent, {\n                                                                        modelValue: defaultOptions.isFooter,\n                                                                        disabled: !storeData.hasFooter,\n                                                                        title: getI18n('vxe.export.expFooterTitle'),\n                                                                        content: getI18n('vxe.export.expOptFooter'),\n                                                                        'onUpdate:modelValue'(value) {\n                                                                            defaultOptions.isFooter = value;\n                                                                        }\n                                                                    })\n                                                                    : createCommentVNode(),\n                                                                VxeUICheckboxComponent\n                                                                    ? h(VxeUICheckboxComponent, {\n                                                                        modelValue: hasEmptyData ? false : defaultOptions.original,\n                                                                        disabled: hasEmptyData,\n                                                                        title: getI18n('vxe.export.expOriginalTitle'),\n                                                                        content: getI18n('vxe.export.expOptOriginal'),\n                                                                        'onUpdate:modelValue'(value) {\n                                                                            defaultOptions.original = value;\n                                                                        }\n                                                                    })\n                                                                    : createCommentVNode()\n                                                            ]),\n                                                            h('div', {\n                                                                class: 'vxe-table-export--panel-option-row'\n                                                            }, [\n                                                                VxeUICheckboxComponent\n                                                                    ? h(VxeUICheckboxComponent, {\n                                                                        // modelValue: supportGroup || (isHeader && hasColgroup && supportMerge) ? defaultOptions.isColgroup : false,\n                                                                        // title: getI18n('vxe.export.expColgroupTitle'),\n                                                                        // disabled: !supportGroup && (!isHeader || !hasColgroup || !supportMerge),\n                                                                        modelValue: isHeader && hasColgroup && supportMerge ? defaultOptions.isColgroup : false,\n                                                                        title: getI18n('vxe.export.expColgroupTitle'),\n                                                                        disabled: !isHeader || !hasColgroup || !supportMerge,\n                                                                        content: getI18n('vxe.export.expOptColgroup'),\n                                                                        'onUpdate:modelValue'(value) {\n                                                                            defaultOptions.isColgroup = value;\n                                                                        }\n                                                                    })\n                                                                    : createCommentVNode(),\n                                                                VxeUICheckboxComponent\n                                                                    ? h(VxeUICheckboxComponent, {\n                                                                        modelValue: hasMerge && supportMerge && checkedAll ? defaultOptions.isMerge : false,\n                                                                        title: getI18n('vxe.export.expMergeTitle'),\n                                                                        disabled: hasEmptyData || !hasMerge || !supportMerge || !checkedAll,\n                                                                        content: getI18n('vxe.export.expOptMerge'),\n                                                                        'onUpdate:modelValue'(value) {\n                                                                            defaultOptions.isMerge = value;\n                                                                        }\n                                                                    })\n                                                                    : createCommentVNode(),\n                                                                isPrint || !VxeUICheckboxComponent\n                                                                    ? createCommentVNode()\n                                                                    : h(VxeUICheckboxComponent, {\n                                                                        modelValue: supportStyle ? defaultOptions.useStyle : false,\n                                                                        disabled: !supportStyle,\n                                                                        title: getI18n('vxe.export.expUseStyleTitle'),\n                                                                        content: getI18n('vxe.export.expOptUseStyle'),\n                                                                        'onUpdate:modelValue'(value) {\n                                                                            defaultOptions.useStyle = value;\n                                                                        }\n                                                                    }),\n                                                                VxeUICheckboxComponent\n                                                                    ? h(VxeUICheckboxComponent, {\n                                                                        modelValue: hasTree ? defaultOptions.isAllExpand : false,\n                                                                        disabled: hasEmptyData || !hasTree,\n                                                                        title: getI18n('vxe.export.expAllExpandTitle'),\n                                                                        content: getI18n('vxe.export.expOptAllExpand'),\n                                                                        'onUpdate:modelValue'(value) {\n                                                                            defaultOptions.isAllExpand = value;\n                                                                        }\n                                                                    })\n                                                                    : createCommentVNode()\n                                                            ])\n                                                        ])\n                                                ])\n                                            ]\n                                        ])\n                                    ])\n                                ]),\n                            bottomSlot\n                                ? h('div', {\n                                    class: 'vxe-table-export--panel-bottom'\n                                }, $xeTable.callSlot(bottomSlot, params))\n                                : createCommentVNode()\n                        ]);\n                    },\n                    footer() {\n                        const params = {\n                            $table: $xeTable,\n                            $grid: $xeGrid,\n                            options: defaultOptions,\n                            columns,\n                            params: defaultOptions.params\n                        };\n                        return h('div', {\n                            class: 'vxe-table-export--panel-footer'\n                        }, footerSlot\n                            ? $xeTable.callSlot(footerSlot, params)\n                            : [\n                                h('div', {\n                                    class: 'vxe-table-export--panel-btns'\n                                }, [\n                                    VxeUIButtonComponent\n                                        ? h(VxeUIButtonComponent, {\n                                            content: getI18n('vxe.export.expCancel'),\n                                            onClick: cancelEvent\n                                        })\n                                        : createCommentVNode(),\n                                    VxeUIButtonComponent\n                                        ? h(VxeUIButtonComponent, {\n                                            ref: xButtonConfirm,\n                                            status: 'primary',\n                                            content: getI18n(isPrint ? 'vxe.export.expPrint' : 'vxe.export.expConfirm'),\n                                            onClick: confirmEvent\n                                        })\n                                        : createCommentVNode()\n                                ])\n                            ]);\n                    }\n                })\n                : createCommentVNode();\n        };\n        nextTick(() => {\n            if (!VxeUIModalComponent) {\n                errLog('vxe.error.reqComp', ['vxe-modal']);\n            }\n            if (!VxeUIButtonComponent) {\n                errLog('vxe.error.reqComp', ['vxe-button']);\n            }\n            if (!VxeUISelectComponent) {\n                errLog('vxe.error.reqComp', ['vxe-select']);\n            }\n            if (!VxeUIInputComponent) {\n                errLog('vxe.error.reqComp', ['vxe-input']);\n            }\n            if (!VxeUICheckboxComponent) {\n                errLog('vxe.error.reqComp', ['vxe-checkbox']);\n            }\n        });\n        return renderVN;\n    }\n});\n", "import { defineComponent, h, Teleport, inject, ref, createCommentVNode } from 'vue';\nimport { VxeUI } from '../../../ui';\nimport { getFuncText } from '../../../ui/src/utils';\nimport XEUtils from 'xe-utils';\nconst { getIcon } = VxeUI;\nexport default defineComponent({\n    name: 'VxeTableMenuPanel',\n    setup(props, context) {\n        const xID = XEUtils.uniqueId();\n        const $xeTable = inject('$xeTable', {});\n        const { reactData: tableReactData } = $xeTable;\n        const refElem = ref();\n        const refMaps = {\n            refElem\n        };\n        const $xeMenuPanel = {\n            xID,\n            props,\n            context,\n            getRefMaps: () => refMaps\n        };\n        const renderVN = () => {\n            const { ctxMenuStore } = tableReactData;\n            const { computeMenuOpts } = $xeTable.getComputeMaps();\n            const menuOpts = computeMenuOpts.value;\n            return h(Teleport, {\n                to: 'body',\n                disabled: false\n            }, [\n                h('div', {\n                    ref: refElem,\n                    class: ['vxe-table--context-menu-wrapper', menuOpts.className, {\n                            'is--visible': ctxMenuStore.visible\n                        }],\n                    style: ctxMenuStore.style\n                }, ctxMenuStore.list.map((options, gIndex) => {\n                    return options.every(item => item.visible === false)\n                        ? createCommentVNode()\n                        : h('ul', {\n                            class: 'vxe-context-menu--option-wrapper',\n                            key: gIndex\n                        }, options.map((item, index) => {\n                            const hasChildMenus = item.children && item.children.some((child) => child.visible !== false);\n                            const prefixOpts = Object.assign({}, item.prefixConfig);\n                            const suffixOpts = Object.assign({}, item.suffixConfig);\n                            return item.visible === false\n                                ? null\n                                : h('li', {\n                                    class: [item.className, {\n                                            'link--disabled': item.disabled,\n                                            'link--active': item === ctxMenuStore.selected\n                                        }],\n                                    key: `${gIndex}_${index}`\n                                }, [\n                                    h('a', {\n                                        class: 'vxe-context-menu--link',\n                                        onClick(evnt) {\n                                            $xeTable.ctxMenuLinkEvent(evnt, item);\n                                        },\n                                        onMouseover(evnt) {\n                                            $xeTable.ctxMenuMouseoverEvent(evnt, item);\n                                        },\n                                        onMouseout(evnt) {\n                                            $xeTable.ctxMenuMouseoutEvent(evnt, item);\n                                        }\n                                    }, [\n                                        h('div', {\n                                            class: ['vxe-context-menu--link-prefix', prefixOpts.className || '']\n                                        }, [\n                                            h('i', {\n                                                class: prefixOpts.icon || item.prefixIcon\n                                            }),\n                                            prefixOpts.content ? h('span', {}, `${prefixOpts.content}`) : createCommentVNode()\n                                        ]),\n                                        h('div', {\n                                            class: 'vxe-context-menu--link-content'\n                                        }, getFuncText(item.name)),\n                                        h('div', {\n                                            class: ['vxe-context-menu--link-suffix', suffixOpts.className || '']\n                                        }, [\n                                            h('i', {\n                                                class: (suffixOpts.icon || item.suffixIcon) || (hasChildMenus ? getIcon().TABLE_MENU_OPTIONS : '')\n                                            }),\n                                            suffixOpts.content ? h('span', `${suffixOpts.content}`) : createCommentVNode()\n                                        ])\n                                    ]),\n                                    hasChildMenus\n                                        ? h('ul', {\n                                            class: ['vxe-table--context-menu-clild-wrapper', {\n                                                    'is--show': item === ctxMenuStore.selected && ctxMenuStore.showChild\n                                                }]\n                                        }, item.children.map((child, cIndex) => {\n                                            const childPrefixOpts = Object.assign({}, child.prefixConfig);\n                                            const childSuffixOpts = Object.assign({}, child.suffixConfig);\n                                            return child.visible === false\n                                                ? null\n                                                : h('li', {\n                                                    class: [child.className, {\n                                                            'link--disabled': child.disabled,\n                                                            'link--active': child === ctxMenuStore.selectChild\n                                                        }],\n                                                    key: `${gIndex}_${index}_${cIndex}`\n                                                }, [\n                                                    h('a', {\n                                                        class: 'vxe-context-menu--link',\n                                                        onClick(evnt) {\n                                                            $xeTable.ctxMenuLinkEvent(evnt, child);\n                                                        },\n                                                        onMouseover(evnt) {\n                                                            $xeTable.ctxMenuMouseoverEvent(evnt, item, child);\n                                                        },\n                                                        onMouseout(evnt) {\n                                                            $xeTable.ctxMenuMouseoutEvent(evnt, item);\n                                                        }\n                                                    }, [\n                                                        h('div', {\n                                                            class: ['vxe-context-menu--link-prefix', childPrefixOpts.className || '']\n                                                        }, [\n                                                            h('i', {\n                                                                class: childPrefixOpts.icon || child.prefixIcon\n                                                            }),\n                                                            childPrefixOpts.content ? h('span', `${childPrefixOpts.content}`) : createCommentVNode()\n                                                        ]),\n                                                        h('div', {\n                                                            class: 'vxe-context-menu--link-content'\n                                                        }, getFuncText(child.name)),\n                                                        h('div', {\n                                                            class: ['vxe-context-menu--link-suffix', childSuffixOpts.className || '']\n                                                        }, [\n                                                            h('i', {\n                                                                class: childSuffixOpts.icon\n                                                            }),\n                                                            childSuffixOpts.content ? h('span', `${childSuffixOpts.content}`) : createCommentVNode()\n                                                        ])\n                                                    ])\n                                                ]);\n                                        }))\n                                        : null\n                                ]);\n                        }));\n                }))\n            ]);\n        };\n        $xeMenuPanel.renderVN = renderVN;\n        return $xeMenuPanel;\n    },\n    render() {\n        return this.renderVN();\n    }\n});\n", "import { computed } from 'vue';\nimport XEUtils from 'xe-utils';\nexport function useCellView(props) {\n    const currColumn = computed(() => {\n        const { renderParams } = props;\n        return renderParams.column;\n    });\n    const currRow = computed(() => {\n        const { renderParams } = props;\n        return renderParams.row;\n    });\n    const cellOptions = computed(() => {\n        const { renderOpts } = props;\n        return renderOpts.props || {};\n    });\n    const cellModel = computed({\n        get() {\n            const { renderParams } = props;\n            const { row, column } = renderParams;\n            return XEUtils.get(row, column.field);\n        },\n        set(value) {\n            const { renderParams } = props;\n            const { row, column } = renderParams;\n            return XEUtils.set(row, column.field, value);\n        }\n    });\n    return {\n        currColumn,\n        currRow,\n        cellModel,\n        cellOptions\n    };\n}\n", "import { nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../../ui';\nimport { toFilters, handleFieldOrColumn, getRefElem } from '../../src/util';\nimport { getDomNode, triggerEvent } from '../../../ui/src/dom';\nimport { isEnableConf } from '../../../ui/src/utils';\nconst { renderer, hooks } = VxeUI;\nconst tableFilterMethodKeys = ['openFilter', 'setFilter', 'clearFilter', 'saveFilterPanel', 'resetFilterPanel', 'getCheckedFilters', 'updateFilterOptionStatus'];\nhooks.add('tableFilterModule', {\n    setupTable($xeTable) {\n        const { props, reactData, internalData } = $xeTable;\n        const { refElem, refTableFilter } = $xeTable.getRefMaps();\n        const { computeFilterOpts, computeMouseOpts } = $xeTable.getComputeMaps();\n        // 确认筛选\n        const handleFilterConfirmFilter = (evnt) => {\n            const { filterStore } = reactData;\n            filterStore.options.forEach((option) => {\n                option.checked = option._checked;\n            });\n            $xeTable.confirmFilterEvent(evnt);\n        };\n        // （单选）筛选发生改变\n        const changeRadioOption = (evnt, checked, item) => {\n            const { filterStore } = reactData;\n            filterStore.options.forEach((option) => {\n                option._checked = false;\n            });\n            item._checked = checked;\n            $xeTable.checkFilterOptions();\n            handleFilterConfirmFilter(evnt);\n        };\n        // （多选）筛选发生改变\n        const changeMultipleOption = (evnt, checked, item) => {\n            item._checked = checked;\n            $xeTable.checkFilterOptions();\n        };\n        /**\n         * 重置筛选\n         * 当筛选面板中的重置按钮被按下时触发\n         * @param {Event} evnt 事件\n         */\n        const handleFilterResetFilter = (evnt) => {\n            const { filterStore } = reactData;\n            $xeTable.handleClearFilter(filterStore.column);\n            $xeTable.confirmFilterEvent(evnt);\n        };\n        const filterPrivateMethods = {\n            checkFilterOptions() {\n                const { filterStore } = reactData;\n                filterStore.isAllSelected = filterStore.options.every((item) => item._checked);\n                filterStore.isIndeterminate = !filterStore.isAllSelected && filterStore.options.some((item) => item._checked);\n            },\n            /**\n             * 点击筛选事件\n             * 当筛选图标被点击时触发\n             * 更新选项是否全部状态\n             * 打开筛选面板\n             * @param {Event} evnt 事件\n             * @param {ColumnInfo} column 列配置\n             * @param {Object} params 参数\n             */\n            triggerFilterEvent(evnt, column, params) {\n                const { initStore, filterStore } = reactData;\n                const { elemStore } = internalData;\n                if (filterStore.column === column && filterStore.visible) {\n                    filterStore.visible = false;\n                }\n                else {\n                    const { clientY, pageX } = evnt;\n                    const el = refElem.value;\n                    const tableRect = el.getBoundingClientRect();\n                    const targetElem = evnt.target;\n                    const { visibleWidth } = getDomNode();\n                    const { filters, filterMultiple, filterRender } = column;\n                    const compConf = isEnableConf(filterRender) ? renderer.get(filterRender.name) : null;\n                    const frMethod = column.filterRecoverMethod || (compConf ? (compConf.tableFilterRecoverMethod || compConf.filterRecoverMethod) : null);\n                    internalData._currFilterParams = params;\n                    Object.assign(filterStore, {\n                        multiple: filterMultiple,\n                        options: filters,\n                        column,\n                        style: null\n                    });\n                    // 复原状态\n                    filterStore.options.forEach((option) => {\n                        const { _checked, checked } = option;\n                        option._checked = checked;\n                        if (!checked && _checked !== checked) {\n                            if (frMethod) {\n                                frMethod({ option, column, $table: $xeTable });\n                            }\n                        }\n                    });\n                    this.checkFilterOptions();\n                    filterStore.visible = true;\n                    initStore.filter = true;\n                    nextTick(() => {\n                        const headerScrollElem = getRefElem(elemStore['main-header-scroll']);\n                        if (!headerScrollElem) {\n                            return;\n                        }\n                        const tableFilter = refTableFilter.value;\n                        const filterWrapperElem = tableFilter ? tableFilter.$el : null;\n                        if (!filterWrapperElem) {\n                            return;\n                        }\n                        const filterWidth = filterWrapperElem.offsetWidth;\n                        const filterHeadElem = filterWrapperElem.querySelector('.vxe-table--filter-header');\n                        const filterFootElem = filterWrapperElem.querySelector('.vxe-table--filter-footer');\n                        const centerWidth = filterWidth / 2;\n                        const minMargin = 10;\n                        const maxLeft = el.clientWidth - filterWidth - minMargin;\n                        let left, right;\n                        const thEl = targetElem.offsetParent;\n                        const trEl = thEl.offsetParent;\n                        const style = {\n                            top: `${targetElem.offsetTop + thEl.offsetTop + targetElem.offsetHeight}px`\n                        };\n                        // 判断面板不能大于表格高度\n                        const maxHeight = Math.max(40, el.clientHeight - (clientY - tableRect.y) - (filterHeadElem ? filterHeadElem.clientHeight : 0) - (filterFootElem ? filterFootElem.clientHeight : 0) - 14);\n                        if (column.fixed === 'left') {\n                            left = targetElem.offsetLeft + thEl.offsetLeft - centerWidth;\n                        }\n                        else if (column.fixed === 'right') {\n                            right = (thEl.offsetWidth - targetElem.offsetLeft) + (trEl.offsetWidth - trEl.offsetLeft) - column.renderWidth - centerWidth;\n                        }\n                        else {\n                            left = targetElem.offsetLeft + thEl.offsetLeft - centerWidth - headerScrollElem.scrollLeft;\n                        }\n                        if (left) {\n                            const overflowWidth = (pageX + filterWidth - centerWidth + minMargin) - visibleWidth;\n                            if (overflowWidth > 0) {\n                                left -= overflowWidth;\n                            }\n                            style.left = `${Math.min(maxLeft, Math.max(minMargin, left))}px`;\n                        }\n                        else if (right) {\n                            const overflowWidth = (pageX + filterWidth - centerWidth + minMargin) - visibleWidth;\n                            if (overflowWidth > 0) {\n                                right += overflowWidth;\n                            }\n                            style.right = `${Math.max(minMargin, right)}px`;\n                        }\n                        filterStore.style = style;\n                        filterStore.maxHeight = maxHeight;\n                    });\n                }\n                $xeTable.dispatchEvent('filter-visible', { column, field: column.field, property: column.field, filterList: $xeTable.getCheckedFilters(), visible: filterStore.visible }, evnt);\n            },\n            handleClearFilter(column) {\n                if (column) {\n                    const { filters, filterRender } = column;\n                    if (filters) {\n                        const compConf = isEnableConf(filterRender) ? renderer.get(filterRender.name) : null;\n                        const frMethod = column.filterResetMethod || (compConf ? (compConf.tableFilterResetMethod || compConf.filterResetMethod) : null);\n                        filters.forEach((item) => {\n                            item._checked = false;\n                            item.checked = false;\n                            if (!frMethod) {\n                                item.data = XEUtils.clone(item.resetValue, true);\n                            }\n                        });\n                        if (frMethod) {\n                            frMethod({ options: filters, column, $table: $xeTable });\n                        }\n                    }\n                }\n            },\n            handleColumnConfirmFilter(column, evnt) {\n                const { mouseConfig } = props;\n                const { scrollXLoad: oldScrollXLoad, scrollYLoad: oldScrollYLoad } = reactData;\n                const filterOpts = computeFilterOpts.value;\n                const mouseOpts = computeMouseOpts.value;\n                const { field } = column;\n                const values = [];\n                const datas = [];\n                column.filters.forEach((item) => {\n                    if (item.checked) {\n                        values.push(item.value);\n                        datas.push(item.data);\n                    }\n                });\n                const filterList = $xeTable.getCheckedFilters();\n                const params = { $table: $xeTable, $event: evnt, column, field, property: field, values, datas, filters: filterList, filterList };\n                // 如果是服务端筛选，则跳过本地筛选处理\n                if (!filterOpts.remote) {\n                    $xeTable.handleTableData(true);\n                    $xeTable.checkSelectionStatus();\n                }\n                if (mouseConfig && mouseOpts.area && $xeTable.handleFilterEvent) {\n                    $xeTable.handleFilterEvent(evnt, params);\n                }\n                if (evnt) {\n                    $xeTable.dispatchEvent('filter-change', params, evnt);\n                }\n                $xeTable.closeFilter();\n                return $xeTable.updateFooter().then(() => {\n                    const { scrollXLoad, scrollYLoad } = reactData;\n                    if ((oldScrollXLoad || scrollXLoad) || (oldScrollYLoad || scrollYLoad)) {\n                        if (oldScrollXLoad || scrollXLoad) {\n                            $xeTable.updateScrollXSpace();\n                        }\n                        if (oldScrollYLoad || scrollYLoad) {\n                            $xeTable.updateScrollYSpace();\n                        }\n                        return $xeTable.refreshScroll();\n                    }\n                }).then(() => {\n                    $xeTable.updateCellAreas();\n                    return $xeTable.recalculate(true);\n                }).then(() => {\n                    // 存在滚动行为未结束情况\n                    setTimeout(() => $xeTable.recalculate(), 50);\n                });\n            },\n            /**\n             * 确认筛选\n             * 当筛选面板中的确定按钮被按下时触发\n             * @param {Event} evnt 事件\n             */\n            confirmFilterEvent(evnt) {\n                const { filterStore } = reactData;\n                const { column } = filterStore;\n                $xeTable.handleColumnConfirmFilter(column, evnt);\n            },\n            handleFilterChangeRadioOption: changeRadioOption,\n            handleFilterChangeMultipleOption: changeMultipleOption,\n            // 筛选发生改变\n            handleFilterChangeOption(evnt, checked, item) {\n                const { filterStore } = reactData;\n                if (filterStore.multiple) {\n                    changeMultipleOption(evnt, checked, item);\n                }\n                else {\n                    changeRadioOption(evnt, checked, item);\n                }\n            },\n            handleFilterConfirmFilter,\n            handleFilterResetFilter\n        };\n        const filterMethods = {\n            /**\n             * 手动弹出筛选面板\n             * @param column\n             */\n            openFilter(fieldOrColumn) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column && column.filters) {\n                    const { elemStore } = internalData;\n                    const { fixed } = column;\n                    return $xeTable.scrollToColumn(column).then(() => {\n                        const headerWrapperElem = getRefElem(elemStore[`${fixed || 'main'}-header-wrapper`] || elemStore['main-header-wrapper']);\n                        if (headerWrapperElem) {\n                            const filterBtnElem = headerWrapperElem.querySelector(`.vxe-header--column.${column.id} .vxe-filter--btn`);\n                            triggerEvent(filterBtnElem, 'click');\n                        }\n                    });\n                }\n                return nextTick();\n            },\n            /**\n             * 修改筛选条件列表\n             * @param {ColumnInfo} fieldOrColumn 列或字段名\n             * @param {Array} options 选项\n             */\n            setFilter(fieldOrColumn, options, isUpdate) {\n                const column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                if (column && column.filters) {\n                    column.filters = toFilters(options || []);\n                    if (isUpdate) {\n                        return $xeTable.handleColumnConfirmFilter(column, new Event('click'));\n                    }\n                }\n                return nextTick();\n            },\n            /**\n             * 清空指定列的筛选条件\n             * 如果为空则清空所有列的筛选条件\n             * @param {String} fieldOrColumn 列或字段名\n             */\n            clearFilter(fieldOrColumn) {\n                const { filterStore } = reactData;\n                const { tableFullColumn } = internalData;\n                const filterOpts = computeFilterOpts.value;\n                let column;\n                if (fieldOrColumn) {\n                    column = handleFieldOrColumn($xeTable, fieldOrColumn);\n                    if (column) {\n                        filterPrivateMethods.handleClearFilter(column);\n                    }\n                }\n                else {\n                    tableFullColumn.forEach(filterPrivateMethods.handleClearFilter);\n                }\n                if (!fieldOrColumn || column !== filterStore.column) {\n                    Object.assign(filterStore, {\n                        isAllSelected: false,\n                        isIndeterminate: false,\n                        style: null,\n                        options: [],\n                        column: null,\n                        multiple: false,\n                        visible: false\n                    });\n                }\n                if (!filterOpts.remote) {\n                    return $xeTable.updateData();\n                }\n                return nextTick();\n            },\n            saveFilterPanel() {\n                handleFilterConfirmFilter(null);\n                return nextTick();\n            },\n            resetFilterPanel() {\n                handleFilterResetFilter(null);\n                return nextTick();\n            },\n            getCheckedFilters() {\n                const { tableFullColumn } = internalData;\n                const filterList = [];\n                tableFullColumn.forEach((column) => {\n                    const { field, filters } = column;\n                    const valueList = [];\n                    const dataList = [];\n                    if (filters && filters.length) {\n                        filters.forEach((item) => {\n                            if (item.checked) {\n                                valueList.push(item.value);\n                                dataList.push(item.data);\n                            }\n                        });\n                        if (valueList.length) {\n                            filterList.push({ column, field, property: field, values: valueList, datas: dataList });\n                        }\n                    }\n                });\n                return filterList;\n            },\n            updateFilterOptionStatus(item, checked) {\n                item._checked = checked;\n                item.checked = checked;\n                return nextTick();\n            }\n        };\n        return Object.assign(Object.assign({}, filterMethods), filterPrivateMethods);\n    },\n    setupGrid($xeGrid) {\n        return $xeGrid.extendTableMethods(tableFilterMethodKeys);\n    }\n});\n", "import { nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../../ui';\nimport { getDomNode, getAbsolutePos, getEventTargetNode } from '../../../ui/src/dom';\nimport { isEnableConf, hasChildrenList } from '../../../ui/src/utils';\nconst { menus, hooks, globalEvents, GLOBAL_EVENT_KEYS } = VxeUI;\nconst tableMenuMethodKeys = ['closeMenu'];\nhooks.add('tableMenuModule', {\n    setupTable($xeTable) {\n        const { xID, props, reactData, internalData } = $xeTable;\n        const { refElem, refTableFilter, refTableMenu } = $xeTable.getRefMaps();\n        const { computeMouseOpts, computeIsMenu, computeMenuOpts } = $xeTable.getComputeMaps();\n        let menuMethods = {};\n        let menuPrivateMethods = {};\n        /**\n         * 显示快捷菜单\n         */\n        const handleOpenMenuEvent = (evnt, type, params) => {\n            const { ctxMenuStore } = reactData;\n            const isMenu = computeIsMenu.value;\n            const menuOpts = computeMenuOpts.value;\n            const config = menuOpts[type];\n            const visibleMethod = menuOpts.visibleMethod;\n            if (config) {\n                const { options, disabled } = config;\n                if (disabled) {\n                    evnt.preventDefault();\n                }\n                else if (isMenu && options && options.length) {\n                    params.options = options;\n                    $xeTable.preventEvent(evnt, 'event.showMenu', params, () => {\n                        if (!visibleMethod || visibleMethod(params)) {\n                            evnt.preventDefault();\n                            $xeTable.updateZindex();\n                            const { scrollTop, scrollLeft, visibleHeight, visibleWidth } = getDomNode();\n                            let top = evnt.clientY + scrollTop;\n                            let left = evnt.clientX + scrollLeft;\n                            const handleVisible = () => {\n                                internalData._currMenuParams = params;\n                                Object.assign(ctxMenuStore, {\n                                    visible: true,\n                                    list: options,\n                                    selected: null,\n                                    selectChild: null,\n                                    showChild: false,\n                                    style: {\n                                        zIndex: internalData.tZindex,\n                                        top: `${top}px`,\n                                        left: `${left}px`\n                                    }\n                                });\n                                nextTick(() => {\n                                    const tableMenu = refTableMenu.value;\n                                    const ctxElem = tableMenu.getRefMaps().refElem.value;\n                                    const clientHeight = ctxElem.clientHeight;\n                                    const clientWidth = ctxElem.clientWidth;\n                                    const { boundingTop, boundingLeft } = getAbsolutePos(ctxElem);\n                                    const offsetTop = boundingTop + clientHeight - visibleHeight;\n                                    const offsetLeft = boundingLeft + clientWidth - visibleWidth;\n                                    if (offsetTop > -10) {\n                                        ctxMenuStore.style.top = `${Math.max(scrollTop + 2, top - clientHeight - 2)}px`;\n                                    }\n                                    if (offsetLeft > -10) {\n                                        ctxMenuStore.style.left = `${Math.max(scrollLeft + 2, left - clientWidth - 2)}px`;\n                                    }\n                                });\n                            };\n                            const { keyboard, row, column } = params;\n                            if (keyboard && row && column) {\n                                $xeTable.scrollToRow(row, column).then(() => {\n                                    const cell = $xeTable.getCellElement(row, column);\n                                    if (cell) {\n                                        const { boundingTop, boundingLeft } = getAbsolutePos(cell);\n                                        top = boundingTop + scrollTop + Math.floor(cell.offsetHeight / 2);\n                                        left = boundingLeft + scrollLeft + Math.floor(cell.offsetWidth / 2);\n                                    }\n                                    handleVisible();\n                                });\n                            }\n                            else {\n                                handleVisible();\n                            }\n                        }\n                        else {\n                            menuMethods.closeMenu();\n                        }\n                    });\n                }\n            }\n            $xeTable.closeFilter();\n        };\n        menuMethods = {\n            /**\n             * 关闭快捷菜单\n             */\n            closeMenu() {\n                Object.assign(reactData.ctxMenuStore, {\n                    visible: false,\n                    selected: null,\n                    selectChild: null,\n                    showChild: false\n                });\n                return nextTick();\n            }\n        };\n        menuPrivateMethods = {\n            /**\n             * 处理菜单的移动\n             */\n            moveCtxMenu(evnt, ctxMenuStore, property, hasOper, operRest, menuList) {\n                let selectItem;\n                const selectIndex = XEUtils.findIndexOf(menuList, item => ctxMenuStore[property] === item);\n                if (hasOper) {\n                    if (operRest && hasChildrenList(ctxMenuStore.selected)) {\n                        ctxMenuStore.showChild = true;\n                    }\n                    else {\n                        ctxMenuStore.showChild = false;\n                        ctxMenuStore.selectChild = null;\n                    }\n                }\n                else if (globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ARROW_UP)) {\n                    for (let len = selectIndex - 1; len >= 0; len--) {\n                        if (menuList[len].visible !== false) {\n                            selectItem = menuList[len];\n                            break;\n                        }\n                    }\n                    ctxMenuStore[property] = selectItem || menuList[menuList.length - 1];\n                }\n                else if (globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ARROW_DOWN)) {\n                    for (let index = selectIndex + 1; index < menuList.length; index++) {\n                        if (menuList[index].visible !== false) {\n                            selectItem = menuList[index];\n                            break;\n                        }\n                    }\n                    ctxMenuStore[property] = selectItem || menuList[0];\n                }\n                else if (ctxMenuStore[property] && (globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ENTER) || globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.SPACEBAR))) {\n                    menuPrivateMethods.ctxMenuLinkEvent(evnt, ctxMenuStore[property]);\n                }\n            },\n            handleOpenMenuEvent,\n            /**\n             * 快捷菜单事件处理\n             */\n            handleGlobalContextmenuEvent(evnt) {\n                const { mouseConfig, menuConfig } = props;\n                const { editStore, ctxMenuStore } = reactData;\n                const { visibleColumn } = internalData;\n                const tableFilter = refTableFilter.value;\n                const tableMenu = refTableMenu.value;\n                const mouseOpts = computeMouseOpts.value;\n                const menuOpts = computeMenuOpts.value;\n                const el = refElem.value;\n                const { selected } = editStore;\n                const layoutList = ['header', 'body', 'footer'];\n                if (isEnableConf(menuConfig)) {\n                    if (ctxMenuStore.visible && tableMenu && getEventTargetNode(evnt, tableMenu.getRefMaps().refElem.value).flag) {\n                        evnt.preventDefault();\n                        return;\n                    }\n                    if (internalData._keyCtx) {\n                        const type = 'body';\n                        const params = { type, $table: $xeTable, keyboard: true, columns: visibleColumn.slice(0), $event: evnt };\n                        // 如果开启单元格区域\n                        if (mouseConfig && mouseOpts.area) {\n                            const activeArea = $xeTable.getActiveCellArea();\n                            if (activeArea && activeArea.row && activeArea.column) {\n                                params.row = activeArea.row;\n                                params.column = activeArea.column;\n                                handleOpenMenuEvent(evnt, type, params);\n                                return;\n                            }\n                        }\n                        else if (mouseConfig && mouseOpts.selected) {\n                            // 如果启用键盘导航且已选中单元格\n                            if (selected.row && selected.column) {\n                                params.row = selected.row;\n                                params.column = selected.column;\n                                handleOpenMenuEvent(evnt, type, params);\n                                return;\n                            }\n                        }\n                    }\n                    // 分别匹配表尾、内容、表尾的快捷菜单\n                    for (let index = 0; index < layoutList.length; index++) {\n                        const layout = layoutList[index];\n                        const columnTargetNode = getEventTargetNode(evnt, el, `vxe-${layout}--column`, (target) => {\n                            // target=td|th，直接向上找 table 去匹配即可\n                            return target.parentNode.parentNode.parentNode.getAttribute('xid') === xID;\n                        });\n                        const params = { type: layout, $table: $xeTable, columns: visibleColumn.slice(0), $event: evnt };\n                        if (columnTargetNode.flag) {\n                            const cell = columnTargetNode.targetElem;\n                            const columnNodeRest = $xeTable.getColumnNode(cell);\n                            const column = columnNodeRest ? columnNodeRest.item : null;\n                            let typePrefix = `${layout}-`;\n                            if (column) {\n                                Object.assign(params, { column, columnIndex: $xeTable.getColumnIndex(column), cell });\n                            }\n                            if (layout === 'body') {\n                                const rowNodeRest = $xeTable.getRowNode(cell.parentNode);\n                                const row = rowNodeRest ? rowNodeRest.item : null;\n                                typePrefix = '';\n                                if (row) {\n                                    params.row = row;\n                                    params.rowIndex = $xeTable.getRowIndex(row);\n                                }\n                            }\n                            const eventType = `${typePrefix}cell-menu`;\n                            handleOpenMenuEvent(evnt, layout, params);\n                            $xeTable.dispatchEvent(eventType, params, evnt);\n                            return;\n                        }\n                        else if (getEventTargetNode(evnt, el, `vxe-table--${layout}-wrapper`, target => target.getAttribute('xid') === xID).flag) {\n                            if (menuOpts.trigger === 'cell') {\n                                evnt.preventDefault();\n                            }\n                            else {\n                                handleOpenMenuEvent(evnt, layout, params);\n                            }\n                            return;\n                        }\n                    }\n                }\n                if (tableFilter && !getEventTargetNode(evnt, tableFilter.$el).flag) {\n                    $xeTable.closeFilter();\n                }\n                menuMethods.closeMenu();\n            },\n            ctxMenuMouseoverEvent(evnt, item, child) {\n                const menuElem = evnt.currentTarget;\n                const { ctxMenuStore } = reactData;\n                evnt.preventDefault();\n                evnt.stopPropagation();\n                ctxMenuStore.selected = item;\n                ctxMenuStore.selectChild = child;\n                if (!child) {\n                    ctxMenuStore.showChild = hasChildrenList(item);\n                    if (ctxMenuStore.showChild) {\n                        nextTick(() => {\n                            const childWrapperElem = menuElem.nextElementSibling;\n                            if (childWrapperElem) {\n                                const { boundingTop, boundingLeft, visibleHeight, visibleWidth } = getAbsolutePos(menuElem);\n                                const posTop = boundingTop + menuElem.offsetHeight;\n                                const posLeft = boundingLeft + menuElem.offsetWidth;\n                                let left = '';\n                                let right = '';\n                                // 是否超出右侧\n                                if (posLeft + childWrapperElem.offsetWidth > visibleWidth - 10) {\n                                    left = 'auto';\n                                    right = `${menuElem.offsetWidth}px`;\n                                }\n                                // 是否超出底部\n                                let top = '';\n                                let bottom = '';\n                                if (posTop + childWrapperElem.offsetHeight > visibleHeight - 10) {\n                                    top = 'auto';\n                                    bottom = '0';\n                                }\n                                childWrapperElem.style.left = left;\n                                childWrapperElem.style.right = right;\n                                childWrapperElem.style.top = top;\n                                childWrapperElem.style.bottom = bottom;\n                            }\n                        });\n                    }\n                }\n            },\n            ctxMenuMouseoutEvent(evnt, item) {\n                const { ctxMenuStore } = reactData;\n                if (!item.children) {\n                    ctxMenuStore.selected = null;\n                }\n                ctxMenuStore.selectChild = null;\n            },\n            /**\n             * 快捷菜单点击事件\n             */\n            ctxMenuLinkEvent(evnt, menu) {\n                const $xeGrid = $xeTable.xeGrid;\n                // 如果一级菜单有配置 code 则允许点击，否则不能点击\n                if (!menu.disabled && (menu.code || !menu.children || !menu.children.length)) {\n                    const gMenuOpts = menus.get(menu.code);\n                    const params = Object.assign({}, internalData._currMenuParams, { menu, $table: $xeTable, $grid: $xeGrid, $event: evnt });\n                    const tmMethod = gMenuOpts ? (gMenuOpts.tableMenuMethod || gMenuOpts.menuMethod) : null;\n                    if (tmMethod) {\n                        tmMethod(params, evnt);\n                    }\n                    $xeTable.dispatchEvent('menu-click', params, evnt);\n                    menuMethods.closeMenu();\n                }\n            }\n        };\n        return Object.assign(Object.assign({}, menuMethods), menuPrivateMethods);\n    },\n    setupGrid($xeGrid) {\n        return $xeGrid.extendTableMethods(tableMenuMethodKeys);\n    }\n});\n", "import { reactive, nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../../ui';\nimport { isEnableConf } from '../../../ui/src/utils';\nimport { getCellValue, setCellValue, getRowid } from '../../src/util';\nimport { removeClass, addClass } from '../../../ui/src/dom';\nimport { warnLog, errLog } from '../../../ui/src/log';\nconst { getConfig, renderer, hooks, getI18n } = VxeUI;\nconst tableEditMethodKeys = ['insert', 'insertAt', 'insertNextAt', 'insertChild', 'insertChildAt', 'insertChildNextAt', 'remove', 'removeCheckboxRow', 'removeRadioRow', 'removeCurrentRow', 'getRecordset', 'getInsertRecords', 'getRemoveRecords', 'getUpdateRecords', 'getEditRecord', 'getActiveRecord', 'getSelectedCell', 'clearEdit', 'clearActived', 'clearSelected', 'isEditByRow', 'isActiveByRow', 'setEditRow', 'setActiveRow', 'setEditCell', 'setActiveCell', 'setSelectCell'];\nhooks.add('tableEditModule', {\n    setupTable($xeTable) {\n        const { props, reactData, internalData } = $xeTable;\n        const { refElem } = $xeTable.getRefMaps();\n        const { computeMouseOpts, computeEditOpts, computeCheckboxOpts, computeTreeOpts, computeValidOpts } = $xeTable.getComputeMaps();\n        const browseObj = XEUtils.browse();\n        let editMethods = {};\n        let editPrivateMethods = {};\n        const getEditColumnModel = (row, column) => {\n            const { model, editRender } = column;\n            if (editRender) {\n                model.value = getCellValue(row, column);\n                model.update = false;\n            }\n        };\n        const setEditColumnModel = (row, column) => {\n            const { model, editRender } = column;\n            if (editRender && model.update) {\n                setCellValue(row, column, model.value);\n                model.update = false;\n                model.value = null;\n            }\n        };\n        const removeCellSelectedClass = () => {\n            const el = refElem.value;\n            if (el) {\n                const cell = el.querySelector('.col--selected');\n                if (cell) {\n                    removeClass(cell, 'col--selected');\n                }\n            }\n        };\n        const syncActivedCell = () => {\n            const { editStore, tableColumn } = reactData;\n            const editOpts = computeEditOpts.value;\n            const { actived } = editStore;\n            const { row, column } = actived;\n            if (row || column) {\n                if (editOpts.mode === 'row') {\n                    tableColumn.forEach((column) => setEditColumnModel(row, column));\n                }\n                else {\n                    setEditColumnModel(row, column);\n                }\n            }\n        };\n        const insertTreeRow = (newRecords, isAppend) => {\n            const { tableFullTreeData, afterFullData, fullDataRowIdData, fullAllDataRowIdData } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const { rowField, parentField, mapChildrenField } = treeOpts;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const funcName = isAppend ? 'push' : 'unshift';\n            newRecords.forEach(item => {\n                const parentRowId = item[parentField];\n                const rowid = getRowid($xeTable, item);\n                const matchObj = parentRowId ? XEUtils.findTree(tableFullTreeData, item => parentRowId === item[rowField], { children: mapChildrenField }) : null;\n                if (matchObj) {\n                    const { item: parentRow } = matchObj;\n                    const parentRest = fullAllDataRowIdData[getRowid($xeTable, parentRow)];\n                    const parentLevel = parentRest ? parentRest.level : 0;\n                    let parentChilds = parentRow[childrenField];\n                    let mapChilds = parentRow[mapChildrenField];\n                    if (!XEUtils.isArray(parentChilds)) {\n                        parentChilds = parentRow[childrenField] = [];\n                    }\n                    if (!XEUtils.isArray(mapChilds)) {\n                        mapChilds = parentRow[childrenField] = [];\n                    }\n                    parentChilds[funcName](item);\n                    mapChilds[funcName](item);\n                    const rest = { row: item, rowid, seq: -1, index: -1, _index: -1, $index: -1, treeIndex: -1, items: parentChilds, parent: parentRow, level: parentLevel + 1, height: 0, resizeHeight: 0, oTop: 0, expandHeight: 0 };\n                    fullDataRowIdData[rowid] = rest;\n                    fullAllDataRowIdData[rowid] = rest;\n                }\n                else {\n                    if (process.env.NODE_ENV === 'development') {\n                        if (parentRowId) {\n                            warnLog('vxe.error.unableInsert');\n                        }\n                    }\n                    afterFullData[funcName](item);\n                    tableFullTreeData[funcName](item);\n                    const rest = { row: item, rowid, seq: -1, index: -1, _index: -1, $index: -1, treeIndex: -1, items: tableFullTreeData, parent: null, level: 0, height: 0, resizeHeight: 0, oTop: 0, expandHeight: 0 };\n                    fullDataRowIdData[rowid] = rest;\n                    fullAllDataRowIdData[rowid] = rest;\n                }\n            });\n        };\n        const handleInsertRowAt = (records, targetRow, isInsertNextRow) => {\n            const { treeConfig } = props;\n            const { mergeList } = reactData;\n            const { tableFullTreeData, afterFullData, tableFullData, fullDataRowIdData, fullAllDataRowIdData, insertRowMaps } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const { transform, rowField, mapChildrenField } = treeOpts;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            if (!XEUtils.isArray(records)) {\n                records = [records];\n            }\n            const newRecords = reactive($xeTable.defineField(records.map((record) => Object.assign(treeConfig && transform ? { [mapChildrenField]: [], [childrenField]: [] } : {}, record))));\n            if (XEUtils.eqNull(targetRow)) {\n                // 如果为虚拟树\n                if (treeConfig && transform) {\n                    insertTreeRow(newRecords, false);\n                }\n                else {\n                    newRecords.forEach(item => {\n                        const rowid = getRowid($xeTable, item);\n                        const rest = { row: item, rowid, seq: -1, index: -1, _index: -1, $index: -1, treeIndex: -1, items: afterFullData, parent: null, level: 0, height: 0, resizeHeight: 0, oTop: 0, expandHeight: 0 };\n                        fullDataRowIdData[rowid] = rest;\n                        fullAllDataRowIdData[rowid] = rest;\n                        afterFullData.unshift(item);\n                        tableFullData.unshift(item);\n                    });\n                    // 刷新单元格合并\n                    mergeList.forEach((mergeItem) => {\n                        const { row: mergeRowIndex } = mergeItem;\n                        if (mergeRowIndex > 0) {\n                            mergeItem.row = mergeRowIndex + newRecords.length;\n                        }\n                    });\n                }\n            }\n            else {\n                if (targetRow === -1) {\n                    // 如果为虚拟树\n                    if (treeConfig && transform) {\n                        insertTreeRow(newRecords, true);\n                    }\n                    else {\n                        newRecords.forEach(item => {\n                            const rowid = getRowid($xeTable, item);\n                            const rest = { row: item, rowid, seq: -1, index: -1, _index: -1, treeIndex: -1, $index: -1, items: afterFullData, parent: null, level: 0, height: 0, resizeHeight: 0, oTop: 0, expandHeight: 0 };\n                            fullDataRowIdData[rowid] = rest;\n                            fullAllDataRowIdData[rowid] = rest;\n                            afterFullData.push(item);\n                            tableFullData.push(item);\n                        });\n                        // 刷新单元格合并\n                        mergeList.forEach((mergeItem) => {\n                            const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem;\n                            if (mergeRowIndex + mergeRowspan > afterFullData.length) {\n                                mergeItem.rowspan = mergeRowspan + newRecords.length;\n                            }\n                        });\n                    }\n                }\n                else {\n                    // 如果为虚拟树\n                    if (treeConfig && transform) {\n                        const matchMapObj = XEUtils.findTree(tableFullTreeData, item => targetRow[rowField] === item[rowField], { children: mapChildrenField });\n                        if (matchMapObj) {\n                            const { parent: parentRow } = matchMapObj;\n                            const parentMapChilds = parentRow ? parentRow[mapChildrenField] : tableFullTreeData;\n                            const parentRest = fullAllDataRowIdData[getRowid($xeTable, parentRow)];\n                            const parentLevel = parentRest ? parentRest.level : 0;\n                            newRecords.forEach((item, i) => {\n                                const rowid = getRowid($xeTable, item);\n                                if (process.env.NODE_ENV === 'development') {\n                                    if (item[treeOpts.parentField]) {\n                                        if (parentRow && item[treeOpts.parentField] !== parentRow[rowField]) {\n                                            errLog('vxe.error.errProp', [`${treeOpts.parentField}=${item[treeOpts.parentField]}`, `${treeOpts.parentField}=${parentRow[rowField]}`]);\n                                        }\n                                    }\n                                }\n                                if (parentRow) {\n                                    item[treeOpts.parentField] = parentRow[rowField];\n                                }\n                                let targetIndex = matchMapObj.index + i;\n                                if (isInsertNextRow) {\n                                    targetIndex = targetIndex + 1;\n                                }\n                                parentMapChilds.splice(targetIndex, 0, item);\n                                const rest = { row: item, rowid, seq: -1, index: -1, _index: -1, $index: -1, treeIndex: -1, items: parentMapChilds, parent: parentRow, level: parentLevel + 1, height: 0, resizeHeight: 0, oTop: 0, expandHeight: 0 };\n                                fullDataRowIdData[rowid] = rest;\n                                fullAllDataRowIdData[rowid] = rest;\n                            });\n                            // 源\n                            if (parentRow) {\n                                const matchObj = XEUtils.findTree(tableFullTreeData, item => targetRow[rowField] === item[rowField], { children: childrenField });\n                                if (matchObj) {\n                                    const parentChilds = matchObj.items;\n                                    let targetIndex = matchObj.index;\n                                    if (isInsertNextRow) {\n                                        targetIndex = targetIndex + 1;\n                                    }\n                                    parentChilds.splice(targetIndex, 0, ...newRecords);\n                                }\n                            }\n                        }\n                        else {\n                            if (process.env.NODE_ENV === 'development') {\n                                warnLog('vxe.error.unableInsert');\n                            }\n                            insertTreeRow(newRecords, true);\n                        }\n                    }\n                    else {\n                        if (treeConfig) {\n                            throw new Error(getI18n('vxe.error.noTree', ['insert']));\n                        }\n                        let afIndex = -1;\n                        // 如果是可视索引\n                        if (XEUtils.isNumber(targetRow)) {\n                            if (targetRow < afterFullData.length) {\n                                afIndex = targetRow;\n                            }\n                        }\n                        else {\n                            afIndex = $xeTable.findRowIndexOf(afterFullData, targetRow);\n                        }\n                        // 如果是插入指定行的下一行\n                        if (isInsertNextRow) {\n                            afIndex = Math.min(afterFullData.length, afIndex + 1);\n                        }\n                        if (afIndex === -1) {\n                            throw new Error(getI18n('vxe.error.unableInsert'));\n                        }\n                        afterFullData.splice(afIndex, 0, ...newRecords);\n                        const tfIndex = $xeTable.findRowIndexOf(tableFullData, targetRow);\n                        if (tfIndex > -1) {\n                            tableFullData.splice(tfIndex + (isInsertNextRow ? 1 : 0), 0, ...newRecords);\n                        }\n                        else {\n                            tableFullData.push(...newRecords);\n                        }\n                        // 刷新单元格合并\n                        mergeList.forEach((mergeItem) => {\n                            const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem;\n                            if (mergeRowIndex > afIndex) {\n                                mergeItem.row = mergeRowIndex + newRecords.length;\n                            }\n                            else if (mergeRowIndex + mergeRowspan > afIndex) {\n                                mergeItem.rowspan = mergeRowspan + newRecords.length;\n                            }\n                        });\n                    }\n                }\n            }\n            newRecords.forEach(newRow => {\n                const rowid = getRowid($xeTable, newRow);\n                insertRowMaps[rowid] = newRow;\n            });\n            reactData.insertRowFlag++;\n            $xeTable.cacheRowMap(false);\n            $xeTable.updateScrollYStatus();\n            $xeTable.handleTableData(treeConfig && transform);\n            if (!(treeConfig && transform)) {\n                $xeTable.updateAfterDataIndex();\n            }\n            $xeTable.updateFooter();\n            $xeTable.checkSelectionStatus();\n            if (reactData.scrollYLoad) {\n                $xeTable.updateScrollYSpace();\n            }\n            return nextTick().then(() => {\n                $xeTable.updateCellAreas();\n                return $xeTable.recalculate();\n            }).then(() => {\n                return {\n                    row: newRecords.length ? newRecords[newRecords.length - 1] : null,\n                    rows: newRecords\n                };\n            });\n        };\n        const handleInsertChildRowAt = (records, parentRow, targetRow, isInsertNextRow) => {\n            const { treeConfig } = props;\n            const treeOpts = computeTreeOpts.value;\n            const { transform, rowField, parentField } = treeOpts;\n            if (treeConfig && transform) {\n                if (!XEUtils.isArray(records)) {\n                    records = [records];\n                }\n                return handleInsertRowAt(records.map((item) => Object.assign({}, item, { [parentField]: parentRow[rowField] })), targetRow, isInsertNextRow);\n            }\n            else {\n                errLog('vxe.error.errProp', ['tree-config.transform=false', 'tree-config.transform=true']);\n            }\n            return Promise.resolve({ row: null, rows: [] });\n        };\n        const handleClearEdit = (evnt, targetRow) => {\n            const { editStore } = reactData;\n            const { actived, focused } = editStore;\n            const { row, column } = actived;\n            const validOpts = computeValidOpts.value;\n            if (row || column) {\n                if (targetRow && getRowid($xeTable, targetRow) !== getRowid($xeTable, row)) {\n                    return nextTick();\n                }\n                syncActivedCell();\n                actived.args = null;\n                actived.row = null;\n                actived.column = null;\n                $xeTable.updateFooter();\n                $xeTable.dispatchEvent('edit-closed', {\n                    row,\n                    rowIndex: $xeTable.getRowIndex(row),\n                    $rowIndex: $xeTable.getVMRowIndex(row),\n                    column,\n                    columnIndex: $xeTable.getColumnIndex(column),\n                    $columnIndex: $xeTable.getVMColumnIndex(column)\n                }, evnt || null);\n            }\n            focused.row = null;\n            focused.column = null;\n            if (validOpts.autoClear) {\n                if (validOpts.msgMode !== 'full' || getConfig().cellVaildMode === 'obsolete') {\n                    if ($xeTable.clearValidate) {\n                        return $xeTable.clearValidate();\n                    }\n                }\n            }\n            return nextTick().then(() => $xeTable.updateCellAreas());\n        };\n        const handleEditActive = (params, evnt, isFocus, isPos) => {\n            const $xeGrid = $xeTable.xeGrid;\n            const { editConfig, mouseConfig } = props;\n            const { editStore, tableColumn } = reactData;\n            const editOpts = computeEditOpts.value;\n            const { mode } = editOpts;\n            const { actived, focused } = editStore;\n            const { row, column } = params;\n            const { editRender } = column;\n            const cell = (params.cell || $xeTable.getCellElement(row, column));\n            const beforeEditMethod = editOpts.beforeEditMethod || editOpts.activeMethod;\n            params.cell = cell;\n            if (cell && isEnableConf(editConfig) && isEnableConf(editRender)) {\n                // 激活编辑\n                if (!$xeTable.isPendingByRow(row)) {\n                    if (actived.row !== row || (mode === 'cell' ? actived.column !== column : false)) {\n                        // 判断是否禁用编辑\n                        let type = 'edit-disabled';\n                        if (!beforeEditMethod || beforeEditMethod(Object.assign(Object.assign({}, params), { $table: $xeTable, $grid: $xeGrid }))) {\n                            if (mouseConfig) {\n                                $xeTable.clearSelected();\n                                if ($xeTable.clearCellAreas) {\n                                    $xeTable.clearCellAreas();\n                                    $xeTable.clearCopyCellArea();\n                                }\n                            }\n                            $xeTable.closeTooltip();\n                            if (actived.column) {\n                                handleClearEdit(evnt);\n                            }\n                            type = 'edit-activated';\n                            column.renderHeight = cell.offsetHeight;\n                            actived.args = params;\n                            actived.row = row;\n                            actived.column = column;\n                            if (mode === 'row') {\n                                tableColumn.forEach((column) => getEditColumnModel(row, column));\n                            }\n                            else {\n                                getEditColumnModel(row, column);\n                            }\n                            const afterEditMethod = editOpts.afterEditMethod;\n                            nextTick(() => {\n                                if (isFocus) {\n                                    $xeTable.handleFocus(params, evnt);\n                                }\n                                if (afterEditMethod) {\n                                    afterEditMethod(Object.assign(Object.assign({}, params), { $table: $xeTable, $grid: $xeGrid }));\n                                }\n                            });\n                        }\n                        $xeTable.dispatchEvent(type, {\n                            row,\n                            rowIndex: $xeTable.getRowIndex(row),\n                            $rowIndex: $xeTable.getVMRowIndex(row),\n                            column,\n                            columnIndex: $xeTable.getColumnIndex(column),\n                            $columnIndex: $xeTable.getVMColumnIndex(column)\n                        }, evnt);\n                        // v4已废弃\n                        if (type === 'edit-activated') {\n                            $xeTable.dispatchEvent('edit-actived', {\n                                row,\n                                rowIndex: $xeTable.getRowIndex(row),\n                                $rowIndex: $xeTable.getVMRowIndex(row),\n                                column,\n                                columnIndex: $xeTable.getColumnIndex(column),\n                                $columnIndex: $xeTable.getVMColumnIndex(column)\n                            }, evnt);\n                        }\n                    }\n                    else {\n                        const { column: oldColumn } = actived;\n                        if (mouseConfig) {\n                            $xeTable.clearSelected();\n                            if ($xeTable.clearCellAreas) {\n                                $xeTable.clearCellAreas();\n                                $xeTable.clearCopyCellArea();\n                            }\n                        }\n                        if (oldColumn !== column) {\n                            const { model: oldModel } = oldColumn;\n                            if (oldModel.update) {\n                                setCellValue(row, oldColumn, oldModel.value);\n                            }\n                            if ($xeTable.clearValidate) {\n                                $xeTable.clearValidate(row, column);\n                            }\n                        }\n                        column.renderHeight = cell.offsetHeight;\n                        actived.args = params;\n                        actived.column = column;\n                        if (isPos) {\n                            setTimeout(() => {\n                                $xeTable.handleFocus(params, evnt);\n                            });\n                        }\n                    }\n                    focused.column = null;\n                    focused.row = null;\n                    $xeTable.focus();\n                }\n            }\n            return nextTick();\n        };\n        const handleEditCell = (row, fieldOrColumn, isPos) => {\n            const { editConfig } = props;\n            const column = XEUtils.isString(fieldOrColumn) ? $xeTable.getColumnByField(fieldOrColumn) : fieldOrColumn;\n            if (row && column && isEnableConf(editConfig) && isEnableConf(column.editRender)) {\n                return Promise.resolve(isPos ? $xeTable.scrollToRow(row, column) : null).then(() => {\n                    const cell = $xeTable.getCellElement(row, column);\n                    if (cell) {\n                        handleEditActive({\n                            row,\n                            rowIndex: $xeTable.getRowIndex(row),\n                            column,\n                            columnIndex: $xeTable.getColumnIndex(column),\n                            cell,\n                            $table: $xeTable\n                        }, null, isPos, isPos);\n                        internalData._lastCallTime = Date.now();\n                    }\n                    return nextTick();\n                });\n            }\n            return nextTick();\n        };\n        editMethods = {\n            /**\n             * 往表格中插入临时数据\n             *\n             * @param {*} records\n             */\n            insert(records) {\n                return handleInsertRowAt(records, null);\n            },\n            /**\n             * 往表格指定行中插入临时数据\n             * 如果 row 为空则从插入到顶部，如果为树结构，则插入到目标节点顶部\n             * 如果 row 为 -1 则从插入到底部，如果为树结构，则插入到目标节点底部\n             * 如果 row 为有效行则插入到该行的位置，如果为树结构，则有插入到效的目标节点该行的位置\n             * @param {Object/Array} records 新的数据\n             * @param {Row} targetRow 指定行\n             */\n            insertAt(records, targetRow) {\n                return handleInsertRowAt(records, targetRow);\n            },\n            insertNextAt(records, targetRow) {\n                return handleInsertRowAt(records, targetRow, true);\n            },\n            insertChild(records, parentRow) {\n                return handleInsertChildRowAt(records, parentRow, null);\n            },\n            insertChildAt(records, parentRow, targetRow) {\n                return handleInsertChildRowAt(records, parentRow, targetRow);\n            },\n            insertChildNextAt(records, parentRow, targetRow) {\n                return handleInsertChildRowAt(records, parentRow, targetRow, true);\n            },\n            /**\n             * 删除指定行数据\n             * 如果传 row 则删除一行\n             * 如果传 rows 则删除多行\n             * 如果为空则删除所有\n             */\n            remove(rows) {\n                const { treeConfig } = props;\n                const { mergeList, editStore } = reactData;\n                const { tableFullTreeData, selectCheckboxMaps, afterFullData, tableFullData, pendingRowMaps, insertRowMaps, removeRowMaps } = internalData;\n                const checkboxOpts = computeCheckboxOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const { transform, mapChildrenField } = treeOpts;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                const { actived } = editStore;\n                const { checkField } = checkboxOpts;\n                let delList = [];\n                if (!rows) {\n                    rows = tableFullData;\n                }\n                else if (!XEUtils.isArray(rows)) {\n                    rows = [rows];\n                }\n                // 如果是新增，则保存记录\n                rows.forEach((row) => {\n                    if (!$xeTable.isInsertByRow(row)) {\n                        const rowid = getRowid($xeTable, row);\n                        removeRowMaps[rowid] = row;\n                    }\n                });\n                // 如果绑定了多选属性，则更新状态\n                if (!checkField) {\n                    rows.forEach((row) => {\n                        const rowid = getRowid($xeTable, row);\n                        if (selectCheckboxMaps[rowid]) {\n                            delete selectCheckboxMaps[rowid];\n                        }\n                    });\n                    reactData.updateCheckboxFlag++;\n                }\n                // 从数据源中移除\n                if (tableFullData === rows) {\n                    rows = delList = tableFullData.slice(0);\n                    internalData.tableFullData = [];\n                    internalData.afterFullData = [];\n                    $xeTable.clearMergeCells();\n                }\n                else {\n                    // 如果为虚拟树\n                    if (treeConfig && transform) {\n                        rows.forEach((row) => {\n                            const rowid = getRowid($xeTable, row);\n                            const matchMapObj = XEUtils.findTree(tableFullTreeData, item => rowid === getRowid($xeTable, item), { children: mapChildrenField });\n                            if (matchMapObj) {\n                                const rItems = matchMapObj.items.splice(matchMapObj.index, 1);\n                                delList.push(rItems[0]);\n                            }\n                            const matchObj = XEUtils.findTree(tableFullTreeData, item => rowid === getRowid($xeTable, item), { children: childrenField });\n                            if (matchObj) {\n                                matchObj.items.splice(matchObj.index, 1);\n                            }\n                            const afIndex = $xeTable.findRowIndexOf(afterFullData, row);\n                            if (afIndex > -1) {\n                                afterFullData.splice(afIndex, 1);\n                            }\n                        });\n                    }\n                    else {\n                        rows.forEach((row) => {\n                            const tfIndex = $xeTable.findRowIndexOf(tableFullData, row);\n                            if (tfIndex > -1) {\n                                const rItems = tableFullData.splice(tfIndex, 1);\n                                delList.push(rItems[0]);\n                            }\n                            const afIndex = $xeTable.findRowIndexOf(afterFullData, row);\n                            if (afIndex > -1) {\n                                // 刷新单元格合并\n                                mergeList.forEach((mergeItem) => {\n                                    const { row: mergeRowIndex, rowspan: mergeRowspan } = mergeItem;\n                                    if (mergeRowIndex > afIndex) {\n                                        mergeItem.row = mergeRowIndex - 1;\n                                    }\n                                    else if (mergeRowIndex + mergeRowspan > afIndex) {\n                                        mergeItem.rowspan = mergeRowspan - 1;\n                                    }\n                                });\n                                afterFullData.splice(afIndex, 1);\n                            }\n                        });\n                    }\n                }\n                // 如果当前行被激活编辑，则清除激活状态\n                if (actived.row && $xeTable.findRowIndexOf(rows, actived.row) > -1) {\n                    editMethods.clearEdit();\n                }\n                // 从新增中移除已删除的数据\n                rows.forEach((row) => {\n                    const rowid = getRowid($xeTable, row);\n                    if (insertRowMaps[rowid]) {\n                        delete insertRowMaps[rowid];\n                    }\n                    if (pendingRowMaps[rowid]) {\n                        delete pendingRowMaps[rowid];\n                    }\n                });\n                reactData.removeRowFlag++;\n                reactData.insertRowFlag++;\n                reactData.pendingRowFlag++;\n                $xeTable.updateFooter();\n                $xeTable.cacheRowMap(false);\n                $xeTable.handleTableData(treeConfig && transform);\n                if (!(treeConfig && transform)) {\n                    $xeTable.updateAfterDataIndex();\n                }\n                $xeTable.checkSelectionStatus();\n                if (reactData.scrollYLoad) {\n                    $xeTable.updateScrollYSpace();\n                }\n                return nextTick().then(() => {\n                    $xeTable.updateCellAreas();\n                    return $xeTable.recalculate();\n                }).then(() => {\n                    return { row: delList.length ? delList[delList.length - 1] : null, rows: delList };\n                });\n            },\n            /**\n             * 删除复选框选中的数据\n             */\n            removeCheckboxRow() {\n                return editMethods.remove($xeTable.getCheckboxRecords()).then((params) => {\n                    $xeTable.clearCheckboxRow();\n                    return params;\n                });\n            },\n            /**\n             * 删除单选框选中的数据\n             */\n            removeRadioRow() {\n                const radioRecord = $xeTable.getRadioRecord();\n                return editMethods.remove(radioRecord || []).then((params) => {\n                    $xeTable.clearRadioRow();\n                    return params;\n                });\n            },\n            /**\n             * 删除当前行选中的数据\n             */\n            removeCurrentRow() {\n                const currentRecord = $xeTable.getCurrentRecord();\n                return editMethods.remove(currentRecord || []).then((params) => {\n                    $xeTable.clearCurrentRow();\n                    return params;\n                });\n            },\n            /**\n             * 获取表格数据集，包含新增、删除、修改、标记\n             */\n            getRecordset() {\n                const removeRecords = editMethods.getRemoveRecords();\n                const pendingRecords = $xeTable.getPendingRecords();\n                const delRecords = removeRecords.concat(pendingRecords);\n                // 如果已经被删除，则无需放到更新数组\n                const updateRecords = editMethods.getUpdateRecords().filter(row => {\n                    return !delRecords.some(item => $xeTable.eqRow(item, row));\n                });\n                return {\n                    insertRecords: editMethods.getInsertRecords(),\n                    removeRecords,\n                    updateRecords,\n                    pendingRecords\n                };\n            },\n            /**\n             * 获取新增的临时数据\n             */\n            getInsertRecords() {\n                const { fullAllDataRowIdData, insertRowMaps } = internalData;\n                const insertRecords = [];\n                XEUtils.each(insertRowMaps, (row, rowid) => {\n                    if (fullAllDataRowIdData[rowid]) {\n                        insertRecords.push(row);\n                    }\n                });\n                return insertRecords;\n            },\n            /**\n             * 获取已删除的数据\n             */\n            getRemoveRecords() {\n                const { removeRowMaps } = internalData;\n                const removeRecords = [];\n                XEUtils.each(removeRowMaps, (row) => {\n                    removeRecords.push(row);\n                });\n                return removeRecords;\n            },\n            /**\n             * 获取更新数据\n             * 只精准匹配 row 的更改\n             * 如果是树表格，子节点更改状态不会影响父节点的更新状态\n             */\n            getUpdateRecords() {\n                const { keepSource, treeConfig } = props;\n                const { tableFullData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                if (keepSource) {\n                    syncActivedCell();\n                    if (treeConfig) {\n                        return XEUtils.filterTree(tableFullData, row => $xeTable.isUpdateByRow(row), treeOpts);\n                    }\n                    return tableFullData.filter((row) => $xeTable.isUpdateByRow(row));\n                }\n                return [];\n            },\n            getActiveRecord() {\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['getActiveRecord', 'getEditRecord']);\n                }\n                return $xeTable.getEditRecord();\n            },\n            getEditRecord() {\n                const { editStore } = reactData;\n                const { afterFullData } = internalData;\n                const el = refElem.value;\n                const { args, row } = editStore.actived;\n                if (args && $xeTable.findRowIndexOf(afterFullData, row) > -1 && el.querySelectorAll('.vxe-body--column.col--active').length) {\n                    return Object.assign({}, args);\n                }\n                return null;\n            },\n            /**\n             * 获取选中的单元格\n             */\n            getSelectedCell() {\n                const { editStore } = reactData;\n                const { args, column } = editStore.selected;\n                if (args && column) {\n                    return Object.assign({}, args);\n                }\n                return null;\n            },\n            clearActived(row) {\n                // 即将废弃\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['clearActived', 'clearEdit']);\n                }\n                return $xeTable.clearEdit(row);\n            },\n            /**\n             * 清除激活的编辑\n             */\n            clearEdit(row) {\n                return handleClearEdit(null, row);\n            },\n            /**\n             * 清除所选中源状态\n             */\n            clearSelected() {\n                const { editStore } = reactData;\n                const { selected } = editStore;\n                selected.row = null;\n                selected.column = null;\n                removeCellSelectedClass();\n                return nextTick();\n            },\n            isActiveByRow(row) {\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['isActiveByRow', 'isEditByRow']);\n                }\n                // 即将废弃\n                return $xeTable.isEditByRow(row);\n            },\n            /**\n             * 判断行是否为激活编辑状态\n             * @param {Row} row 行对象\n             */\n            isEditByRow(row) {\n                const { editStore } = reactData;\n                return editStore.actived.row === row;\n            },\n            setActiveRow(row) {\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['setActiveRow', 'setEditRow']);\n                }\n                // 即将废弃\n                return editMethods.setEditRow(row);\n            },\n            /**\n             * 激活行编辑\n             */\n            setEditRow(row, fieldOrColumn) {\n                const { visibleColumn } = internalData;\n                let column = XEUtils.find(visibleColumn, column => isEnableConf(column.editRender));\n                let isPos = false;\n                if (fieldOrColumn) {\n                    isPos = true;\n                    if (fieldOrColumn !== true) {\n                        column = XEUtils.isString(fieldOrColumn) ? $xeTable.getColumnByField(fieldOrColumn) : fieldOrColumn;\n                    }\n                }\n                return handleEditCell(row, column, isPos);\n            },\n            setActiveCell(row, fieldOrColumn) {\n                if (process.env.NODE_ENV === 'development') {\n                    warnLog('vxe.error.delFunc', ['setActiveCell', 'setEditCell']);\n                }\n                // 即将废弃\n                return editMethods.setEditCell(row, fieldOrColumn);\n            },\n            /**\n             * 激活单元格编辑\n             */\n            setEditCell(row, fieldOrColumn) {\n                return handleEditCell(row, fieldOrColumn, true);\n            },\n            /**\n             * 只对 trigger=dblclick 有效，选中单元格\n             */\n            setSelectCell(row, fieldOrColumn) {\n                const { tableData } = reactData;\n                const editOpts = computeEditOpts.value;\n                const column = XEUtils.isString(fieldOrColumn) ? $xeTable.getColumnByField(fieldOrColumn) : fieldOrColumn;\n                if (row && column && editOpts.trigger !== 'manual') {\n                    const rowIndex = $xeTable.findRowIndexOf(tableData, row);\n                    if (rowIndex > -1 && column) {\n                        const cell = $xeTable.getCellElement(row, column);\n                        const params = {\n                            row,\n                            rowIndex,\n                            column,\n                            columnIndex: $xeTable.getColumnIndex(column),\n                            cell\n                        };\n                        $xeTable.handleSelected(params, {});\n                    }\n                }\n                return nextTick();\n            }\n        };\n        editPrivateMethods = {\n            /**\n             * 处理激活编辑\n             */\n            handleEdit(params, evnt) {\n                return handleEditActive(params, evnt, true, true);\n            },\n            /**\n             * @deprecated\n             */\n            handleActived(params, evnt) {\n                return editPrivateMethods.handleEdit(params, evnt);\n            },\n            /**\n             * 处理取消编辑\n             * @param evnt\n             * @returns\n             */\n            handleClearEdit,\n            /**\n             * 处理聚焦\n             */\n            handleFocus(params) {\n                const { row, column, cell } = params;\n                const { editRender } = column;\n                const editOpts = computeEditOpts.value;\n                if (isEnableConf(editRender)) {\n                    const compRender = renderer.get(editRender.name);\n                    let autoFocus = editRender.autofocus || editRender.autoFocus;\n                    let autoSelect = editRender.autoSelect || editRender.autoselect;\n                    let inputElem;\n                    // 是否启用聚焦\n                    if (editOpts.autoFocus) {\n                        if (!autoFocus && compRender) {\n                            autoFocus = compRender.tableAutoFocus || compRender.tableAutofocus || compRender.autofocus;\n                        }\n                        if (!autoSelect && compRender) {\n                            autoSelect = compRender.tableAutoSelect || compRender.autoselect;\n                        }\n                        // 如果指定了聚焦 class\n                        if (XEUtils.isFunction(autoFocus)) {\n                            inputElem = autoFocus(params);\n                        }\n                        else if (autoFocus) {\n                            if (autoFocus === true) {\n                                // 自动匹配模式，会自动匹配第一个可输入元素\n                                inputElem = cell.querySelector('input,textarea');\n                            }\n                            else {\n                                inputElem = cell.querySelector(autoFocus);\n                            }\n                            if (inputElem) {\n                                inputElem.focus();\n                            }\n                        }\n                    }\n                    if (inputElem) {\n                        if (autoSelect) {\n                            inputElem.select();\n                        }\n                        else {\n                            // 保持一致行为，光标移到末端\n                            if (browseObj.msie) {\n                                const textRange = inputElem.createTextRange();\n                                textRange.collapse(false);\n                                textRange.select();\n                            }\n                        }\n                    }\n                    else {\n                        // 是否自动定位\n                        if (editOpts.autoPos) {\n                            if (!column.fixed) {\n                                // 显示到可视区中\n                                $xeTable.scrollToRow(row, column);\n                            }\n                        }\n                    }\n                }\n            },\n            /**\n             * 处理选中源\n             */\n            handleSelected(params, evnt) {\n                const { mouseConfig } = props;\n                const { editStore } = reactData;\n                const mouseOpts = computeMouseOpts.value;\n                const editOpts = computeEditOpts.value;\n                const { actived, selected } = editStore;\n                const { row, column } = params;\n                const isMouseSelected = mouseConfig && mouseOpts.selected;\n                const selectMethod = () => {\n                    if (isMouseSelected && (selected.row !== row || selected.column !== column)) {\n                        if (actived.row !== row || (editOpts.mode === 'cell' ? actived.column !== column : false)) {\n                            handleClearEdit(evnt);\n                            $xeTable.clearSelected();\n                            if ($xeTable.clearCellAreas) {\n                                $xeTable.clearCellAreas();\n                                $xeTable.clearCopyCellArea();\n                            }\n                            selected.args = params;\n                            selected.row = row;\n                            selected.column = column;\n                            if (isMouseSelected) {\n                                editPrivateMethods.addCellSelectedClass();\n                            }\n                            $xeTable.focus();\n                            if (evnt) {\n                                $xeTable.dispatchEvent('cell-selected', params, evnt);\n                            }\n                        }\n                    }\n                    return nextTick();\n                };\n                return selectMethod();\n            },\n            addCellSelectedClass() {\n                const { editStore } = reactData;\n                const { selected } = editStore;\n                const { row, column } = selected;\n                removeCellSelectedClass();\n                if (row && column) {\n                    const cell = $xeTable.getCellElement(row, column);\n                    if (cell) {\n                        addClass(cell, 'col--selected');\n                    }\n                }\n            }\n        };\n        return Object.assign(Object.assign({}, editMethods), editPrivateMethods);\n    },\n    setupGrid($xeGrid) {\n        return $xeGrid.extendTableMethods(tableEditMethodKeys);\n    }\n});\n", "import { inject, nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../../ui';\nimport { isColumnInfo, mergeBodyMethod, getCellValue } from '../../src/util';\nimport { parseFile, formatText, eqEmptyValue } from '../../../ui/src/utils';\nimport { hasClass } from '../../../ui/src/dom';\nimport { createHtmlPage, getExportBlobByContent } from './util';\nimport { warnLog, errLog } from '../../../ui/src/log';\nconst { getI18n, hooks, renderer } = VxeUI;\nlet htmlCellElem;\nconst csvBOM = '\\ufeff';\nconst enterSymbol = '\\r\\n';\nfunction defaultFilterExportColumn(column) {\n    return column.field || ['seq', 'checkbox', 'radio'].indexOf(column.type) > -1;\n}\nconst getConvertColumns = (columns) => {\n    const result = [];\n    columns.forEach((column) => {\n        if (column.childNodes && column.childNodes.length) {\n            result.push(column);\n            result.push(...getConvertColumns(column.childNodes));\n        }\n        else {\n            result.push(column);\n        }\n    });\n    return result;\n};\nconst convertToRows = (originColumns) => {\n    let maxLevel = 1;\n    const traverse = (column, parent) => {\n        if (parent) {\n            column._level = parent._level + 1;\n            if (maxLevel < column._level) {\n                maxLevel = column._level;\n            }\n        }\n        if (column.childNodes && column.childNodes.length) {\n            let colSpan = 0;\n            column.childNodes.forEach((subColumn) => {\n                traverse(subColumn, column);\n                colSpan += subColumn._colSpan;\n            });\n            column._colSpan = colSpan;\n        }\n        else {\n            column._colSpan = 1;\n        }\n    };\n    originColumns.forEach((column) => {\n        column._level = 1;\n        traverse(column);\n    });\n    const rows = [];\n    for (let i = 0; i < maxLevel; i++) {\n        rows.push([]);\n    }\n    const allColumns = getConvertColumns(originColumns);\n    allColumns.forEach((column) => {\n        if (column.childNodes && column.childNodes.length) {\n            column._rowSpan = 1;\n        }\n        else {\n            column._rowSpan = maxLevel - column._level + 1;\n        }\n        rows[column._level - 1].push(column);\n    });\n    return rows;\n};\nfunction toTableBorder(border) {\n    if (border === true) {\n        return 'full';\n    }\n    if (border) {\n        return border;\n    }\n    return 'default';\n}\nfunction getBooleanValue(cellValue) {\n    return cellValue === 'TRUE' || cellValue === 'true' || cellValue === true;\n}\nfunction getFooterData(opts, footerTableData) {\n    const { footerFilterMethod } = opts;\n    return footerFilterMethod ? footerTableData.filter((items, index) => footerFilterMethod({ items, $rowIndex: index })) : footerTableData;\n}\nfunction getCsvCellTypeLabel(column, cellValue) {\n    if (cellValue) {\n        if (column.type === 'seq') {\n            return `\\t${cellValue}`;\n        }\n        switch (column.cellType) {\n            case 'string':\n                if (!isNaN(cellValue)) {\n                    return `\\t${cellValue}`;\n                }\n                break;\n            case 'number':\n                break;\n            default:\n                if (cellValue.length >= 12 && !isNaN(cellValue)) {\n                    return `\\t${cellValue}`;\n                }\n                break;\n        }\n    }\n    return cellValue;\n}\nfunction toTxtCellLabel(val) {\n    if (/[\",\\s\\n]/.test(val)) {\n        return `\"${val.replace(/\"/g, '\"\"')}\"`;\n    }\n    return val;\n}\nfunction getElementsByTagName(elem, qualifiedName) {\n    return elem.getElementsByTagName(qualifiedName);\n}\nfunction getTxtCellKey(now) {\n    return `#${now}@${XEUtils.uniqueId()}`;\n}\nfunction replaceTxtCell(cell, vMaps) {\n    return cell.replace(/#\\d+@\\d+/g, (key) => XEUtils.hasOwnProp(vMaps, key) ? vMaps[key] : key);\n}\nfunction getTxtCellValue(val, vMaps) {\n    const rest = replaceTxtCell(val, vMaps);\n    return rest.replace(/^\"+$/g, (qVal) => '\"'.repeat(Math.ceil(qVal.length / 2)));\n}\nfunction toExportField(tableConf, field) {\n    const { fieldMaps, titleMaps } = tableConf;\n    // title 转 field\n    if (!fieldMaps[field]) {\n        const teCol = titleMaps[field];\n        if (teCol && teCol.field) {\n            field = teCol.field;\n        }\n    }\n    return field;\n}\nfunction parseCsvAndTxt(tableConf, content, cellSeparator) {\n    const list = content.split(enterSymbol);\n    const rows = [];\n    let fields = [];\n    if (list.length) {\n        const vMaps = {};\n        const now = Date.now();\n        list.forEach((rVal) => {\n            if (rVal) {\n                const item = {};\n                rVal = rVal.replace(/(\"\")|(\\n)/g, (text, dVal) => {\n                    const key = getTxtCellKey(now);\n                    vMaps[key] = dVal ? '\"' : '\\n';\n                    return key;\n                }).replace(/\"(.*?)\"/g, (text, cVal) => {\n                    const key = getTxtCellKey(now);\n                    vMaps[key] = replaceTxtCell(cVal, vMaps);\n                    return key;\n                });\n                const cells = rVal.split(cellSeparator);\n                if (!fields.length) {\n                    fields = cells.map((val) => toExportField(tableConf, getTxtCellValue(val.trim(), vMaps)));\n                }\n                else {\n                    cells.forEach((val, colIndex) => {\n                        if (colIndex < fields.length) {\n                            item[fields[colIndex]] = getTxtCellValue(val.trim(), vMaps);\n                        }\n                    });\n                    rows.push(item);\n                }\n            }\n        });\n    }\n    return { fields, rows };\n}\nfunction parseCsv(tableConf, content) {\n    return parseCsvAndTxt(tableConf, content, ',');\n}\nfunction parseTxt(tableConf, content) {\n    return parseCsvAndTxt(tableConf, content, '\\t');\n}\nfunction parseHTML(tableConf, content) {\n    const domParser = new DOMParser();\n    const xmlDoc = domParser.parseFromString(content, 'text/html');\n    const bodyNodes = getElementsByTagName(xmlDoc, 'body');\n    const rows = [];\n    const fields = [];\n    if (bodyNodes.length) {\n        const tableNodes = getElementsByTagName(bodyNodes[0], 'table');\n        if (tableNodes.length) {\n            const theadNodes = getElementsByTagName(tableNodes[0], 'thead');\n            if (theadNodes.length) {\n                XEUtils.arrayEach(getElementsByTagName(theadNodes[0], 'tr'), rowNode => {\n                    XEUtils.arrayEach(getElementsByTagName(rowNode, 'th'), cellNode => {\n                        fields.push(toExportField(tableConf, cellNode.textContent || ''));\n                    });\n                });\n                const tbodyNodes = getElementsByTagName(tableNodes[0], 'tbody');\n                if (tbodyNodes.length) {\n                    XEUtils.arrayEach(getElementsByTagName(tbodyNodes[0], 'tr'), rowNode => {\n                        const item = {};\n                        XEUtils.arrayEach(getElementsByTagName(rowNode, 'td'), (cellNode, colIndex) => {\n                            if (fields[colIndex]) {\n                                item[fields[colIndex]] = cellNode.textContent || '';\n                            }\n                        });\n                        rows.push(item);\n                    });\n                }\n            }\n        }\n    }\n    return { fields, rows };\n}\nfunction parseXML(tableConf, content) {\n    const domParser = new DOMParser();\n    const xmlDoc = domParser.parseFromString(content, 'application/xml');\n    const sheetNodes = getElementsByTagName(xmlDoc, 'Worksheet');\n    const rows = [];\n    const fields = [];\n    if (sheetNodes.length) {\n        const tableNodes = getElementsByTagName(sheetNodes[0], 'Table');\n        if (tableNodes.length) {\n            const rowNodes = getElementsByTagName(tableNodes[0], 'Row');\n            if (rowNodes.length) {\n                XEUtils.arrayEach(getElementsByTagName(rowNodes[0], 'Cell'), cellNode => {\n                    fields.push(toExportField(tableConf, cellNode.textContent || ''));\n                });\n                XEUtils.arrayEach(rowNodes, (rowNode, index) => {\n                    if (index) {\n                        const item = {};\n                        const cellNodes = getElementsByTagName(rowNode, 'Cell');\n                        XEUtils.arrayEach(cellNodes, (cellNode, colIndex) => {\n                            if (fields[colIndex]) {\n                                item[fields[colIndex]] = cellNode.textContent;\n                            }\n                        });\n                        rows.push(item);\n                    }\n                });\n            }\n        }\n    }\n    return { fields, rows };\n}\nfunction clearColumnConvert(columns) {\n    XEUtils.eachTree(columns, (column) => {\n        delete column._level;\n        delete column._colSpan;\n        delete column._rowSpan;\n        delete column._children;\n        delete column.childNodes;\n    }, { children: 'children' });\n}\nconst tableExportMethodKeys = ['exportData', 'importByFile', 'importData', 'saveFile', 'readFile', 'print', 'getPrintHtml', 'openImport', 'closeImport', 'openExport', 'closeExport', 'openPrint', 'closePrint'];\nhooks.add('tableExportModule', {\n    setupTable($xeTable) {\n        const { props, reactData, internalData } = $xeTable;\n        const { computeTreeOpts, computePrintOpts, computeExportOpts, computeImportOpts, computeCustomOpts, computeSeqOpts, computeRadioOpts, computeCheckboxOpts, computeColumnOpts } = $xeTable.getComputeMaps();\n        const $xeGrid = inject('$xeGrid', null);\n        const hasTreeChildren = (row) => {\n            const treeOpts = computeTreeOpts.value;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            return row[childrenField] && row[childrenField].length;\n        };\n        const getSeq = (cellValue, row, $rowIndex, column, $columnIndex) => {\n            const seqOpts = computeSeqOpts.value;\n            const seqMethod = seqOpts.seqMethod || column.seqMethod;\n            if (seqMethod) {\n                return seqMethod({\n                    row,\n                    rowIndex: $xeTable.getRowIndex(row),\n                    $rowIndex,\n                    column,\n                    columnIndex: $xeTable.getColumnIndex(column),\n                    $columnIndex\n                });\n            }\n            return cellValue;\n        };\n        function getHeaderTitle(opts, column) {\n            const columnOpts = computeColumnOpts.value;\n            const headExportMethod = column.headerExportMethod || columnOpts.headerExportMethod;\n            return headExportMethod ? headExportMethod({ column, options: opts, $table: $xeTable }) : ((opts.original ? column.field : column.getTitle()) || '');\n        }\n        const toBooleanValue = (cellValue) => {\n            return XEUtils.isBoolean(cellValue) ? (cellValue ? 'TRUE' : 'FALSE') : cellValue;\n        };\n        const toStringValue = (cellValue) => {\n            return eqEmptyValue(cellValue) ? '' : `${cellValue}`;\n        };\n        const getBodyLabelData = (opts, columns, datas) => {\n            const { isAllExpand, mode } = opts;\n            const { treeConfig } = props;\n            const radioOpts = computeRadioOpts.value;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const treeOpts = computeTreeOpts.value;\n            const columnOpts = computeColumnOpts.value;\n            if (!htmlCellElem) {\n                htmlCellElem = document.createElement('div');\n            }\n            if (treeConfig) {\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                // 如果是树表格只允许导出数据源\n                const rest = [];\n                const expandMaps = new Map();\n                XEUtils.eachTree(datas, (item, $rowIndex, items, path, parent, nodes) => {\n                    const row = item._row || item;\n                    const parentRow = parent && parent._row ? parent._row : parent;\n                    if ((isAllExpand || !parentRow || (expandMaps.has(parentRow) && $xeTable.isTreeExpandByRow(parentRow)))) {\n                        const hasRowChild = hasTreeChildren(row);\n                        const item = {\n                            _row: row,\n                            _level: nodes.length - 1,\n                            _hasChild: hasRowChild,\n                            _expand: hasRowChild && $xeTable.isTreeExpandByRow(row)\n                        };\n                        columns.forEach((column, $columnIndex) => {\n                            let cellValue = '';\n                            const renderOpts = column.editRender || column.cellRender;\n                            let bodyExportMethod = column.exportMethod || columnOpts.exportMethod;\n                            if (!bodyExportMethod && renderOpts && renderOpts.name) {\n                                const compConf = renderer.get(renderOpts.name);\n                                if (compConf) {\n                                    bodyExportMethod = compConf.tableExportMethod || compConf.exportMethod;\n                                }\n                            }\n                            if (!bodyExportMethod) {\n                                bodyExportMethod = columnOpts.exportMethod;\n                            }\n                            if (bodyExportMethod) {\n                                cellValue = bodyExportMethod({ $table: $xeTable, row, column, options: opts });\n                            }\n                            else {\n                                switch (column.type) {\n                                    case 'seq': {\n                                        const seqVal = path.map((num, i) => i % 2 === 0 ? (Number(num) + 1) : '.').join('');\n                                        cellValue = mode === 'all' ? seqVal : getSeq(seqVal, row, $rowIndex, column, $columnIndex);\n                                        break;\n                                    }\n                                    case 'checkbox':\n                                        cellValue = toBooleanValue($xeTable.isCheckedByCheckboxRow(row));\n                                        item._checkboxLabel = checkboxOpts.labelField ? XEUtils.get(row, checkboxOpts.labelField) : '';\n                                        item._checkboxDisabled = checkboxOpts.checkMethod && !checkboxOpts.checkMethod({ row });\n                                        break;\n                                    case 'radio':\n                                        cellValue = toBooleanValue($xeTable.isCheckedByRadioRow(row));\n                                        item._radioLabel = radioOpts.labelField ? XEUtils.get(row, radioOpts.labelField) : '';\n                                        item._radioDisabled = radioOpts.checkMethod && !radioOpts.checkMethod({ row });\n                                        break;\n                                    default:\n                                        if (opts.original) {\n                                            cellValue = getCellValue(row, column);\n                                        }\n                                        else {\n                                            cellValue = $xeTable.getCellLabel(row, column);\n                                            if (column.type === 'html') {\n                                                htmlCellElem.innerHTML = cellValue;\n                                                cellValue = htmlCellElem.innerText.trim();\n                                            }\n                                            else {\n                                                const cell = $xeTable.getCellElement(row, column);\n                                                if (cell && !hasClass(cell, 'is--progress')) {\n                                                    cellValue = cell.innerText.trim();\n                                                }\n                                            }\n                                        }\n                                }\n                            }\n                            item[column.id] = toStringValue(cellValue);\n                        });\n                        expandMaps.set(row, 1);\n                        rest.push(Object.assign(item, row));\n                    }\n                }, { children: childrenField });\n                return rest;\n            }\n            return datas.map((row, $rowIndex) => {\n                const item = {\n                    _row: row\n                };\n                columns.forEach((column, $columnIndex) => {\n                    let cellValue = '';\n                    const renderOpts = column.editRender || column.cellRender;\n                    let bodyExportMethod = column.exportMethod || columnOpts.exportMethod;\n                    if (!bodyExportMethod && renderOpts && renderOpts.name) {\n                        const compConf = renderer.get(renderOpts.name);\n                        if (compConf) {\n                            bodyExportMethod = compConf.tableExportMethod || compConf.exportMethod;\n                        }\n                    }\n                    if (bodyExportMethod) {\n                        cellValue = bodyExportMethod({ $table: $xeTable, row, column, options: opts });\n                    }\n                    else {\n                        switch (column.type) {\n                            case 'seq': {\n                                const seqValue = $rowIndex + 1;\n                                cellValue = mode === 'all' ? seqValue : getSeq(seqValue, row, $rowIndex, column, $columnIndex);\n                                break;\n                            }\n                            case 'checkbox':\n                                cellValue = toBooleanValue($xeTable.isCheckedByCheckboxRow(row));\n                                item._checkboxLabel = checkboxOpts.labelField ? XEUtils.get(row, checkboxOpts.labelField) : '';\n                                item._checkboxDisabled = checkboxOpts.checkMethod && !checkboxOpts.checkMethod({ row });\n                                break;\n                            case 'radio':\n                                cellValue = toBooleanValue($xeTable.isCheckedByRadioRow(row));\n                                item._radioLabel = radioOpts.labelField ? XEUtils.get(row, radioOpts.labelField) : '';\n                                item._radioDisabled = radioOpts.checkMethod && !radioOpts.checkMethod({ row });\n                                break;\n                            default:\n                                if (opts.original) {\n                                    cellValue = getCellValue(row, column);\n                                }\n                                else {\n                                    cellValue = $xeTable.getCellLabel(row, column);\n                                    if (column.type === 'html') {\n                                        htmlCellElem.innerHTML = cellValue;\n                                        cellValue = htmlCellElem.innerText.trim();\n                                    }\n                                    else {\n                                        const cell = $xeTable.getCellElement(row, column);\n                                        if (cell && !hasClass(cell, 'is--progress')) {\n                                            cellValue = cell.innerText.trim();\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                    item[column.id] = toStringValue(cellValue);\n                });\n                return item;\n            });\n        };\n        const getExportData = (opts) => {\n            const { columns, dataFilterMethod } = opts;\n            let datas = opts.data;\n            if (dataFilterMethod) {\n                datas = datas.filter((row, index) => dataFilterMethod({ row, $rowIndex: index }));\n            }\n            return getBodyLabelData(opts, columns, datas);\n        };\n        const getFooterCellValue = (opts, row, column) => {\n            const columnOpts = computeColumnOpts.value;\n            const renderOpts = column.editRender || column.cellRender;\n            let footLabelMethod = column.footerExportMethod;\n            if (!footLabelMethod && renderOpts && renderOpts.name) {\n                const compConf = renderer.get(renderOpts.name);\n                if (compConf) {\n                    footLabelMethod = compConf.tableFooterExportMethod || compConf.footerExportMethod;\n                }\n            }\n            if (!footLabelMethod) {\n                footLabelMethod = columnOpts.footerExportMethod;\n            }\n            const _columnIndex = $xeTable.getVTColumnIndex(column);\n            if (footLabelMethod) {\n                return footLabelMethod({ $table: $xeTable, items: row, itemIndex: _columnIndex, row, _columnIndex, column, options: opts });\n            }\n            // 兼容老模式\n            if (XEUtils.isArray(row)) {\n                return XEUtils.toValueString(row[_columnIndex]);\n            }\n            return XEUtils.get(row, column.field);\n        };\n        const toCsv = (opts, columns, datas) => {\n            let content = csvBOM;\n            if (opts.isHeader) {\n                content += columns.map((column) => toTxtCellLabel(getHeaderTitle(opts, column))).join(',') + enterSymbol;\n            }\n            datas.forEach((row) => {\n                content += columns.map((column) => toTxtCellLabel(getCsvCellTypeLabel(column, row[column.id]))).join(',') + enterSymbol;\n            });\n            if (opts.isFooter) {\n                const { footerTableData } = reactData;\n                const footers = getFooterData(opts, footerTableData);\n                footers.forEach((row) => {\n                    content += columns.map((column) => toTxtCellLabel(getFooterCellValue(opts, row, column))).join(',') + enterSymbol;\n                });\n            }\n            return content;\n        };\n        const toTxt = (opts, columns, datas) => {\n            let content = '';\n            if (opts.isHeader) {\n                content += columns.map((column) => toTxtCellLabel(getHeaderTitle(opts, column))).join('\\t') + enterSymbol;\n            }\n            datas.forEach((row) => {\n                content += columns.map((column) => toTxtCellLabel(row[column.id])).join('\\t') + enterSymbol;\n            });\n            if (opts.isFooter) {\n                const { footerTableData } = reactData;\n                const footers = getFooterData(opts, footerTableData);\n                footers.forEach((row) => {\n                    content += columns.map((column) => toTxtCellLabel(getFooterCellValue(opts, row, column))).join('\\t') + enterSymbol;\n                });\n            }\n            return content;\n        };\n        const hasEllipsis = (column, property, allColumnOverflow) => {\n            const columnOverflow = column[property];\n            const headOverflow = XEUtils.isUndefined(columnOverflow) || XEUtils.isNull(columnOverflow) ? allColumnOverflow : columnOverflow;\n            const showEllipsis = headOverflow === 'ellipsis';\n            const showTitle = headOverflow === 'title';\n            const showTooltip = headOverflow === true || headOverflow === 'tooltip';\n            let isEllipsis = showTitle || showTooltip || showEllipsis;\n            // 虚拟滚动不支持动态高度\n            const { scrollXLoad, scrollYLoad } = reactData;\n            if ((scrollXLoad || scrollYLoad) && !isEllipsis) {\n                isEllipsis = true;\n            }\n            return isEllipsis;\n        };\n        const toHtml = (opts, columns, datas) => {\n            const { id, border, treeConfig, headerAlign: allHeaderAlign, align: allAlign, footerAlign: allFooterAlign, showOverflow: allColumnOverflow, showHeaderOverflow: allColumnHeaderOverflow } = props;\n            const { isAllSelected, isIndeterminate, mergeList } = reactData;\n            const treeOpts = computeTreeOpts.value;\n            const { print: isPrint, isHeader, isFooter, isColgroup, isMerge, colgroups, original } = opts;\n            const allCls = 'check-all';\n            const clss = [\n                'vxe-table',\n                `border--${toTableBorder(border)}`,\n                isPrint ? 'is--print' : '',\n                isHeader ? 'is--header' : ''\n            ].filter(cls => cls);\n            const tables = [\n                `<table class=\"${clss.join(' ')}\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">`,\n                `<colgroup>${columns.map((column) => `<col style=\"width:${column.renderWidth}px\">`).join('')}</colgroup>`\n            ];\n            if (isHeader) {\n                tables.push('<thead>');\n                if (isColgroup && !original) {\n                    colgroups.forEach((cols) => {\n                        tables.push(`<tr>${cols.map((column) => {\n                            const headAlign = column.headerAlign || column.align || allHeaderAlign || allAlign;\n                            const classNames = hasEllipsis(column, 'showHeaderOverflow', allColumnHeaderOverflow) ? ['col--ellipsis'] : [];\n                            const cellTitle = getHeaderTitle(opts, column);\n                            let childWidth = 0;\n                            let countChild = 0;\n                            XEUtils.eachTree([column], item => {\n                                if (!item.childNodes || !column.childNodes.length) {\n                                    countChild++;\n                                }\n                                childWidth += item.renderWidth;\n                            }, { children: 'childNodes' });\n                            const cellWidth = childWidth - countChild;\n                            if (headAlign) {\n                                classNames.push(`col--${headAlign}`);\n                            }\n                            if (column.type === 'checkbox') {\n                                return `<th class=\"${classNames.join(' ')}\" colspan=\"${column._colSpan}\" rowspan=\"${column._rowSpan}\"><div ${isPrint ? '' : `style=\"width: ${cellWidth}px\"`}><input type=\"checkbox\" class=\"${allCls}\" ${isAllSelected ? 'checked' : ''}><span>${cellTitle}</span></div></th>`;\n                            }\n                            return `<th class=\"${classNames.join(' ')}\" colspan=\"${column._colSpan}\" rowspan=\"${column._rowSpan}\" title=\"${cellTitle}\"><div ${isPrint ? '' : `style=\"width: ${cellWidth}px\"`}><span>${formatText(cellTitle, true)}</span></div></th>`;\n                        }).join('')}</tr>`);\n                    });\n                }\n                else {\n                    tables.push(`<tr>${columns.map((column) => {\n                        const headAlign = column.headerAlign || column.align || allHeaderAlign || allAlign;\n                        const classNames = hasEllipsis(column, 'showHeaderOverflow', allColumnHeaderOverflow) ? ['col--ellipsis'] : [];\n                        const cellTitle = getHeaderTitle(opts, column);\n                        if (headAlign) {\n                            classNames.push(`col--${headAlign}`);\n                        }\n                        if (column.type === 'checkbox') {\n                            return `<th class=\"${classNames.join(' ')}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"checkbox\" class=\"${allCls}\" ${isAllSelected ? 'checked' : ''}><span>${cellTitle}</span></div></th>`;\n                        }\n                        return `<th class=\"${classNames.join(' ')}\" title=\"${cellTitle}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><span>${formatText(cellTitle, true)}</span></div></th>`;\n                    }).join('')}</tr>`);\n                }\n                tables.push('</thead>');\n            }\n            if (datas.length) {\n                tables.push('<tbody>');\n                if (treeConfig) {\n                    datas.forEach((item) => {\n                        tables.push('<tr>' + columns.map((column) => {\n                            const cellAlign = column.align || allAlign;\n                            const classNames = hasEllipsis(column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : [];\n                            const cellValue = item[column.id];\n                            if (cellAlign) {\n                                classNames.push(`col--${cellAlign}`);\n                            }\n                            if (column.treeNode) {\n                                let treeIcon = '';\n                                if (item._hasChild) {\n                                    treeIcon = `<i class=\"${item._expand ? 'vxe-table--tree-fold-icon' : 'vxe-table--tree-unfold-icon'}\"></i>`;\n                                }\n                                classNames.push('vxe-table--tree-node');\n                                if (column.type === 'radio') {\n                                    return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><div class=\"vxe-table--tree-node-wrapper\" style=\"padding-left: ${item._level * treeOpts.indent}px\"><div class=\"vxe-table--tree-icon-wrapper\">${treeIcon}</div><div class=\"vxe-table--tree-cell\"><input type=\"radio\" name=\"radio_${id}\" ${item._radioDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._radioLabel}</span></div></div></div></td>`;\n                                }\n                                else if (column.type === 'checkbox') {\n                                    return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><div class=\"vxe-table--tree-node-wrapper\" style=\"padding-left: ${item._level * treeOpts.indent}px\"><div class=\"vxe-table--tree-icon-wrapper\">${treeIcon}</div><div class=\"vxe-table--tree-cell\"><input type=\"checkbox\" ${item._checkboxDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._checkboxLabel}</span></div></div></div></td>`;\n                                }\n                                return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><div class=\"vxe-table--tree-node-wrapper\" style=\"padding-left: ${item._level * treeOpts.indent}px\"><div class=\"vxe-table--tree-icon-wrapper\">${treeIcon}</div><div class=\"vxe-table--tree-cell\">${cellValue}</div></div></div></td>`;\n                            }\n                            if (column.type === 'radio') {\n                                return `<td class=\"${classNames.join(' ')}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"radio\" name=\"radio_${id}\" ${item._radioDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._radioLabel}</span></div></td>`;\n                            }\n                            else if (column.type === 'checkbox') {\n                                return `<td class=\"${classNames.join(' ')}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"checkbox\" ${item._checkboxDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._checkboxLabel}</span></div></td>`;\n                            }\n                            return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}>${formatText(cellValue, true)}</div></td>`;\n                        }).join('') + '</tr>');\n                    });\n                }\n                else {\n                    datas.forEach((item) => {\n                        tables.push('<tr>' + columns.map((column) => {\n                            const cellAlign = column.align || allAlign;\n                            const classNames = hasEllipsis(column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : [];\n                            const cellValue = item[column.id];\n                            let rowSpan = 1;\n                            let colSpan = 1;\n                            if (isMerge && mergeList.length) {\n                                const _rowIndex = $xeTable.getVTRowIndex(item._row);\n                                const _columnIndex = $xeTable.getVTColumnIndex(column);\n                                const spanRest = mergeBodyMethod(mergeList, _rowIndex, _columnIndex);\n                                if (spanRest) {\n                                    const { rowspan, colspan } = spanRest;\n                                    if (!rowspan || !colspan) {\n                                        return '';\n                                    }\n                                    if (rowspan > 1) {\n                                        rowSpan = rowspan;\n                                    }\n                                    if (colspan > 1) {\n                                        colSpan = colspan;\n                                    }\n                                }\n                            }\n                            if (cellAlign) {\n                                classNames.push(`col--${cellAlign}`);\n                            }\n                            if (column.type === 'radio') {\n                                return `<td class=\"${classNames.join(' ')}\" rowspan=\"${rowSpan}\" colspan=\"${colSpan}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"radio\" name=\"radio_${id}\" ${item._radioDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._radioLabel}</span></div></td>`;\n                            }\n                            else if (column.type === 'checkbox') {\n                                return `<td class=\"${classNames.join(' ')}\" rowspan=\"${rowSpan}\" colspan=\"${colSpan}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}><input type=\"checkbox\" ${item._checkboxDisabled ? 'disabled ' : ''}${getBooleanValue(cellValue) ? 'checked' : ''}><span>${item._checkboxLabel}</span></div></td>`;\n                            }\n                            return `<td class=\"${classNames.join(' ')}\" rowspan=\"${rowSpan}\" colspan=\"${colSpan}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}>${formatText(cellValue, true)}</div></td>`;\n                        }).join('') + '</tr>');\n                    });\n                }\n                tables.push('</tbody>');\n            }\n            if (isFooter) {\n                const { footerTableData } = reactData;\n                const footers = getFooterData(opts, footerTableData);\n                if (footers.length) {\n                    tables.push('<tfoot>');\n                    footers.forEach((row) => {\n                        tables.push(`<tr>${columns.map((column) => {\n                            const footAlign = column.footerAlign || column.align || allFooterAlign || allAlign;\n                            const classNames = hasEllipsis(column, 'showOverflow', allColumnOverflow) ? ['col--ellipsis'] : [];\n                            const cellValue = getFooterCellValue(opts, row, column);\n                            if (footAlign) {\n                                classNames.push(`col--${footAlign}`);\n                            }\n                            return `<td class=\"${classNames.join(' ')}\" title=\"${cellValue}\"><div ${isPrint ? '' : `style=\"width: ${column.renderWidth}px\"`}>${formatText(cellValue, true)}</div></td>`;\n                        }).join('')}</tr>`);\n                    });\n                    tables.push('</tfoot>');\n                }\n            }\n            // 是否半选状态\n            const script = !isAllSelected && isIndeterminate ? `<script>(function(){var a=document.querySelector(\".${allCls}\");if(a){a.indeterminate=true}})()</script>` : '';\n            tables.push('</table>', script);\n            return isPrint ? tables.join('') : createHtmlPage(opts, tables.join(''));\n        };\n        const toXML = (opts, columns, datas) => {\n            let xml = [\n                '<?xml version=\"1.0\"?>',\n                '<?mso-application progid=\"Excel.Sheet\"?>',\n                '<Workbook xmlns=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns:ss=\"urn:schemas-microsoft-com:office:spreadsheet\" xmlns:html=\"http://www.w3.org/TR/REC-html40\">',\n                '<DocumentProperties xmlns=\"urn:schemas-microsoft-com:office:office\">',\n                '<Version>16.00</Version>',\n                '</DocumentProperties>',\n                '<ExcelWorkbook xmlns=\"urn:schemas-microsoft-com:office:excel\">',\n                '<WindowHeight>7920</WindowHeight>',\n                '<WindowWidth>21570</WindowWidth>',\n                '<WindowTopX>32767</WindowTopX>',\n                '<WindowTopY>32767</WindowTopY>',\n                '<ProtectStructure>False</ProtectStructure>',\n                '<ProtectWindows>False</ProtectWindows>',\n                '</ExcelWorkbook>',\n                `<Worksheet ss:Name=\"${opts.sheetName}\">`,\n                '<Table>',\n                columns.map((column) => `<Column ss:Width=\"${column.renderWidth}\"/>`).join('')\n            ].join('');\n            if (opts.isHeader) {\n                xml += `<Row>${columns.map((column) => `<Cell><Data ss:Type=\"String\">${getHeaderTitle(opts, column)}</Data></Cell>`).join('')}</Row>`;\n            }\n            datas.forEach((row) => {\n                xml += '<Row>' + columns.map((column) => `<Cell><Data ss:Type=\"String\">${row[column.id]}</Data></Cell>`).join('') + '</Row>';\n            });\n            if (opts.isFooter) {\n                const { footerTableData } = reactData;\n                const footers = getFooterData(opts, footerTableData);\n                footers.forEach((row) => {\n                    xml += `<Row>${columns.map((column) => `<Cell><Data ss:Type=\"String\">${getFooterCellValue(opts, row, column)}</Data></Cell>`).join('')}</Row>`;\n                });\n            }\n            return `${xml}</Table></Worksheet></Workbook>`;\n        };\n        const getContent = (opts, columns, datas) => {\n            if (columns.length) {\n                switch (opts.type) {\n                    case 'csv':\n                        return toCsv(opts, columns, datas);\n                    case 'txt':\n                        return toTxt(opts, columns, datas);\n                    case 'html':\n                        return toHtml(opts, columns, datas);\n                    case 'xml':\n                        return toXML(opts, columns, datas);\n                }\n            }\n            return '';\n        };\n        const downloadFile = (opts, content) => {\n            const { filename, type, download } = opts;\n            if (!download) {\n                const blob = getExportBlobByContent(content, opts);\n                return Promise.resolve({ type, content, blob });\n            }\n            if (VxeUI.saveFile) {\n                VxeUI.saveFile({ filename, type, content }).then(() => {\n                    if (opts.message !== false) {\n                        if (VxeUI.modal) {\n                            VxeUI.modal.message({ content: getI18n('vxe.table.expSuccess'), status: 'success' });\n                        }\n                    }\n                });\n            }\n        };\n        const handleExport = (opts) => {\n            const { remote, columns, colgroups, exportMethod, afterExportMethod } = opts;\n            return new Promise(resolve => {\n                if (remote) {\n                    const params = { options: opts, $table: $xeTable, $grid: $xeGrid };\n                    resolve(exportMethod ? exportMethod(params) : params);\n                }\n                else {\n                    const datas = getExportData(opts);\n                    resolve($xeTable.preventEvent(null, 'event.export', { options: opts, columns, colgroups, datas }, () => {\n                        return downloadFile(opts, getContent(opts, columns, datas));\n                    }));\n                }\n            }).then((params) => {\n                clearColumnConvert(columns);\n                if (!opts.print) {\n                    if (afterExportMethod) {\n                        afterExportMethod({ status: true, options: opts, $table: $xeTable, $grid: $xeGrid });\n                    }\n                }\n                return Object.assign({ status: true }, params);\n            }).catch(() => {\n                clearColumnConvert(columns);\n                if (!opts.print) {\n                    if (afterExportMethod) {\n                        afterExportMethod({ status: false, options: opts, $table: $xeTable, $grid: $xeGrid });\n                    }\n                }\n                const params = { status: false };\n                return Promise.reject(params);\n            });\n        };\n        const handleImport = (content, opts) => {\n            const { tableFullColumn, _importResolve, _importReject } = internalData;\n            let rest = { fields: [], rows: [] };\n            const tableFieldMaps = {};\n            const tableTitleMaps = {};\n            tableFullColumn.forEach((column) => {\n                const field = column.field;\n                const title = column.getTitle();\n                if (field) {\n                    tableFieldMaps[field] = column;\n                }\n                if (title) {\n                    tableTitleMaps[column.getTitle()] = column;\n                }\n            });\n            const tableConf = {\n                fieldMaps: tableFieldMaps,\n                titleMaps: tableTitleMaps\n            };\n            switch (opts.type) {\n                case 'csv':\n                    rest = parseCsv(tableConf, content);\n                    break;\n                case 'txt':\n                    rest = parseTxt(tableConf, content);\n                    break;\n                case 'html':\n                    rest = parseHTML(tableConf, content);\n                    break;\n                case 'xml':\n                    rest = parseXML(tableConf, content);\n                    break;\n            }\n            const { fields, rows } = rest;\n            const status = fields.some(field => tableFieldMaps[field] || tableTitleMaps[field]);\n            if (status) {\n                $xeTable.createData(rows)\n                    .then((data) => {\n                    let loadRest;\n                    if (opts.mode === 'insert' || opts.mode === 'insertBottom') {\n                        loadRest = $xeTable.insertAt(data, -1);\n                    }\n                    if (opts.mode === 'insertTop') {\n                        loadRest = $xeTable.insert(data);\n                    }\n                    else {\n                        loadRest = $xeTable.reloadData(data);\n                    }\n                    if (opts.message !== false) {\n                        if (VxeUI.modal) {\n                            VxeUI.modal.message({ content: getI18n('vxe.table.impSuccess', [rows.length]), status: 'success' });\n                        }\n                    }\n                    return loadRest.then(() => {\n                        if (_importResolve) {\n                            _importResolve({ status: true });\n                        }\n                    });\n                });\n            }\n            else if (opts.message !== false) {\n                if (VxeUI.modal) {\n                    VxeUI.modal.message({ content: getI18n('vxe.error.impFields'), status: 'error' });\n                }\n                if (_importReject) {\n                    _importReject({ status: false });\n                }\n            }\n        };\n        const handleFileImport = (file, opts) => {\n            const { importMethod, afterImportMethod } = opts;\n            const { type, filename } = parseFile(file);\n            const importOpts = computeImportOpts.value;\n            // 检查类型，如果为自定义导出，则不需要校验类型\n            if (!importMethod && !XEUtils.includes(XEUtils.keys(importOpts._typeMaps), type)) {\n                if (opts.message !== false) {\n                    if (VxeUI.modal) {\n                        VxeUI.modal.message({ content: getI18n('vxe.error.notType', [type]), status: 'error' });\n                    }\n                }\n                const params = { status: false };\n                return Promise.reject(params);\n            }\n            const rest = new Promise((resolve, reject) => {\n                const _importResolve = (params) => {\n                    resolve(params);\n                    internalData._importResolve = null;\n                    internalData._importReject = null;\n                };\n                const _importReject = (params) => {\n                    reject(params);\n                    internalData._importResolve = null;\n                    internalData._importReject = null;\n                };\n                internalData._importResolve = _importResolve;\n                internalData._importReject = _importReject;\n                if (window.FileReader) {\n                    const options = Object.assign({ mode: 'insertTop' }, opts, { type, filename });\n                    if (options.remote) {\n                        if (importMethod) {\n                            Promise.resolve(importMethod({ file, options, $table: $xeTable })).then(() => {\n                                _importResolve({ status: true });\n                            }).catch(() => {\n                                _importResolve({ status: true });\n                            });\n                        }\n                        else {\n                            _importResolve({ status: true });\n                        }\n                    }\n                    else {\n                        const { tableFullColumn } = internalData;\n                        $xeTable.preventEvent(null, 'event.import', { file, options, columns: tableFullColumn }, () => {\n                            const reader = new FileReader();\n                            reader.onerror = () => {\n                                errLog('vxe.error.notType', [type]);\n                                _importReject({ status: false });\n                            };\n                            reader.onload = (e) => {\n                                handleImport(e.target.result, options);\n                            };\n                            reader.readAsText(file, options.encoding || 'UTF-8');\n                        });\n                    }\n                }\n                else {\n                    // 不支持的浏览器\n                    errLog('vxe.error.notExp');\n                    _importResolve({ status: true });\n                }\n            });\n            return rest.then(() => {\n                if (afterImportMethod) {\n                    afterImportMethod({ status: true, options: opts, $table: $xeTable });\n                }\n            }).catch((e) => {\n                if (afterImportMethod) {\n                    afterImportMethod({ status: false, options: opts, $table: $xeTable });\n                }\n                return Promise.reject(e);\n            });\n        };\n        const handleFilterColumns = (exportOpts, column, columns) => {\n            return columns.some((item) => {\n                if (isColumnInfo(item)) {\n                    return column.id === item.id;\n                }\n                else if (XEUtils.isString(item)) {\n                    return column.field === item;\n                }\n                else {\n                    const colid = item.id || item.colId;\n                    const type = item.type;\n                    const field = item.field;\n                    if (colid) {\n                        return column.id === colid;\n                    }\n                    else if (field && type) {\n                        return column.field === field && column.type === type;\n                    }\n                    else if (field) {\n                        return column.field === field;\n                    }\n                    else if (type) {\n                        return column.type === type;\n                    }\n                }\n                return false;\n            });\n        };\n        const handleFilterFields = (exportOpts, column, includeFields, excludeFields) => {\n            if (excludeFields) {\n                if (XEUtils.includes(excludeFields, column.field)) {\n                    return false;\n                }\n            }\n            if (includeFields) {\n                if (XEUtils.includes(includeFields, column.field)) {\n                    return true;\n                }\n                return false;\n            }\n            return exportOpts.original ? column.field : defaultFilterExportColumn(column);\n        };\n        const handleExportAndPrint = (options, isPrint) => {\n            const { treeConfig, showHeader, showFooter } = props;\n            const { initStore, mergeList, mergeFooterList, isGroup, footerTableData, exportStore, exportParams } = reactData;\n            const { collectColumn } = internalData;\n            const exportOpts = computeExportOpts.value;\n            const hasTree = treeConfig;\n            const customOpts = computeCustomOpts.value;\n            const selectRecords = $xeTable.getCheckboxRecords();\n            const proxyOpts = $xeGrid ? $xeGrid.getComputeMaps().computeProxyOpts.value : {};\n            const hasFooter = !!footerTableData.length;\n            const hasMerge = !!(mergeList.length || mergeFooterList.length);\n            const defOpts = Object.assign({\n                message: true,\n                isHeader: showHeader,\n                isFooter: showFooter,\n                isColgroup: isGroup,\n                isMerge: hasMerge,\n                useStyle: true,\n                current: 'current',\n                modes: (proxyOpts.ajax && proxyOpts.ajax.queryAll ? ['all'] : []).concat(['current', 'selected', 'empty'])\n            }, options);\n            const types = defOpts.types || XEUtils.keys(exportOpts._typeMaps);\n            const modes = defOpts.modes || [];\n            const checkMethod = customOpts.checkMethod;\n            const exportColumns = collectColumn.slice(0);\n            const { columns, excludeFields, includeFields } = defOpts;\n            // 处理类型\n            const typeList = types.map((value) => {\n                return {\n                    value,\n                    label: getI18n(`vxe.export.types.${value}`)\n                };\n            });\n            const modeList = modes.map((item) => {\n                if (item && item.value) {\n                    return {\n                        value: item.value,\n                        label: item.label || item.value\n                    };\n                }\n                return {\n                    value: item,\n                    label: getI18n(`vxe.export.modes.${item}`)\n                };\n            });\n            // 默认选中\n            XEUtils.eachTree(exportColumns, (column, index, items, path, parent) => {\n                const isColGroup = column.children && column.children.length;\n                let isChecked = false;\n                if (columns && columns.length) {\n                    isChecked = handleFilterColumns(defOpts, column, columns);\n                }\n                else if (excludeFields || includeFields) {\n                    isChecked = handleFilterFields(defOpts, column, includeFields, excludeFields);\n                }\n                else {\n                    isChecked = column.visible && (isColGroup || defaultFilterExportColumn(column));\n                }\n                column.checked = isChecked;\n                column.halfChecked = false;\n                column.disabled = (parent && parent.disabled) || (checkMethod ? !checkMethod({ column }) : false);\n            });\n            // 更新条件\n            Object.assign(exportStore, {\n                columns: exportColumns,\n                typeList,\n                modeList,\n                hasFooter,\n                hasMerge,\n                hasTree,\n                isPrint,\n                hasColgroup: isGroup,\n                visible: true\n            });\n            // 默认参数\n            Object.assign(exportParams, {\n                mode: selectRecords.length ? 'selected' : 'current'\n            }, defOpts);\n            const { filename, sheetName, mode, type } = exportParams;\n            if (filename) {\n                if (XEUtils.isFunction(filename)) {\n                    exportParams.filename = filename({\n                        options: defOpts,\n                        $table: $xeTable,\n                        $grid: $xeGrid\n                    });\n                }\n                else {\n                    exportParams.filename = `${filename}`;\n                }\n            }\n            if (sheetName) {\n                if (XEUtils.isFunction(sheetName)) {\n                    exportParams.sheetName = sheetName({\n                        options: defOpts,\n                        $table: $xeTable,\n                        $grid: $xeGrid\n                    });\n                }\n                else {\n                    exportParams.sheetName = `${sheetName}`;\n                }\n            }\n            if (!modeList.some(item => item.value === mode)) {\n                exportParams.mode = modeList[0].value;\n            }\n            if (!typeList.some(item => item.value === type)) {\n                exportParams.type = typeList[0].value;\n            }\n            initStore.export = true;\n            return nextTick();\n        };\n        const handleCloseExport = () => {\n            if (VxeUI.modal) {\n                return VxeUI.modal.close('VXE_EXPORT_MODAL');\n            }\n            return Promise.resolve();\n        };\n        const exportMethods = {\n            /**\n             * 导出文件，支持 csv/html/xml/txt\n             * 如果是树表格，则默认是导出所有节点\n             * 如果是启用了虚拟滚动，则只能导出数据源，可以配合 dataFilterMethod 函数转换数据\n             * @param {Object} options 参数\n             */\n            exportData(options) {\n                const { treeConfig, showHeader, showFooter } = props;\n                const { mergeList, mergeFooterList, isGroup } = reactData;\n                const { tableFullColumn, afterFullData, collectColumn } = internalData;\n                const exportOpts = computeExportOpts.value;\n                const treeOpts = computeTreeOpts.value;\n                const proxyOpts = $xeGrid ? $xeGrid.getComputeMaps().computeProxyOpts.value : {};\n                const hasMerge = !!(mergeList.length || mergeFooterList.length);\n                const opts = Object.assign({\n                    message: true,\n                    isHeader: showHeader,\n                    isFooter: showFooter,\n                    isColgroup: isGroup,\n                    isMerge: hasMerge,\n                    useStyle: true,\n                    current: 'current',\n                    modes: (proxyOpts.ajax && proxyOpts.ajax.queryAll ? ['all'] : []).concat(['current', 'selected', 'empty']),\n                    download: true,\n                    type: 'csv'\n                    // filename: '',\n                    // sheetName: '',\n                    // original: false,\n                    // isAllExpand: false,\n                    // data: null,\n                    // remote: false,\n                    // dataFilterMethod: null,\n                    // footerFilterMethod: null,\n                    // exportMethod: null,\n                    // columnFilterMethod: null,\n                    // beforeExportMethod: null,\n                    // afterExportMethod: null\n                }, exportOpts, options);\n                let { filename, sheetName, type, mode, columns, original, columnFilterMethod, beforeExportMethod, includeFields, excludeFields } = opts;\n                let groups = [];\n                const selectRecords = $xeTable.getCheckboxRecords();\n                if (!mode) {\n                    mode = selectRecords.length ? 'selected' : 'current';\n                }\n                const customCols = columns && columns.length\n                    ? columns\n                    : XEUtils.searchTree(collectColumn, column => {\n                        const isColGroup = column.children && column.children.length;\n                        let isChecked = false;\n                        if (columns && columns.length) {\n                            isChecked = handleFilterColumns(opts, column, columns);\n                        }\n                        else if (excludeFields || includeFields) {\n                            isChecked = handleFilterFields(opts, column, includeFields, excludeFields);\n                        }\n                        else {\n                            isChecked = column.visible && (isColGroup || defaultFilterExportColumn(column));\n                        }\n                        return isChecked;\n                    }, { children: 'children', mapChildren: 'childNodes', original: true });\n                const handleOptions = Object.assign({}, opts, { filename: '', sheetName: '' });\n                // 如果设置源数据，则默认导出设置了字段的列\n                if (!customCols && !columnFilterMethod) {\n                    handleOptions.columnFilterMethod = ({ column }) => {\n                        if (excludeFields) {\n                            if (XEUtils.includes(excludeFields, column.field)) {\n                                return false;\n                            }\n                        }\n                        if (includeFields) {\n                            if (XEUtils.includes(includeFields, column.field)) {\n                                return true;\n                            }\n                            return false;\n                        }\n                        return original ? column.field : defaultFilterExportColumn(column);\n                    };\n                }\n                if (customCols) {\n                    handleOptions._isCustomColumn = true;\n                    groups = XEUtils.searchTree(XEUtils.mapTree(customCols, (item) => {\n                        let targetColumn;\n                        if (item) {\n                            if (isColumnInfo(item)) {\n                                targetColumn = item;\n                            }\n                            else if (XEUtils.isString(item)) {\n                                targetColumn = $xeTable.getColumnByField(item);\n                            }\n                            else {\n                                const colid = item.id || item.colId;\n                                const type = item.type;\n                                const field = item.field;\n                                if (colid) {\n                                    targetColumn = $xeTable.getColumnById(colid);\n                                }\n                                else if (field && type) {\n                                    targetColumn = tableFullColumn.find((column) => column.field === field && column.type === type);\n                                }\n                                else if (field) {\n                                    targetColumn = $xeTable.getColumnByField(field);\n                                }\n                                else if (type) {\n                                    targetColumn = tableFullColumn.find((column) => column.type === type);\n                                }\n                            }\n                            return targetColumn || {};\n                        }\n                    }, {\n                        children: 'childNodes',\n                        mapChildren: '_children'\n                    }), (column, index) => isColumnInfo(column) && (!columnFilterMethod || columnFilterMethod({ column: column, $columnIndex: index })), {\n                        children: '_children',\n                        mapChildren: 'childNodes',\n                        original: true\n                    });\n                }\n                else {\n                    groups = XEUtils.searchTree(isGroup ? collectColumn : tableFullColumn, (column, index) => column.visible && (!columnFilterMethod || columnFilterMethod({ column, $columnIndex: index })), { children: 'children', mapChildren: 'childNodes', original: true });\n                }\n                // 获取所有列\n                const cols = [];\n                XEUtils.eachTree(groups, column => {\n                    const isColGroup = column.children && column.children.length;\n                    if (!isColGroup) {\n                        cols.push(column);\n                    }\n                }, { children: 'childNodes' });\n                // 构建分组层级\n                handleOptions.columns = cols;\n                handleOptions.colgroups = convertToRows(groups);\n                if (filename) {\n                    if (XEUtils.isFunction(filename)) {\n                        handleOptions.filename = filename({\n                            options: opts,\n                            $table: $xeTable,\n                            $grid: $xeGrid\n                        });\n                    }\n                    else {\n                        handleOptions.filename = `${filename}`;\n                    }\n                }\n                if (!handleOptions.filename) {\n                    handleOptions.filename = getI18n(handleOptions.original ? 'vxe.table.expOriginFilename' : 'vxe.table.expFilename', [XEUtils.toDateString(Date.now(), 'yyyyMMddHHmmss')]);\n                }\n                if (sheetName) {\n                    if (XEUtils.isFunction(sheetName)) {\n                        handleOptions.sheetName = sheetName({\n                            options: opts,\n                            $table: $xeTable,\n                            $grid: $xeGrid\n                        });\n                    }\n                    else {\n                        handleOptions.sheetName = `${sheetName}`;\n                    }\n                }\n                if (!handleOptions.sheetName) {\n                    handleOptions.sheetName = document.title || '';\n                }\n                // 检查类型，如果为自定义导出，则不需要校验类型\n                if (!handleOptions.exportMethod && !XEUtils.includes(XEUtils.keys(exportOpts._typeMaps), type)) {\n                    errLog('vxe.error.notType', [type]);\n                    if (process.env.NODE_ENV === 'development') {\n                        if (['xlsx', 'pdf'].includes(type)) {\n                            warnLog('vxe.error.reqPlugin', [4, 'plugin-export-xlsx']);\n                        }\n                    }\n                    const params = { status: false };\n                    return Promise.reject(params);\n                }\n                if (!handleOptions.print) {\n                    if (beforeExportMethod) {\n                        beforeExportMethod({ options: handleOptions, $table: $xeTable, $grid: $xeGrid });\n                    }\n                }\n                if (!handleOptions.data) {\n                    handleOptions.data = [];\n                    if (mode === 'selected') {\n                        if (['html', 'pdf'].indexOf(type) > -1 && treeConfig) {\n                            handleOptions.data = XEUtils.searchTree($xeTable.getTableData().fullData, item => $xeTable.findRowIndexOf(selectRecords, item) > -1, Object.assign({}, treeOpts, { data: '_row' }));\n                        }\n                        else {\n                            handleOptions.data = selectRecords;\n                        }\n                    }\n                    else if (mode === 'all') {\n                        if (process.env.NODE_ENV === 'development') {\n                            if (!$xeGrid) {\n                                warnLog('vxe.error.errProp', ['all', 'mode=current,selected']);\n                            }\n                        }\n                        if ($xeGrid && !handleOptions.remote) {\n                            const gridReactData = $xeGrid.reactData;\n                            const { computeProxyOpts } = $xeGrid.getComputeMaps();\n                            const proxyOpts = computeProxyOpts.value;\n                            const { sortData } = gridReactData;\n                            const { beforeQueryAll, afterQueryAll, ajax = {} } = proxyOpts;\n                            const resConfigs = proxyOpts.response || proxyOpts.props || {};\n                            const ajaxMethods = ajax.queryAll;\n                            const queryAllSuccessMethods = ajax.queryAllSuccess;\n                            const queryAllErrorMethods = ajax.queryAllError;\n                            if (process.env.NODE_ENV === 'development') {\n                                if (!ajaxMethods) {\n                                    warnLog('vxe.error.notFunc', ['proxy-config.ajax.queryAll']);\n                                }\n                            }\n                            if (ajaxMethods) {\n                                const params = {\n                                    $table: $xeTable,\n                                    $grid: $xeGrid,\n                                    sort: sortData.length ? sortData[0] : {},\n                                    sorts: sortData,\n                                    filters: gridReactData.filterData,\n                                    form: gridReactData.formData,\n                                    options: handleOptions\n                                };\n                                return Promise.resolve((beforeQueryAll || ajaxMethods)(params))\n                                    .then(rest => {\n                                    const listProp = resConfigs.list;\n                                    handleOptions.data = (listProp ? (XEUtils.isFunction(listProp) ? listProp({ data: rest, $grid: $xeGrid }) : XEUtils.get(rest, listProp)) : rest) || [];\n                                    if (afterQueryAll) {\n                                        afterQueryAll(params);\n                                    }\n                                    if (queryAllSuccessMethods) {\n                                        queryAllSuccessMethods(Object.assign(Object.assign({}, params), { response: rest }));\n                                    }\n                                    return handleExport(handleOptions);\n                                })\n                                    .catch((rest) => {\n                                    if (queryAllErrorMethods) {\n                                        queryAllErrorMethods(Object.assign(Object.assign({}, params), { response: rest }));\n                                    }\n                                });\n                            }\n                        }\n                    }\n                    if (mode === 'current') {\n                        handleOptions.data = afterFullData;\n                    }\n                }\n                return handleExport(handleOptions);\n            },\n            importByFile(file, options) {\n                const opts = Object.assign({}, options);\n                const { beforeImportMethod } = opts;\n                if (beforeImportMethod) {\n                    beforeImportMethod({ options: opts, $table: $xeTable });\n                }\n                return handleFileImport(file, opts);\n            },\n            importData(options) {\n                const importOpts = computeImportOpts.value;\n                const opts = Object.assign({\n                    types: XEUtils.keys(importOpts._typeMaps)\n                    // beforeImportMethod: null,\n                    // afterImportMethod: null\n                }, importOpts, options);\n                const { beforeImportMethod, afterImportMethod } = opts;\n                if (beforeImportMethod) {\n                    beforeImportMethod({ options: opts, $table: $xeTable });\n                }\n                return VxeUI.readFile(opts).catch(e => {\n                    if (afterImportMethod) {\n                        afterImportMethod({ status: false, options: opts, $table: $xeTable });\n                    }\n                    return Promise.reject(e);\n                }).then((params) => {\n                    const { file } = params;\n                    return handleFileImport(file, opts);\n                });\n            },\n            saveFile(options) {\n                return VxeUI.saveFile(options);\n            },\n            readFile(options) {\n                return VxeUI.readFile(options);\n            },\n            print(options) {\n                const printOpts = computePrintOpts.value;\n                const opts = Object.assign({\n                    original: false\n                    // beforePrintMethod\n                }, printOpts, options, {\n                    type: 'html',\n                    download: false,\n                    remote: false,\n                    print: true\n                });\n                const { sheetName } = opts;\n                let printTitle = '';\n                if (sheetName) {\n                    if (XEUtils.isFunction(sheetName)) {\n                        printTitle = sheetName({\n                            options: opts,\n                            $table: $xeTable,\n                            $grid: $xeGrid\n                        });\n                    }\n                    else {\n                        printTitle = `${sheetName}`;\n                    }\n                }\n                if (!printTitle) {\n                    printTitle = document.title || '';\n                }\n                const beforePrintMethod = opts.beforePrintMethod;\n                const tableHtml = opts.html || opts.content;\n                return new Promise((resolve, reject) => {\n                    if (VxeUI.print) {\n                        if (tableHtml) {\n                            resolve(VxeUI.print({\n                                title: printTitle,\n                                html: tableHtml,\n                                customStyle: opts.style,\n                                beforeMethod: beforePrintMethod\n                                    ? ({ html }) => {\n                                        return beforePrintMethod({\n                                            html,\n                                            content: html,\n                                            options: opts,\n                                            $table: $xeTable\n                                        });\n                                    }\n                                    : undefined\n                            }));\n                        }\n                        else {\n                            resolve(exportMethods.exportData(opts).then(({ content }) => {\n                                return VxeUI.print({\n                                    title: printTitle,\n                                    html: content,\n                                    customStyle: opts.style,\n                                    beforeMethod: beforePrintMethod\n                                        ? ({ html }) => {\n                                            return beforePrintMethod({\n                                                html,\n                                                content: html,\n                                                options: opts,\n                                                $table: $xeTable\n                                            });\n                                        }\n                                        : undefined\n                                });\n                            }));\n                        }\n                    }\n                    else {\n                        const e = { status: false };\n                        reject(e);\n                    }\n                });\n            },\n            getPrintHtml(options) {\n                const printOpts = computePrintOpts.value;\n                const opts = Object.assign({\n                    original: false\n                    // beforePrintMethod\n                }, printOpts, options, {\n                    type: 'html',\n                    download: false,\n                    remote: false,\n                    print: true\n                });\n                return $xeTable.exportData(opts).then(({ content }) => {\n                    return {\n                        html: content\n                    };\n                });\n            },\n            closeImport() {\n                if (VxeUI.modal) {\n                    return VxeUI.modal.close('VXE_IMPORT_MODAL');\n                }\n                return Promise.resolve();\n            },\n            openImport(options) {\n                const { treeConfig, importConfig } = props;\n                const { initStore, importStore, importParams } = reactData;\n                const importOpts = computeImportOpts.value;\n                const defOpts = Object.assign({\n                    mode: 'insertTop',\n                    message: true,\n                    types: XEUtils.keys(importOpts._typeMaps),\n                    modes: ['insertTop', 'covering']\n                }, importOpts, options);\n                const types = defOpts.types || [];\n                const modes = defOpts.modes || [];\n                const isTree = !!treeConfig;\n                if (isTree) {\n                    if (defOpts.message) {\n                        if (VxeUI.modal) {\n                            VxeUI.modal.message({ content: getI18n('vxe.error.treeNotImp'), status: 'error' });\n                        }\n                    }\n                    return;\n                }\n                if (!importConfig) {\n                    errLog('vxe.error.reqProp', ['import-config']);\n                }\n                // 处理类型\n                const typeList = types.map((value) => {\n                    return {\n                        value,\n                        label: getI18n(`vxe.export.types.${value}`)\n                    };\n                });\n                const modeList = modes.map((item) => {\n                    if (item && item.value) {\n                        return {\n                            value: item.value,\n                            label: item.label || item.value\n                        };\n                    }\n                    return {\n                        value: item,\n                        label: getI18n(`vxe.import.modes.${item}`)\n                    };\n                });\n                Object.assign(importStore, {\n                    file: null,\n                    type: '',\n                    filename: '',\n                    modeList,\n                    typeList,\n                    visible: true\n                });\n                Object.assign(importParams, defOpts);\n                if (!modeList.some(item => item.value === importParams.mode)) {\n                    importParams.mode = modeList[0].value;\n                }\n                initStore.import = true;\n            },\n            closeExport: handleCloseExport,\n            openExport(options) {\n                const exportOpts = computeExportOpts.value;\n                const defOpts = Object.assign({\n                    message: true,\n                    types: XEUtils.keys(exportOpts._typeMaps)\n                }, exportOpts, options);\n                if (!props.exportConfig) {\n                    errLog('vxe.error.reqProp', ['export-config']);\n                }\n                handleExportAndPrint(defOpts);\n            },\n            closePrint: handleCloseExport,\n            openPrint(options) {\n                const printOpts = computePrintOpts.value;\n                const defOpts = Object.assign({\n                    message: true\n                }, printOpts, options);\n                if (!props.printConfig) {\n                    errLog('vxe.error.reqProp', ['print-config']);\n                }\n                handleExportAndPrint(defOpts, true);\n            }\n        };\n        return exportMethods;\n    },\n    setupGrid($xeGrid) {\n        return $xeGrid.extendTableMethods(tableExportMethodKeys);\n    }\n});\n", "// 默认导出或打印的 HTML 样式\nconst defaultHtmlStyle = 'body{margin:0;padding: 0 1px;color:#333333;font-size:14px;font-family:\"Microsoft YaHei\",微软雅黑,\"MicrosoftJhengHei\",华文细黑,STHeiti,MingLiu}body *{-webkit-box-sizing:border-box;box-sizing:border-box}.vxe-table{border-collapse:collapse;text-align:left;border-spacing:0}.vxe-table:not(.is--print){table-layout:fixed}.vxe-table,.vxe-table th,.vxe-table td,.vxe-table td{border-color:#D0D0D0;border-style:solid;border-width:0}.vxe-table.is--print{width:100%}.border--default,.border--full,.border--outer{border-top-width:1px}.border--default,.border--full,.border--outer{border-left-width:1px}.border--outer,.border--default th,.border--default td,.border--full th,.border--full td,.border--outer th,.border--inner th,.border--inner td{border-bottom-width:1px}.border--default,.border--outer,.border--full th,.border--full td{border-right-width:1px}.border--default th,.border--full th,.border--outer th{background-color:#f8f8f9}.vxe-table td>div,.vxe-table th>div{padding:.5em .4em}.col--center{text-align:center}.col--right{text-align:right}.vxe-table:not(.is--print) .col--ellipsis>div{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;word-break:break-all}.vxe-table--tree-node{text-align:left}.vxe-table--tree-node-wrapper{position:relative}.vxe-table--tree-icon-wrapper{position:absolute;top:50%;width:1em;height:1em;text-align:center;-webkit-transform:translateY(-50%);transform:translateY(-50%);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer}.vxe-table--tree-unfold-icon,.vxe-table--tree-fold-icon{position:absolute;width:0;height:0;border-style:solid;border-width:.5em;border-right-color:transparent;border-bottom-color:transparent}.vxe-table--tree-unfold-icon{left:.3em;top:0;border-left-color:#939599;border-top-color:transparent}.vxe-table--tree-fold-icon{left:0;top:.3em;border-left-color:transparent;border-top-color:#939599}.vxe-table--tree-cell{display:block;padding-left:1.5em}.vxe-table input[type=\"checkbox\"]{margin:0}.vxe-table input[type=\"checkbox\"],.vxe-table input[type=\"radio\"],.vxe-table input[type=\"checkbox\"]+span,.vxe-table input[type=\"radio\"]+span{vertical-align:middle;padding-left:0.4em}';\nexport function getExportBlobByContent(content, options) {\n    return new Blob([content], { type: `text/${options.type};charset=utf-8;` });\n}\nexport function createHtmlPage(opts, content) {\n    const { style } = opts;\n    return [\n        '<!DOCTYPE html><html>',\n        '<head>',\n        '<meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,minimal-ui\">',\n        `<title>${opts.sheetName}</title>`,\n        '<style media=\"print\">.vxe-page-break-before{page-break-before:always;}.vxe-page-break-after{page-break-after:always;}</style>',\n        `<style>${defaultHtmlStyle}</style>`,\n        style ? `<style>${style}</style>` : '',\n        '</head>',\n        `<body>${content}</body>`,\n        '</html>'\n    ].join('');\n}\n", "import XEUtils from 'xe-utils';\nimport { VxeUI } from '../../../ui';\nimport { getRefElem } from '../../src/util';\nimport { hasClass, getAbsolutePos, addClass, removeClass } from '../../../ui/src/dom';\nconst { hooks } = VxeUI;\nconst browseObj = XEUtils.browse();\nfunction getTargetOffset(target, container) {\n    let offsetTop = 0;\n    let offsetLeft = 0;\n    const triggerCheckboxLabel = !browseObj.firefox && hasClass(target, 'vxe-checkbox--label');\n    if (triggerCheckboxLabel) {\n        const checkboxLabelStyle = getComputedStyle(target);\n        offsetTop -= XEUtils.toNumber(checkboxLabelStyle.paddingTop);\n        offsetLeft -= XEUtils.toNumber(checkboxLabelStyle.paddingLeft);\n    }\n    while (target && target !== container) {\n        offsetTop += target.offsetTop;\n        offsetLeft += target.offsetLeft;\n        target = target.offsetParent;\n        if (triggerCheckboxLabel) {\n            const checkboxStyle = getComputedStyle(target);\n            offsetTop -= XEUtils.toNumber(checkboxStyle.paddingTop);\n            offsetLeft -= XEUtils.toNumber(checkboxStyle.paddingLeft);\n        }\n    }\n    return { offsetTop, offsetLeft };\n}\nhooks.add('tableKeyboardModule', {\n    setupTable($xeTable) {\n        const { props, reactData, internalData } = $xeTable;\n        const { refElem } = $xeTable.getRefMaps();\n        const { computeEditOpts, computeCheckboxOpts, computeMouseOpts, computeTreeOpts, computeRowOpts, computeColumnOpts, computeCellOpts, computeDefaultRowHeight, computeCurrentRowOpts, computeCurrentColumnOpts } = $xeTable.getComputeMaps();\n        function getCheckboxRangeRows(evnt, params, targetTrElem, trRect, offsetClientTop, moveRange) {\n            const { showOverflow } = props;\n            const { fullAllDataRowIdData, isResizeCellHeight } = internalData;\n            const rowOpts = computeRowOpts.value;\n            const cellOpts = computeCellOpts.value;\n            const defaultRowHeight = computeDefaultRowHeight.value;\n            const { row } = params;\n            let countHeight = 0;\n            let rangeRows = [];\n            let moveSize = 0;\n            const isDown = moveRange > 0;\n            const { scrollYLoad } = reactData;\n            const { afterFullData } = internalData;\n            if (isDown) {\n                moveSize = offsetClientTop + moveRange;\n            }\n            else {\n                moveSize = (trRect.height - offsetClientTop) + Math.abs(moveRange);\n            }\n            if (scrollYLoad) {\n                const _rowIndex = $xeTable.getVTRowIndex(row);\n                const isCustomCellHeight = isResizeCellHeight || cellOpts.height || rowOpts.height;\n                if (!isCustomCellHeight && showOverflow) {\n                    if (isDown) {\n                        rangeRows = afterFullData.slice(_rowIndex, _rowIndex + Math.ceil(moveSize / defaultRowHeight));\n                    }\n                    else {\n                        rangeRows = afterFullData.slice(_rowIndex - Math.floor(moveSize / defaultRowHeight), _rowIndex + 1);\n                    }\n                }\n                else {\n                    if (isDown) {\n                        for (let i = _rowIndex; i < afterFullData.length; i++) {\n                            const item = afterFullData[i];\n                            const rowid = $xeTable.getRowid(item);\n                            const rowRest = fullAllDataRowIdData[rowid] || {};\n                            countHeight += rowRest.resizeHeight || cellOpts.height || rowOpts.height || rowRest.height || defaultRowHeight;\n                            rangeRows.push(item);\n                            if (countHeight > moveSize) {\n                                return rangeRows;\n                            }\n                        }\n                    }\n                    else {\n                        for (let len = _rowIndex; len >= 0; len--) {\n                            const item = afterFullData[len];\n                            const rowid = $xeTable.getRowid(item);\n                            const rowRest = fullAllDataRowIdData[rowid] || {};\n                            countHeight += rowRest.resizeHeight || cellOpts.height || rowOpts.height || rowRest.height || defaultRowHeight;\n                            rangeRows.push(item);\n                            if (countHeight > moveSize) {\n                                return rangeRows;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                const siblingProp = isDown ? 'next' : 'previous';\n                while (targetTrElem && countHeight < moveSize) {\n                    const rowNodeRest = $xeTable.getRowNode(targetTrElem);\n                    if (rowNodeRest) {\n                        rangeRows.push(rowNodeRest.item);\n                        countHeight += targetTrElem.offsetHeight;\n                        targetTrElem = targetTrElem[`${siblingProp}ElementSibling`];\n                    }\n                }\n            }\n            return rangeRows;\n        }\n        const handleCheckboxRangeEvent = (evnt, params) => {\n            const { elemStore } = internalData;\n            const bodyScrollElem = getRefElem(elemStore['main-body-scroll']);\n            const leftScrollElem = getRefElem(elemStore['left-body-scroll']);\n            const rightScrollElem = getRefElem(elemStore['right-body-scroll']);\n            const { column, cell } = params;\n            if (column.type === 'checkbox') {\n                let bodyWrapperElem = bodyScrollElem;\n                if (leftScrollElem && column.fixed === 'left') {\n                    bodyWrapperElem = leftScrollElem;\n                }\n                else if (rightScrollElem && column.fixed === 'right') {\n                    bodyWrapperElem = rightScrollElem;\n                }\n                if (!bodyWrapperElem) {\n                    return;\n                }\n                const el = refElem.value;\n                const disX = evnt.clientX;\n                const disY = evnt.clientY;\n                const checkboxRangeElem = bodyWrapperElem.querySelector('.vxe-table--checkbox-range');\n                const trElem = cell.parentElement;\n                const selectRecords = $xeTable.getCheckboxRecords();\n                let lastRangeRows = [];\n                const marginSize = 1;\n                const offsetRest = getTargetOffset(evnt.target, bodyWrapperElem);\n                const startTop = offsetRest.offsetTop + evnt.offsetY;\n                const startLeft = offsetRest.offsetLeft + evnt.offsetX;\n                const startScrollTop = bodyWrapperElem.scrollTop;\n                const rowHeight = trElem.offsetHeight;\n                const trRect = trElem.getBoundingClientRect();\n                const offsetClientTop = disY - trRect.y;\n                let mouseScrollTimeout = null;\n                let isMouseScrollDown = false;\n                let mouseScrollSpaceSize = 1;\n                const triggerEvent = (type, evnt) => {\n                    $xeTable.dispatchEvent(`checkbox-range-${type}`, { records: $xeTable.getCheckboxRecords(), reserves: $xeTable.getCheckboxReserveRecords() }, evnt);\n                };\n                const handleChecked = (evnt) => {\n                    const { clientX, clientY } = evnt;\n                    const offsetLeft = clientX - disX;\n                    const offsetTop = clientY - disY + (bodyWrapperElem.scrollTop - startScrollTop);\n                    let rangeHeight = Math.abs(offsetTop);\n                    let rangeWidth = Math.abs(offsetLeft);\n                    let rangeTop = startTop;\n                    let rangeLeft = startLeft;\n                    if (offsetTop < marginSize) {\n                        // 向上\n                        rangeTop += offsetTop;\n                        if (rangeTop < marginSize) {\n                            rangeTop = marginSize;\n                            rangeHeight = startTop;\n                        }\n                    }\n                    else {\n                        // 向下\n                        rangeHeight = Math.min(rangeHeight, bodyWrapperElem.scrollHeight - startTop - marginSize);\n                    }\n                    if (offsetLeft < marginSize) {\n                        // 向左\n                        rangeLeft += offsetLeft;\n                        if (rangeWidth > startLeft) {\n                            rangeLeft = marginSize;\n                            rangeWidth = startLeft;\n                        }\n                    }\n                    else {\n                        // 向右\n                        rangeWidth = Math.min(rangeWidth, bodyWrapperElem.clientWidth - startLeft - marginSize);\n                    }\n                    checkboxRangeElem.style.height = `${rangeHeight}px`;\n                    checkboxRangeElem.style.width = `${rangeWidth}px`;\n                    checkboxRangeElem.style.left = `${rangeLeft}px`;\n                    checkboxRangeElem.style.top = `${rangeTop}px`;\n                    checkboxRangeElem.style.display = 'block';\n                    const rangeRows = getCheckboxRangeRows(evnt, params, trElem, trRect, offsetClientTop, offsetTop < marginSize ? -rangeHeight : rangeHeight);\n                    // 至少滑动 10px 才能有效匹配\n                    if (rangeHeight > 10 && rangeRows.length !== lastRangeRows.length) {\n                        lastRangeRows = rangeRows;\n                        if (evnt.ctrlKey) {\n                            rangeRows.forEach((row) => {\n                                $xeTable.handleBatchSelectRows([row], selectRecords.indexOf(row) === -1);\n                            });\n                        }\n                        else {\n                            $xeTable.setAllCheckboxRow(false);\n                            $xeTable.handleCheckedCheckboxRow(rangeRows, true, false);\n                        }\n                        triggerEvent('change', evnt);\n                    }\n                };\n                // 停止鼠标滚动\n                const stopMouseScroll = () => {\n                    clearTimeout(mouseScrollTimeout);\n                    mouseScrollTimeout = null;\n                };\n                // 开始鼠标滚动\n                const startMouseScroll = (evnt) => {\n                    stopMouseScroll();\n                    mouseScrollTimeout = setTimeout(() => {\n                        if (mouseScrollTimeout) {\n                            const { scrollLeft, scrollTop, clientHeight, scrollHeight } = bodyWrapperElem;\n                            const topSize = Math.ceil(mouseScrollSpaceSize * 50 / rowHeight);\n                            if (isMouseScrollDown) {\n                                if (scrollTop + clientHeight < scrollHeight) {\n                                    $xeTable.scrollTo(scrollLeft, scrollTop + topSize);\n                                    startMouseScroll(evnt);\n                                    handleChecked(evnt);\n                                }\n                                else {\n                                    stopMouseScroll();\n                                }\n                            }\n                            else {\n                                if (scrollTop) {\n                                    $xeTable.scrollTo(scrollLeft, scrollTop - topSize);\n                                    startMouseScroll(evnt);\n                                    handleChecked(evnt);\n                                }\n                                else {\n                                    stopMouseScroll();\n                                }\n                            }\n                        }\n                    }, 50);\n                };\n                addClass(el, 'drag--range');\n                document.onmousemove = evnt => {\n                    evnt.preventDefault();\n                    evnt.stopPropagation();\n                    const { clientY } = evnt;\n                    const { boundingTop } = getAbsolutePos(bodyWrapperElem);\n                    // 如果超过可视区，触发滚动\n                    if (clientY < boundingTop) {\n                        isMouseScrollDown = false;\n                        mouseScrollSpaceSize = boundingTop - clientY;\n                        if (!mouseScrollTimeout) {\n                            startMouseScroll(evnt);\n                        }\n                    }\n                    else if (clientY > boundingTop + bodyWrapperElem.clientHeight) {\n                        isMouseScrollDown = true;\n                        mouseScrollSpaceSize = clientY - boundingTop - bodyWrapperElem.clientHeight;\n                        if (!mouseScrollTimeout) {\n                            startMouseScroll(evnt);\n                        }\n                    }\n                    else if (mouseScrollTimeout) {\n                        stopMouseScroll();\n                    }\n                    handleChecked(evnt);\n                };\n                document.onmouseup = (evnt) => {\n                    stopMouseScroll();\n                    removeClass(el, 'drag--range');\n                    checkboxRangeElem.removeAttribute('style');\n                    document.onmousemove = null;\n                    document.onmouseup = null;\n                    triggerEvent('end', evnt);\n                };\n                triggerEvent('start', evnt);\n            }\n        };\n        const handleCellMousedownEvent = (evnt, params) => {\n            const { editConfig, checkboxConfig, mouseConfig } = props;\n            const checkboxOpts = computeCheckboxOpts.value;\n            const mouseOpts = computeMouseOpts.value;\n            const editOpts = computeEditOpts.value;\n            if (mouseConfig && mouseOpts.area && $xeTable.handleCellAreaMousedownEvent) {\n                return $xeTable.handleCellAreaMousedownEvent(evnt, params);\n            }\n            else {\n                if (checkboxConfig && checkboxOpts.range) {\n                    handleCheckboxRangeEvent(evnt, params);\n                }\n                if (mouseConfig && mouseOpts.selected) {\n                    if (!editConfig || editOpts.mode === 'cell') {\n                        $xeTable.handleSelected(params, evnt);\n                    }\n                }\n            }\n        };\n        const handleMoveSelected = (evnt, args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow) => {\n            const { afterFullData, visibleColumn } = internalData;\n            const params = Object.assign({}, args);\n            const _rowIndex = $xeTable.getVTRowIndex(params.row);\n            const _columnIndex = $xeTable.getVTColumnIndex(params.column);\n            evnt.preventDefault();\n            if (isUpArrow && _rowIndex > 0) {\n                // 移动到上一行\n                params.rowIndex = _rowIndex - 1;\n                params.row = afterFullData[params.rowIndex];\n            }\n            else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n                // 移动到下一行\n                params.rowIndex = _rowIndex + 1;\n                params.row = afterFullData[params.rowIndex];\n            }\n            else if (isLeftArrow && _columnIndex) {\n                // 移动到左侧单元格\n                params.columnIndex = _columnIndex - 1;\n                params.column = visibleColumn[params.columnIndex];\n            }\n            else if (isRightArrow && _columnIndex < visibleColumn.length - 1) {\n                // 移动到右侧单元格\n                params.columnIndex = _columnIndex + 1;\n                params.column = visibleColumn[params.columnIndex];\n            }\n            $xeTable.scrollToRow(params.row, params.column).then(() => {\n                params.cell = $xeTable.getCellElement(params.row, params.column);\n                $xeTable.handleSelected(params, evnt);\n            });\n            return params;\n        };\n        const keyboardMethods = {\n            // 处理 Tab 键移动\n            moveTabSelected(args, isLeft, evnt) {\n                const { editConfig } = props;\n                const { afterFullData, visibleColumn } = internalData;\n                const editOpts = computeEditOpts.value;\n                const rowOpts = computeRowOpts.value;\n                const currentRowOpts = computeCurrentRowOpts.value;\n                const columnOpts = computeColumnOpts.value;\n                const currentColumnOpts = computeCurrentColumnOpts.value;\n                let targetRow;\n                let targetRowIndex;\n                let targetColumnIndex;\n                const params = Object.assign({}, args);\n                const _rowIndex = $xeTable.getVTRowIndex(params.row);\n                const _columnIndex = $xeTable.getVTColumnIndex(params.column);\n                evnt.preventDefault();\n                if (isLeft) {\n                    // 向左\n                    if (_columnIndex <= 0) {\n                        // 如果已经是第一列，则移动到上一行\n                        if (_rowIndex > 0) {\n                            targetRowIndex = _rowIndex - 1;\n                            targetRow = afterFullData[targetRowIndex];\n                            targetColumnIndex = visibleColumn.length - 1;\n                        }\n                    }\n                    else {\n                        targetColumnIndex = _columnIndex - 1;\n                    }\n                }\n                else {\n                    if (_columnIndex >= visibleColumn.length - 1) {\n                        // 如果已经是第一列，则移动到上一行\n                        if (_rowIndex < afterFullData.length - 1) {\n                            targetRowIndex = _rowIndex + 1;\n                            targetRow = afterFullData[targetRowIndex];\n                            targetColumnIndex = 0;\n                        }\n                    }\n                    else {\n                        targetColumnIndex = _columnIndex + 1;\n                    }\n                }\n                const targetColumn = visibleColumn[targetColumnIndex];\n                if (targetColumn) {\n                    if (targetRow) {\n                        params.rowIndex = targetRowIndex;\n                        params.row = targetRow;\n                    }\n                    else {\n                        params.rowIndex = _rowIndex;\n                    }\n                    params.columnIndex = targetColumnIndex;\n                    params.column = targetColumn;\n                    params.cell = $xeTable.getCellElement(params.row, params.column);\n                    if (rowOpts.isCurrent && currentRowOpts.isFollowSelected) {\n                        $xeTable.triggerCurrentRowEvent(evnt, params);\n                    }\n                    if (columnOpts.isCurrent && currentColumnOpts.isFollowSelected) {\n                        $xeTable.triggerCurrentColumnEvent(evnt, params);\n                    }\n                    if (editConfig) {\n                        if (editOpts.trigger === 'click' || editOpts.trigger === 'dblclick') {\n                            if (editOpts.mode === 'row') {\n                                $xeTable.handleEdit(params, evnt);\n                            }\n                            else {\n                                $xeTable.scrollToRow(params.row, params.column)\n                                    .then(() => {\n                                    $xeTable.handleSelected(params, evnt);\n                                });\n                            }\n                        }\n                    }\n                    else {\n                        $xeTable.scrollToRow(params.row, params.column)\n                            .then(() => {\n                            $xeTable.handleSelected(params, evnt);\n                        });\n                    }\n                }\n            },\n            // 处理当前行方向键移动\n            moveCurrentRow(isUpArrow, isDwArrow, evnt) {\n                const { treeConfig } = props;\n                const { currentRow } = reactData;\n                const { afterFullData } = internalData;\n                const treeOpts = computeTreeOpts.value;\n                const childrenField = treeOpts.children || treeOpts.childrenField;\n                let targetRow;\n                if (currentRow) {\n                    if (treeConfig) {\n                        const { index, items } = XEUtils.findTree(afterFullData, item => item === currentRow, { children: childrenField });\n                        if (isUpArrow && index > 0) {\n                            targetRow = items[index - 1];\n                        }\n                        else if (isDwArrow && index < items.length - 1) {\n                            targetRow = items[index + 1];\n                        }\n                    }\n                    else {\n                        const _rowIndex = $xeTable.getVTRowIndex(currentRow);\n                        if (isUpArrow && _rowIndex > 0) {\n                            targetRow = afterFullData[_rowIndex - 1];\n                        }\n                        else if (isDwArrow && _rowIndex < afterFullData.length - 1) {\n                            targetRow = afterFullData[_rowIndex + 1];\n                        }\n                    }\n                }\n                else {\n                    targetRow = afterFullData[0];\n                }\n                if (targetRow) {\n                    evnt.preventDefault();\n                    const params = {\n                        $table: $xeTable,\n                        row: targetRow,\n                        rowIndex: $xeTable.getRowIndex(targetRow),\n                        $rowIndex: $xeTable.getVMRowIndex(targetRow)\n                    };\n                    $xeTable.scrollToRow(targetRow)\n                        .then(() => $xeTable.triggerCurrentRowEvent(evnt, params));\n                }\n            },\n            // 处理当前列方向键移动\n            moveCurrentColumn(isLeftArrow, isRightArrow, evnt) {\n                const { currentColumn } = reactData;\n                const { visibleColumn } = internalData;\n                let targetCol = null;\n                if (currentColumn) {\n                    const _columnIndex = $xeTable.getVTColumnIndex(currentColumn);\n                    if (isLeftArrow && _columnIndex > 0) {\n                        targetCol = visibleColumn[_columnIndex - 1];\n                    }\n                    else if (isRightArrow && _columnIndex < visibleColumn.length - 1) {\n                        targetCol = visibleColumn[_columnIndex + 1];\n                    }\n                }\n                else {\n                    targetCol = visibleColumn[0];\n                }\n                if (targetCol) {\n                    evnt.preventDefault();\n                    const params = {\n                        $table: $xeTable,\n                        column: targetCol,\n                        columnIndex: $xeTable.getColumnIndex(targetCol),\n                        $columnIndex: $xeTable.getVMColumnIndex(targetCol)\n                    };\n                    $xeTable.scrollToColumn(targetCol)\n                        .then(() => $xeTable.triggerCurrentColumnEvent(evnt, params));\n                }\n            },\n            // 处理可编辑方向键移动\n            moveArrowSelected(args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt) {\n                const { highlightCurrentRow, highlightCurrentColumn } = props;\n                const rowOpts = computeRowOpts.value;\n                const columnOpts = computeColumnOpts.value;\n                handleMoveSelected(evnt, args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow);\n                // 当前行按键上下移动\n                if ((isUpArrow || isDwArrow) && (rowOpts.isCurrent || highlightCurrentRow)) {\n                    $xeTable.moveCurrentRow(isUpArrow, isDwArrow, evnt);\n                }\n                // 当前行按键左右移动\n                if ((isLeftArrow || isRightArrow) && (columnOpts.isCurrent || highlightCurrentColumn)) {\n                    $xeTable.moveCurrentColumn(isLeftArrow, isRightArrow, evnt);\n                }\n            },\n            moveEnterSelected(args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt) {\n                const rowOpts = computeRowOpts.value;\n                const currentRowOpts = computeCurrentRowOpts.value;\n                const columnOpts = computeColumnOpts.value;\n                const currentColumnOpts = computeCurrentColumnOpts.value;\n                const params = handleMoveSelected(evnt, args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow);\n                if ((rowOpts.isCurrent && currentRowOpts.isFollowSelected)) {\n                    $xeTable.triggerCurrentRowEvent(evnt, params);\n                }\n                if (columnOpts.isCurrent && currentColumnOpts.isFollowSelected) {\n                    $xeTable.triggerCurrentColumnEvent(evnt, params);\n                }\n            },\n            // 已废弃，待删除\n            moveSelected(args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow, evnt) {\n                handleMoveSelected(evnt, args, isLeftArrow, isUpArrow, isRightArrow, isDwArrow);\n            },\n            handleCellMousedownEvent\n        };\n        return keyboardMethods;\n    }\n});\n", "import { nextTick } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../../ui';\nimport { getFuncText, eqEmptyValue } from '../../../ui/src/utils';\nimport { scrollToView } from '../../../ui/src/dom';\nimport { handleFieldOrColumn, getRowid } from '../../src/util';\nimport { warnLog, errLog } from '../../../ui/src/log';\nconst { getConfig, validators, hooks } = VxeUI;\n/**\n * 校验规则\n */\nclass Rule {\n    constructor(rule) {\n        Object.assign(this, {\n            $options: rule,\n            required: rule.required,\n            min: rule.min,\n            max: rule.max,\n            type: rule.type,\n            pattern: rule.pattern,\n            validator: rule.validator,\n            trigger: rule.trigger,\n            maxWidth: rule.maxWidth\n        });\n    }\n    /**\n     * 获取校验不通过的消息\n     * 支持国际化翻译\n     */\n    get content() {\n        return getFuncText(this.$options.content || this.$options.message);\n    }\n    get message() {\n        return this.content;\n    }\n}\nconst tableValidatorMethodKeys = ['fullValidate', 'validate', 'fullValidateField', 'validateField', 'clearValidate'];\nhooks.add('tableValidatorModule', {\n    setupTable($xeTable) {\n        const { props, reactData, internalData } = $xeTable;\n        const { refValidTooltip } = $xeTable.getRefMaps();\n        const { computeValidOpts, computeTreeOpts, computeEditOpts } = $xeTable.getComputeMaps();\n        let validatorMethods = {};\n        let validatorPrivateMethods = {};\n        let validRuleErr;\n        /**\n         * 聚焦到校验通过的单元格并弹出校验错误提示\n         */\n        const handleValidError = (params) => {\n            return new Promise(resolve => {\n                const validOpts = computeValidOpts.value;\n                if (validOpts.autoPos === false) {\n                    $xeTable.dispatchEvent('valid-error', params, null);\n                    resolve();\n                }\n                else {\n                    $xeTable.handleEdit(params, { type: 'valid-error', trigger: 'call' }).then(() => {\n                        resolve(validatorPrivateMethods.showValidTooltip(params));\n                    });\n                }\n            });\n        };\n        const handleErrMsgMode = (validErrMaps) => {\n            const validOpts = computeValidOpts.value;\n            if (validOpts.msgMode === 'single') {\n                const keys = Object.keys(validErrMaps);\n                const resMaps = {};\n                if (keys.length) {\n                    const firstKey = keys[0];\n                    resMaps[firstKey] = validErrMaps[firstKey];\n                }\n                return resMaps;\n            }\n            return validErrMaps;\n        };\n        /**\n         * 对表格数据进行校验\n         * 如果不指定数据，则默认只校验临时变动的数据，例如新增或修改\n         * 如果传 true 则校验当前表格数据\n         * 如果传 row 指定行记录，则只验证传入的行\n         * 如果传 rows 为多行记录，则只验证传入的行\n         * 如果只传 callback 否则默认验证整个表格数据\n         * 返回 Promise 对象，或者使用回调方式\n         */\n        const beginValidate = (rows, cols, cb, isFull) => {\n            const validRest = {};\n            const { editRules, treeConfig } = props;\n            const { afterFullData, pendingRowMaps, removeRowMaps } = internalData;\n            const treeOpts = computeTreeOpts.value;\n            const childrenField = treeOpts.children || treeOpts.childrenField;\n            const validOpts = computeValidOpts.value;\n            let validList;\n            if (rows === true) {\n                validList = afterFullData;\n            }\n            else if (rows) {\n                if (XEUtils.isFunction(rows)) {\n                    cb = rows;\n                }\n                else {\n                    validList = XEUtils.isArray(rows) ? rows : [rows];\n                }\n            }\n            if (!validList) {\n                if ($xeTable.getInsertRecords) {\n                    validList = $xeTable.getInsertRecords().concat($xeTable.getUpdateRecords());\n                }\n                else {\n                    validList = [];\n                }\n            }\n            const rowValidErrs = [];\n            internalData._lastCallTime = Date.now();\n            validRuleErr = false; // 如果为快速校验，当存在某列校验不通过时将终止执行\n            validatorMethods.clearValidate();\n            const validErrMaps = {};\n            if (editRules) {\n                const columns = cols && cols.length ? cols : $xeTable.getColumns();\n                const handleVaild = (row) => {\n                    const rowid = getRowid($xeTable, row);\n                    // 是否删除\n                    if (removeRowMaps[rowid]) {\n                        return;\n                    }\n                    // 是否标记删除\n                    if (pendingRowMaps[rowid]) {\n                        return;\n                    }\n                    if (isFull || !validRuleErr) {\n                        const colVailds = [];\n                        columns.forEach((column) => {\n                            const field = XEUtils.isString(column) ? column : column.field;\n                            if ((isFull || !validRuleErr) && XEUtils.has(editRules, field)) {\n                                colVailds.push(validatorPrivateMethods.validCellRules('all', row, column)\n                                    .catch(({ rule, rules }) => {\n                                    const rest = {\n                                        rule,\n                                        rules,\n                                        rowIndex: $xeTable.getRowIndex(row),\n                                        row,\n                                        columnIndex: $xeTable.getColumnIndex(column),\n                                        column,\n                                        field,\n                                        $table: $xeTable\n                                    };\n                                    if (!validRest[field]) {\n                                        validRest[field] = [];\n                                    }\n                                    validErrMaps[`${getRowid($xeTable, row)}:${column.id}`] = {\n                                        column,\n                                        row,\n                                        rule,\n                                        content: rule.content\n                                    };\n                                    validRest[field].push(rest);\n                                    if (!isFull) {\n                                        validRuleErr = true;\n                                        return Promise.reject(rest);\n                                    }\n                                }));\n                            }\n                        });\n                        rowValidErrs.push(Promise.all(colVailds));\n                    }\n                };\n                if (treeConfig) {\n                    XEUtils.eachTree(validList, handleVaild, { children: childrenField });\n                }\n                else {\n                    validList.forEach(handleVaild);\n                }\n                return Promise.all(rowValidErrs).then(() => {\n                    const ruleProps = Object.keys(validRest);\n                    reactData.validErrorMaps = handleErrMsgMode(validErrMaps);\n                    return nextTick().then(() => {\n                        if (ruleProps.length) {\n                            return Promise.reject(validRest[ruleProps[0]][0]);\n                        }\n                        if (cb) {\n                            cb();\n                        }\n                    });\n                }).catch(firstErrParams => {\n                    return new Promise((resolve, reject) => {\n                        const finish = () => {\n                            nextTick(() => {\n                                if (cb) {\n                                    cb(validRest);\n                                    resolve();\n                                }\n                                else {\n                                    if (getConfig().validToReject === 'obsolete') {\n                                        // 已废弃，校验失败将不会执行catch\n                                        reject(validRest);\n                                    }\n                                    else {\n                                        resolve(validRest);\n                                    }\n                                }\n                            });\n                        };\n                        const posAndFinish = () => {\n                            firstErrParams.cell = $xeTable.getCellElement(firstErrParams.row, firstErrParams.column);\n                            scrollToView(firstErrParams.cell);\n                            handleValidError(firstErrParams).then(finish);\n                        };\n                        /**\n                         * 当校验不通过时\n                         * 将表格滚动到可视区\n                         * 由于提示信息至少需要占一行，定位向上偏移一行\n                         */\n                        if (validOpts.autoPos === false) {\n                            finish();\n                        }\n                        else {\n                            const row = firstErrParams.row;\n                            const column = firstErrParams.column;\n                            $xeTable.scrollToRow(row, column).then(posAndFinish);\n                        }\n                    });\n                });\n            }\n            else {\n                reactData.validErrorMaps = {};\n            }\n            return nextTick().then(() => {\n                if (cb) {\n                    cb();\n                }\n            });\n        };\n        validatorMethods = {\n            /**\n             * 完整校验行，和 validate 的区别就是会给有效数据中的每一行进行校验\n             */\n            fullValidate(rows, cb) {\n                if (process.env.NODE_ENV === 'development') {\n                    if (XEUtils.isFunction(cb)) {\n                        warnLog('vxe.error.notValidators', ['fullValidate(rows, callback)', 'fullValidate(rows)']);\n                    }\n                }\n                return beginValidate(rows, null, cb, true);\n            },\n            /**\n             * 快速校验行，如果存在记录不通过的记录，则返回不再继续校验（异步校验除外）\n             */\n            validate(rows, cb) {\n                return beginValidate(rows, null, cb);\n            },\n            /**\n             * 完整校验单元格，和 validateField 的区别就是会给有效数据中的每一行进行校验\n             */\n            fullValidateField(rows, fieldOrColumn) {\n                const colList = (XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : (fieldOrColumn ? [fieldOrColumn] : [])).map(column => handleFieldOrColumn($xeTable, column));\n                if (colList.length) {\n                    return beginValidate(rows, colList, null, true);\n                }\n                return nextTick();\n            },\n            /**\n             * 快速校验单元格，如果存在记录不通过的记录，则返回不再继续校验（异步校验除外）\n             */\n            validateField(rows, fieldOrColumn) {\n                const colList = (XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : (fieldOrColumn ? [fieldOrColumn] : [])).map(column => handleFieldOrColumn($xeTable, column));\n                if (colList.length) {\n                    return beginValidate(rows, colList, null);\n                }\n                return nextTick();\n            },\n            clearValidate(rows, fieldOrColumn) {\n                const { validErrorMaps } = reactData;\n                const validTip = refValidTooltip.value;\n                const validOpts = computeValidOpts.value;\n                const rowList = XEUtils.isArray(rows) ? rows : (rows ? [rows] : []);\n                const colList = (XEUtils.isArray(fieldOrColumn) ? fieldOrColumn : (fieldOrColumn ? [fieldOrColumn] : [])).map(column => handleFieldOrColumn($xeTable, column));\n                let validErrMaps = {};\n                if (validTip && validTip.reactData.visible) {\n                    validTip.close();\n                }\n                // 如果是单个提示模式\n                if (validOpts.msgMode === 'single') {\n                    reactData.validErrorMaps = {};\n                    return nextTick();\n                }\n                if (rowList.length && colList.length) {\n                    validErrMaps = Object.assign({}, validErrorMaps);\n                    rowList.forEach(row => {\n                        colList.forEach((column) => {\n                            const validKey = `${getRowid($xeTable, row)}:${column.id}`;\n                            if (validErrMaps[validKey]) {\n                                delete validErrMaps[validKey];\n                            }\n                        });\n                    });\n                }\n                else if (rowList.length) {\n                    const rowIdList = rowList.map(row => `${getRowid($xeTable, row)}`);\n                    XEUtils.each(validErrorMaps, (item, key) => {\n                        if (rowIdList.indexOf(key.split(':')[0]) > -1) {\n                            validErrMaps[key] = item;\n                        }\n                    });\n                }\n                else if (colList.length) {\n                    const colidList = colList.map(column => `${column.id}`);\n                    XEUtils.each(validErrorMaps, (item, key) => {\n                        if (colidList.indexOf(key.split(':')[1]) > -1) {\n                            validErrMaps[key] = item;\n                        }\n                    });\n                }\n                reactData.validErrorMaps = validErrMaps;\n                return nextTick();\n            }\n        };\n        const validErrorRuleValue = (rule, val) => {\n            const { type, min, max, pattern } = rule;\n            const isNumType = type === 'number';\n            const numVal = isNumType ? XEUtils.toNumber(val) : XEUtils.getSize(val);\n            // 判断数值\n            if (isNumType && isNaN(val)) {\n                return true;\n            }\n            // 如果存在 min，判断最小值\n            if (!XEUtils.eqNull(min) && numVal < XEUtils.toNumber(min)) {\n                return true;\n            }\n            // 如果存在 max，判断最大值\n            if (!XEUtils.eqNull(max) && numVal > XEUtils.toNumber(max)) {\n                return true;\n            }\n            // 如果存在 pattern，正则校验\n            if (pattern && !(XEUtils.isRegExp(pattern) ? pattern : new RegExp(pattern)).test(val)) {\n                return true;\n            }\n            return false;\n        };\n        validatorPrivateMethods = {\n            /**\n             * 校验数据\n             * 按表格行、列顺序依次校验（同步或异步）\n             * 校验规则根据索引顺序依次校验，如果是异步则会等待校验完成才会继续校验下一列\n             * 如果校验失败则，触发回调或者Promise<不通过列的错误消息>\n             * 如果是传回调方式这返回一个校验不通过列的错误消息\n             *\n             * rule 配置：\n             *  required=Boolean 是否必填\n             *  min=Number 最小长度\n             *  max=Number 最大长度\n             *  validator=Function({ cellValue, rule, rules, row, column, rowIndex, columnIndex }) 自定义校验，接收一个 Promise\n             *  trigger=blur|change 触发方式（除非特殊场景，否则默认为空就行）\n             */\n            validCellRules(validType, row, column, val) {\n                const $xeGrid = $xeTable.xeGrid;\n                const { editRules } = props;\n                const { field } = column;\n                const errorRules = [];\n                const syncValidList = [];\n                if (field && editRules) {\n                    const rules = XEUtils.get(editRules, field);\n                    if (rules) {\n                        const cellValue = XEUtils.isUndefined(val) ? XEUtils.get(row, field) : val;\n                        rules.forEach((rule) => {\n                            const { type, trigger, required, validator } = rule;\n                            if (validType === 'all' || !trigger || validType === trigger) {\n                                if (validator) {\n                                    const validParams = {\n                                        cellValue,\n                                        rule,\n                                        rules,\n                                        row,\n                                        rowIndex: $xeTable.getRowIndex(row),\n                                        column,\n                                        columnIndex: $xeTable.getColumnIndex(column),\n                                        field: column.field,\n                                        $table: $xeTable,\n                                        $grid: $xeGrid\n                                    };\n                                    let customValid;\n                                    if (XEUtils.isString(validator)) {\n                                        const gvItem = validators.get(validator);\n                                        if (gvItem) {\n                                            const tcvMethod = gvItem.tableCellValidatorMethod || gvItem.cellValidatorMethod;\n                                            if (tcvMethod) {\n                                                customValid = tcvMethod(validParams);\n                                            }\n                                            else {\n                                                if (process.env.NODE_ENV === 'development') {\n                                                    warnLog('vxe.error.notValidators', [validator]);\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            errLog('vxe.error.notValidators', [validator]);\n                                        }\n                                    }\n                                    else {\n                                        customValid = validator(validParams);\n                                    }\n                                    if (customValid) {\n                                        if (XEUtils.isError(customValid)) {\n                                            validRuleErr = true;\n                                            errorRules.push(new Rule({ type: 'custom', trigger, content: customValid.message, rule: new Rule(rule) }));\n                                        }\n                                        else if (customValid.catch) {\n                                            // 如果为异步校验（注：异步校验是并发无序的）\n                                            syncValidList.push(customValid.catch((e) => {\n                                                validRuleErr = true;\n                                                errorRules.push(new Rule({ type: 'custom', trigger, content: e && e.message ? e.message : (rule.content || rule.message), rule: new Rule(rule) }));\n                                            }));\n                                        }\n                                    }\n                                }\n                                else {\n                                    const isArrType = type === 'array';\n                                    const isArrVal = XEUtils.isArray(cellValue);\n                                    let hasEmpty = true;\n                                    if (isArrType || isArrVal) {\n                                        hasEmpty = !isArrVal || !cellValue.length;\n                                    }\n                                    else if (XEUtils.isString(cellValue)) {\n                                        hasEmpty = eqEmptyValue(cellValue.trim());\n                                    }\n                                    else {\n                                        hasEmpty = eqEmptyValue(cellValue);\n                                    }\n                                    if (required ? (hasEmpty || validErrorRuleValue(rule, cellValue)) : (!hasEmpty && validErrorRuleValue(rule, cellValue))) {\n                                        validRuleErr = true;\n                                        errorRules.push(new Rule(rule));\n                                    }\n                                }\n                            }\n                        });\n                    }\n                }\n                return Promise.all(syncValidList).then(() => {\n                    if (errorRules.length) {\n                        const rest = { rules: errorRules, rule: errorRules[0] };\n                        return Promise.reject(rest);\n                    }\n                });\n            },\n            hasCellRules(type, row, column) {\n                const { editRules } = props;\n                const { field } = column;\n                if (field && editRules) {\n                    const rules = XEUtils.get(editRules, field);\n                    return rules && !!XEUtils.find(rules, rule => type === 'all' || !rule.trigger || type === rule.trigger);\n                }\n                return false;\n            },\n            /**\n             * 触发校验\n             */\n            triggerValidate(type) {\n                const { editConfig, editRules } = props;\n                const { editStore } = reactData;\n                const { actived } = editStore;\n                const editOpts = computeEditOpts.value;\n                const validOpts = computeValidOpts.value;\n                // 检查清除校验消息\n                if (editRules && validOpts.msgMode === 'single') {\n                    reactData.validErrorMaps = {};\n                }\n                // 校验单元格\n                if (editConfig && editRules && actived.row) {\n                    const { row, column, cell } = actived.args;\n                    if (validatorPrivateMethods.hasCellRules(type, row, column)) {\n                        return validatorPrivateMethods.validCellRules(type, row, column).then(() => {\n                            if (editOpts.mode === 'row') {\n                                validatorMethods.clearValidate(row, column);\n                            }\n                        }).catch(({ rule }) => {\n                            // 如果校验不通过与触发方式一致，则聚焦提示错误，否则跳过并不作任何处理\n                            if (!rule.trigger || type === rule.trigger) {\n                                const rest = { rule, row, column, cell };\n                                validatorPrivateMethods.showValidTooltip(rest);\n                                return Promise.reject(rest);\n                            }\n                            return Promise.resolve();\n                        });\n                    }\n                }\n                return Promise.resolve();\n            },\n            /**\n             * 弹出校验错误提示\n             */\n            showValidTooltip(params) {\n                const { height } = props;\n                const { tableData, validStore, validErrorMaps } = reactData;\n                const { rule, row, column, cell } = params;\n                const validOpts = computeValidOpts.value;\n                const validTip = refValidTooltip.value;\n                const content = rule.content;\n                validStore.visible = true;\n                if (validOpts.msgMode === 'single') {\n                    reactData.validErrorMaps = {\n                        [`${getRowid($xeTable, row)}:${column.id}`]: {\n                            column,\n                            row,\n                            rule,\n                            content\n                        }\n                    };\n                }\n                else {\n                    reactData.validErrorMaps = Object.assign({}, validErrorMaps, {\n                        [`${getRowid($xeTable, row)}:${column.id}`]: {\n                            column,\n                            row,\n                            rule,\n                            content\n                        }\n                    });\n                }\n                $xeTable.dispatchEvent('valid-error', params, null);\n                if (validTip) {\n                    if (validTip && (validOpts.message === 'tooltip' || (validOpts.message === 'default' && !height && tableData.length < 2))) {\n                        return validTip.open(cell, content);\n                    }\n                }\n                return nextTick();\n            }\n        };\n        return Object.assign(Object.assign({}, validatorMethods), validatorPrivateMethods);\n    },\n    setupGrid($xeGrid) {\n        return $xeGrid.extendTableMethods(tableValidatorMethodKeys);\n    }\n});\n", "import { nextTick } from 'vue';\nimport { VxeUI } from '../../../ui';\nimport XEUtils from 'xe-utils';\nconst tableCustomMethodKeys = ['openCustom', 'closeCustom', 'saveCustom', 'cancelCustom', 'resetCustom', 'toggleCustomAllCheckbox', 'setCustomAllCheckbox'];\nVxeUI.hooks.add('tableCustomModule', {\n    setupTable($xeTable) {\n        const { reactData, internalData } = $xeTable;\n        const { computeCustomOpts } = $xeTable.getComputeMaps();\n        const { refElem } = $xeTable.getRefMaps();\n        const $xeGrid = $xeTable.xeGrid;\n        const calcMaxHeight = () => {\n            const { customStore } = reactData;\n            const el = refElem.value;\n            // 判断面板不能大于表格高度\n            let tableHeight = 0;\n            if (el) {\n                tableHeight = el.clientHeight - 28;\n            }\n            customStore.maxHeight = Math.max(88, tableHeight);\n        };\n        const openCustom = () => {\n            const { initStore, customStore } = reactData;\n            customStore.visible = true;\n            initStore.custom = true;\n            handleUpdateCustomColumn();\n            checkCustomStatus();\n            calcMaxHeight();\n            return nextTick().then(() => calcMaxHeight());\n        };\n        const handleUpdateCustomColumn = () => {\n            const { customStore } = reactData;\n            const { collectColumn } = internalData;\n            if (customStore.visible) {\n                const sortMaps = {};\n                const fixedMaps = {};\n                const visibleMaps = {};\n                XEUtils.eachTree(collectColumn, column => {\n                    const colid = column.getKey();\n                    column.renderFixed = column.fixed;\n                    column.renderVisible = column.visible;\n                    column.renderResizeWidth = column.renderWidth;\n                    sortMaps[colid] = column.renderSortNumber;\n                    fixedMaps[colid] = column.fixed;\n                    visibleMaps[colid] = column.visible;\n                });\n                customStore.oldSortMaps = sortMaps;\n                customStore.oldFixedMaps = fixedMaps;\n                customStore.oldVisibleMaps = visibleMaps;\n                reactData.customColumnList = collectColumn.slice(0);\n            }\n        };\n        const closeCustom = () => {\n            const { customStore } = reactData;\n            const customOpts = computeCustomOpts.value;\n            if (customStore.visible) {\n                customStore.visible = false;\n                if (!customOpts.immediate) {\n                    $xeTable.handleCustom();\n                }\n            }\n            return nextTick();\n        };\n        const saveCustom = () => {\n            const { customColumnList } = reactData;\n            const customOpts = computeCustomOpts.value;\n            const { allowVisible, allowSort, allowFixed, allowResizable } = customOpts;\n            XEUtils.eachTree(customColumnList, (column, index, items, path, parentColumn) => {\n                if (parentColumn) {\n                    // 更新子列信息\n                    column.fixed = parentColumn.fixed;\n                }\n                else {\n                    if (allowSort) {\n                        const sortIndex = index + 1;\n                        column.renderSortNumber = sortIndex;\n                    }\n                    if (allowFixed) {\n                        column.fixed = column.renderFixed;\n                    }\n                }\n                if (allowResizable) {\n                    if (column.renderVisible && (!column.children || column.children.length)) {\n                        if (column.renderResizeWidth !== column.renderWidth) {\n                            column.resizeWidth = column.renderResizeWidth;\n                            column.renderWidth = column.renderResizeWidth;\n                        }\n                    }\n                }\n                if (allowVisible) {\n                    column.visible = column.renderVisible;\n                }\n            });\n            reactData.isCustomStatus = true;\n            reactData.isDragColMove = true;\n            setTimeout(() => {\n                reactData.isDragColMove = false;\n            }, 1000);\n            return $xeTable.saveCustomStore('confirm');\n        };\n        const cancelCustom = () => {\n            const { customColumnList, customStore } = reactData;\n            const { oldSortMaps, oldFixedMaps, oldVisibleMaps } = customStore;\n            const customOpts = computeCustomOpts.value;\n            const { allowVisible, allowSort, allowFixed, allowResizable } = customOpts;\n            XEUtils.eachTree(customColumnList, column => {\n                const colid = column.getKey();\n                const visible = !!oldVisibleMaps[colid];\n                const fixed = oldFixedMaps[colid] || '';\n                if (allowVisible) {\n                    column.renderVisible = visible;\n                    column.visible = visible;\n                }\n                if (allowFixed) {\n                    column.renderFixed = fixed;\n                    column.fixed = fixed;\n                }\n                if (allowSort) {\n                    column.renderSortNumber = oldSortMaps[colid] || 0;\n                }\n                if (allowResizable) {\n                    column.renderResizeWidth = column.renderWidth;\n                }\n            }, { children: 'children' });\n            return nextTick();\n        };\n        const setCustomAllCheckbox = (checked) => {\n            const { customStore } = reactData;\n            const { customColumnList } = reactData;\n            const customOpts = computeCustomOpts.value;\n            const { checkMethod, visibleMethod } = customOpts;\n            const isAll = !!checked;\n            if (customOpts.immediate) {\n                XEUtils.eachTree(customColumnList, (column) => {\n                    if (visibleMethod && !visibleMethod({ column })) {\n                        return;\n                    }\n                    if (checkMethod && !checkMethod({ column })) {\n                        return;\n                    }\n                    column.visible = isAll;\n                    column.renderVisible = isAll;\n                    column.halfVisible = false;\n                });\n                customStore.isAll = isAll;\n                reactData.isCustomStatus = true;\n                $xeTable.handleCustom();\n                $xeTable.saveCustomStore('update:visible');\n            }\n            else {\n                XEUtils.eachTree(customColumnList, (column) => {\n                    if (visibleMethod && !visibleMethod({ column })) {\n                        return;\n                    }\n                    if (checkMethod && !checkMethod({ column })) {\n                        return;\n                    }\n                    column.renderVisible = isAll;\n                    column.halfVisible = false;\n                });\n                customStore.isAll = isAll;\n            }\n            $xeTable.checkCustomStatus();\n            return nextTick();\n        };\n        const customMethods = {\n            openCustom,\n            closeCustom,\n            saveCustom,\n            cancelCustom,\n            resetCustom(options) {\n                const { collectColumn } = internalData;\n                const customOpts = computeCustomOpts.value;\n                const { checkMethod } = customOpts;\n                const opts = Object.assign({\n                    visible: true,\n                    resizable: options === true,\n                    fixed: options === true,\n                    sort: options === true\n                }, options);\n                XEUtils.eachTree(collectColumn, (column) => {\n                    if (opts.resizable) {\n                        column.resizeWidth = 0;\n                    }\n                    if (opts.fixed) {\n                        column.fixed = column.defaultFixed;\n                    }\n                    if (opts.sort) {\n                        column.renderSortNumber = column.sortNumber;\n                    }\n                    if (!checkMethod || checkMethod({ column })) {\n                        column.visible = column.defaultVisible;\n                    }\n                    column.renderResizeWidth = column.renderWidth;\n                });\n                reactData.isCustomStatus = false;\n                $xeTable.saveCustomStore('reset');\n                return $xeTable.handleCustom();\n            },\n            toggleCustomAllCheckbox() {\n                const { customStore } = reactData;\n                const isAll = !customStore.isAll;\n                return setCustomAllCheckbox(isAll);\n            },\n            setCustomAllCheckbox\n        };\n        const checkCustomStatus = () => {\n            const { customStore } = reactData;\n            const { collectColumn } = internalData;\n            const customOpts = computeCustomOpts.value;\n            const { checkMethod } = customOpts;\n            customStore.isAll = collectColumn.every((column) => (checkMethod ? !checkMethod({ column }) : false) || column.renderVisible);\n            customStore.isIndeterminate = !customStore.isAll && collectColumn.some((column) => (!checkMethod || checkMethod({ column })) && (column.renderVisible || column.halfVisible));\n        };\n        const emitCustomEvent = (type, evnt) => {\n            const comp = $xeGrid || $xeTable;\n            comp.dispatchEvent('custom', { type }, evnt);\n        };\n        const customPrivateMethods = {\n            checkCustomStatus,\n            emitCustomEvent,\n            triggerCustomEvent(evnt) {\n                const { customStore } = $xeTable.reactData;\n                if (customStore.visible) {\n                    closeCustom();\n                    emitCustomEvent('close', evnt);\n                }\n                else {\n                    customStore.btnEl = evnt.target;\n                    openCustom();\n                    emitCustomEvent('open', evnt);\n                }\n            },\n            customOpenEvent(evnt) {\n                const { customStore } = reactData;\n                if (!customStore.visible) {\n                    customStore.activeBtn = true;\n                    customStore.btnEl = evnt.target;\n                    $xeTable.openCustom();\n                    $xeTable.emitCustomEvent('open', evnt);\n                }\n            },\n            customCloseEvent(evnt) {\n                const { customStore } = reactData;\n                if (customStore.visible) {\n                    customStore.activeBtn = false;\n                    $xeTable.closeCustom();\n                    $xeTable.emitCustomEvent('close', evnt);\n                }\n            },\n            handleUpdateCustomColumn\n        };\n        return Object.assign(Object.assign({}, customMethods), customPrivateMethods);\n    },\n    setupGrid($xeGrid) {\n        return $xeGrid.extendTableMethods(tableCustomMethodKeys);\n    }\n});\n", "import { h, resolveComponent } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { VxeUI } from '../../ui';\nimport { getCellValue, setCellValue } from '../../table/src/util';\nimport { getFuncText, formatText, isEmptyValue } from '../../ui/src/utils';\nimport { getOnName, getModelEvent, getChangeEvent } from '../../ui/src/vn';\nimport { errLog } from '../../ui/src/log';\nconst { getConfig, renderer, getI18n, getComponent } = VxeUI;\nconst componentDefaultModelProp = 'modelValue';\nconst defaultCompProps = {};\nfunction handleDefaultValue(value, defaultVal, initVal) {\n    return XEUtils.eqNull(value) ? (XEUtils.eqNull(defaultVal) ? initVal : defaultVal) : value;\n}\nfunction parseDate(value, props) {\n    return value && props.valueFormat ? XEUtils.toStringDate(value, props.valueFormat) : value;\n}\nfunction getFormatDate(value, props, defaultFormat) {\n    const { dateConfig = {} } = props;\n    return XEUtils.toDateString(parseDate(value, props), dateConfig.labelFormat || defaultFormat);\n}\nfunction getLabelFormatDate(value, props) {\n    return getFormatDate(value, props, getI18n(`vxe.input.date.labelFormat.${props.type || 'date'}`));\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction getOldComponentName(name) {\n    return `vxe-${name.replace('$', '')}`;\n}\nfunction getDefaultComponent({ name }) {\n    return getComponent(name);\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction getOldComponent({ name }) {\n    return resolveComponent(getOldComponentName(name));\n}\nfunction handleConfirmFilter(params, checked, option) {\n    const { $panel } = params;\n    $panel.changeOption({}, checked, option);\n}\nfunction getNativeAttrs(renderOpts) {\n    let { name, attrs } = renderOpts;\n    if (name === 'input') {\n        attrs = Object.assign({ type: 'text' }, attrs);\n    }\n    return attrs;\n}\nfunction getInputImmediateModel(renderOpts) {\n    const { name, immediate, props } = renderOpts;\n    if (!immediate) {\n        if (name === 'VxeInput' || name === '$input') {\n            const { type } = props || {};\n            return !(!type || type === 'text' || type === 'number' || type === 'integer' || type === 'float');\n        }\n        if (name === 'input' || name === 'textarea' || name === '$textarea') {\n            return false;\n        }\n        return true;\n    }\n    return immediate;\n}\nfunction getCellEditProps(renderOpts, params, value, defaultProps) {\n    return XEUtils.assign({ immediate: getInputImmediateModel(renderOpts) }, defaultCompProps, defaultProps, renderOpts.props, { [componentDefaultModelProp]: value });\n}\nfunction getCellEditFilterProps(renderOpts, params, value, defaultProps) {\n    return XEUtils.assign({}, defaultCompProps, defaultProps, renderOpts.props, { [componentDefaultModelProp]: value });\n}\nfunction isImmediateCell(renderOpts, params) {\n    return params.$type === 'cell' || getInputImmediateModel(renderOpts);\n}\nfunction getCellLabelVNs(renderOpts, params, cellLabel, opts) {\n    const { placeholder } = renderOpts;\n    return [\n        h('span', {\n            class: ['vxe-cell--label', opts ? opts.class : '']\n        }, placeholder && isEmptyValue(cellLabel)\n            ? [\n                h('span', {\n                    class: 'vxe-cell--placeholder'\n                }, formatText(getFuncText(placeholder), 1))\n            ]\n            : formatText(cellLabel, 1))\n    ];\n}\n/**\n * 原生事件处理\n * @param renderOpts\n * @param params\n * @param modelFunc\n * @param changeFunc\n */\nfunction getNativeElementOns(renderOpts, params, eFns) {\n    const { events } = renderOpts;\n    const modelEvent = getModelEvent(renderOpts);\n    const changeEvent = getChangeEvent(renderOpts);\n    const { model: modelFunc, change: changeFunc, blur: blurFunc } = eFns || {};\n    const isSameEvent = changeEvent === modelEvent;\n    const ons = {};\n    if (events) {\n        XEUtils.objectEach(events, (func, key) => {\n            ons[getOnName(key)] = function (...args) {\n                func(params, ...args);\n            };\n        });\n    }\n    if (modelFunc) {\n        ons[getOnName(modelEvent)] = function (targetEvnt) {\n            modelFunc(targetEvnt);\n            if (isSameEvent && changeFunc) {\n                changeFunc(targetEvnt);\n            }\n            if (events && events[modelEvent]) {\n                events[modelEvent](params, targetEvnt);\n            }\n        };\n    }\n    if (!isSameEvent && changeFunc) {\n        ons[getOnName(changeEvent)] = function (evnt) {\n            changeFunc(evnt);\n            if (events && events[changeEvent]) {\n                events[changeEvent](params, evnt);\n            }\n        };\n    }\n    if (blurFunc) {\n        ons[getOnName(blurEvent)] = function (evnt) {\n            blurFunc(evnt);\n            if (events && events[blurEvent]) {\n                events[blurEvent](params, evnt);\n            }\n        };\n    }\n    return ons;\n}\nconst blurEvent = 'blur';\n/**\n * 组件事件处理\n * @param renderOpts\n * @param params\n * @param modelFunc\n * @param changeFunc\n */\nfunction getComponentOns(renderOpts, params, eFns) {\n    const { events } = renderOpts;\n    const modelEvent = getModelEvent(renderOpts);\n    const changeEvent = getChangeEvent(renderOpts);\n    const { model: modelFunc, change: changeFunc, blur: blurFunc } = eFns || {};\n    const ons = {};\n    XEUtils.objectEach(events, (func, key) => {\n        ons[getOnName(key)] = function (...args) {\n            if (!XEUtils.isFunction(func)) {\n                errLog('vxe.error.errFunc', [func]);\n            }\n            func(params, ...args);\n        };\n    });\n    if (modelFunc) {\n        ons[getOnName(modelEvent)] = function (targetEvnt) {\n            modelFunc(targetEvnt);\n            if (events && events[modelEvent]) {\n                events[modelEvent](params, targetEvnt);\n            }\n        };\n    }\n    if (changeFunc) {\n        ons[getOnName(changeEvent)] = function (...args) {\n            changeFunc(...args);\n            if (events && events[changeEvent]) {\n                events[changeEvent](params, ...args);\n            }\n        };\n    }\n    if (blurFunc) {\n        ons[getOnName(blurEvent)] = function (...args) {\n            blurFunc(...args);\n            if (events && events[blurEvent]) {\n                events[blurEvent](params, ...args);\n            }\n        };\n    }\n    return ons;\n}\nfunction getEditOns(renderOpts, params) {\n    const { $table, row, column } = params;\n    const { name } = renderOpts;\n    const { model } = column;\n    const isImmediate = isImmediateCell(renderOpts, params);\n    return getComponentOns(renderOpts, params, {\n        model(cellValue) {\n            // 处理 model 值双向绑定\n            model.update = true;\n            model.value = cellValue;\n            if (isImmediate) {\n                setCellValue(row, column, cellValue);\n            }\n        },\n        change(eventParams) {\n            // 处理 change 事件相关逻辑\n            if (!isImmediate && name && (['VxeInput', 'VxeNumberInput', 'VxeTextarea', '$input', '$textarea'].includes(name))) {\n                const cellValue = eventParams.value;\n                model.update = true;\n                model.value = cellValue;\n                $table.updateStatus(params, cellValue);\n            }\n            else {\n                $table.updateStatus(params);\n            }\n        },\n        blur() {\n            if (isImmediate) {\n                $table.handleCellRuleUpdateStatus('blur', params);\n            }\n            else {\n                $table.handleCellRuleUpdateStatus('blur', params, model.value);\n            }\n        }\n    });\n}\nfunction getFilterOns(renderOpts, params, option) {\n    return getComponentOns(renderOpts, params, {\n        model(value) {\n            // 处理 model 值双向绑定\n            option.data = value;\n        },\n        change() {\n            handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n        },\n        blur() {\n            handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n        }\n    });\n}\nfunction getNativeEditOns(renderOpts, params) {\n    const { $table, row, column } = params;\n    const { model } = column;\n    return getNativeElementOns(renderOpts, params, {\n        model(evnt) {\n            // 处理 model 值双向绑定\n            const targetEl = evnt.target;\n            if (targetEl) {\n                const cellValue = targetEl.value;\n                if (isImmediateCell(renderOpts, params)) {\n                    setCellValue(row, column, cellValue);\n                }\n                else {\n                    model.update = true;\n                    model.value = cellValue;\n                }\n            }\n        },\n        change(evnt) {\n            // 处理 change 事件相关逻辑\n            const targetEl = evnt.target;\n            if (targetEl) {\n                const cellValue = targetEl.value;\n                $table.updateStatus(params, cellValue);\n            }\n        },\n        blur(evnt) {\n            const targetEl = evnt.target;\n            if (targetEl) {\n                const cellValue = targetEl.value;\n                $table.updateStatus(params, cellValue);\n            }\n        }\n    });\n}\nfunction getNativeFilterOns(renderOpts, params, option) {\n    return getNativeElementOns(renderOpts, params, {\n        model(evnt) {\n            // 处理 model 值双向绑定\n            const targetEl = evnt.target;\n            if (targetEl) {\n                option.data = targetEl.value;\n            }\n        },\n        change() {\n            handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n        },\n        blur() {\n            handleConfirmFilter(params, !XEUtils.eqNull(option.data), option);\n        }\n    });\n}\n/**\n * 单元格可编辑渲染-原生的标签\n * input、textarea、select\n */\nfunction nativeEditRender(renderOpts, params) {\n    const { row, column } = params;\n    const { name } = renderOpts;\n    const cellValue = isImmediateCell(renderOpts, params) ? getCellValue(row, column) : column.model.value;\n    return [\n        h(name, Object.assign(Object.assign(Object.assign({ class: `vxe-default-${name}` }, getNativeAttrs(renderOpts)), { value: cellValue }), getNativeEditOns(renderOpts, params)))\n    ];\n}\nfunction buttonCellRender(renderOpts, params) {\n    return [\n        h(getDefaultComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, null)), getComponentOns(renderOpts, params)))\n    ];\n}\nfunction defaultEditRender(renderOpts, params) {\n    const { row, column } = params;\n    const cellValue = getCellValue(row, column);\n    return [\n        h(getDefaultComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, cellValue)), getEditOns(renderOpts, params)))\n    ];\n}\nfunction radioAndCheckboxEditRender(renderOpts, params) {\n    const { options } = renderOpts;\n    const { row, column } = params;\n    const cellValue = getCellValue(row, column);\n    return [\n        h(getDefaultComponent(renderOpts), Object.assign(Object.assign({ options }, getCellEditProps(renderOpts, params, cellValue)), getEditOns(renderOpts, params)))\n    ];\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction oldEditRender(renderOpts, params) {\n    const { row, column } = params;\n    const cellValue = getCellValue(row, column);\n    return [\n        h(getOldComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, cellValue)), getEditOns(renderOpts, params)))\n    ];\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction oldButtonEditRender(renderOpts, params) {\n    return [\n        h(getComponent('vxe-button'), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, null)), getComponentOns(renderOpts, params)))\n    ];\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction oldButtonsEditRender(renderOpts, params) {\n    return renderOpts.children.map((childRenderOpts) => oldButtonEditRender(childRenderOpts, params)[0]);\n}\nfunction renderNativeOptgroups(renderOpts, params, renderOptionsMethods) {\n    const { optionGroups, optionGroupProps = {} } = renderOpts;\n    const groupOptions = optionGroupProps.options || 'options';\n    const groupLabel = optionGroupProps.label || 'label';\n    return optionGroups.map((group, gIndex) => {\n        return h('optgroup', {\n            key: gIndex,\n            label: group[groupLabel]\n        }, renderOptionsMethods(group[groupOptions], renderOpts, params));\n    });\n}\n/**\n * 渲染原生的 option 标签\n */\nfunction renderNativeOptions(options, renderOpts, params) {\n    const { optionProps = {} } = renderOpts;\n    const { row, column } = params;\n    const labelProp = optionProps.label || 'label';\n    const valueProp = optionProps.value || 'value';\n    const disabledProp = optionProps.disabled || 'disabled';\n    const cellValue = isImmediateCell(renderOpts, params) ? getCellValue(row, column) : column.model.value;\n    return options.map((option, oIndex) => {\n        return h('option', {\n            key: oIndex,\n            value: option[valueProp],\n            disabled: option[disabledProp],\n            /* eslint-disable eqeqeq */\n            selected: option[valueProp] == cellValue\n        }, option[labelProp]);\n    });\n}\nfunction nativeFilterRender(renderOpts, params) {\n    const { column } = params;\n    const { name } = renderOpts;\n    const attrs = getNativeAttrs(renderOpts);\n    return column.filters.map((option, oIndex) => {\n        return h(name, Object.assign(Object.assign(Object.assign({ key: oIndex, class: `vxe-default-${name}` }, attrs), { value: option.data }), getNativeFilterOns(renderOpts, params, option)));\n    });\n}\nfunction defaultFilterRender(renderOpts, params) {\n    const { column } = params;\n    return column.filters.map((option, oIndex) => {\n        const optionValue = option.data;\n        return h(getDefaultComponent(renderOpts), Object.assign(Object.assign({ key: oIndex }, getCellEditFilterProps(renderOpts, renderOpts, optionValue)), getFilterOns(renderOpts, params, option)));\n    });\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction oldFilterRender(renderOpts, params) {\n    const { column } = params;\n    return column.filters.map((option, oIndex) => {\n        const optionValue = option.data;\n        return h(getOldComponent(renderOpts), Object.assign(Object.assign({ key: oIndex }, getCellEditFilterProps(renderOpts, renderOpts, optionValue)), getFilterOns(renderOpts, params, option)));\n    });\n}\nfunction handleFilterMethod({ option, row, column }) {\n    const { data } = option;\n    const cellValue = XEUtils.get(row, column.field);\n    /* eslint-disable eqeqeq */\n    return cellValue == data;\n}\nfunction handleInputFilterMethod({ option, row, column }) {\n    const { data } = option;\n    const cellValue = XEUtils.get(row, column.field);\n    /* eslint-disable eqeqeq */\n    return XEUtils.toValueString(cellValue).indexOf(data) > -1;\n}\nfunction nativeSelectEditRender(renderOpts, params) {\n    return [\n        h('select', Object.assign(Object.assign({ class: 'vxe-default-select' }, getNativeAttrs(renderOpts)), getNativeEditOns(renderOpts, params)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeOptions) : renderNativeOptions(renderOpts.options, renderOpts, params))\n    ];\n}\nfunction defaultSelectEditRender(renderOpts, params) {\n    const { row, column } = params;\n    const { options, optionProps, optionGroups, optionGroupProps } = renderOpts;\n    const cellValue = getCellValue(row, column);\n    return [\n        h(getDefaultComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, cellValue, { options, optionProps, optionGroups, optionGroupProps })), getEditOns(renderOpts, params)))\n    ];\n}\nfunction defaultTableOrTreeSelectEditRender(renderOpts, params) {\n    const { row, column } = params;\n    const { options, optionProps } = renderOpts;\n    const cellValue = getCellValue(row, column);\n    return [\n        h(getDefaultComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, cellValue, { options, optionProps })), getEditOns(renderOpts, params)))\n    ];\n}\n/**\n * 已废弃\n * @deprecated\n */\nfunction oldSelectEditRender(renderOpts, params) {\n    const { row, column } = params;\n    const { options, optionProps, optionGroups, optionGroupProps } = renderOpts;\n    const cellValue = getCellValue(row, column);\n    return [\n        h(getOldComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, cellValue, { options, optionProps, optionGroups, optionGroupProps })), getEditOns(renderOpts, params)))\n    ];\n}\nfunction getSelectCellValue(renderOpts, { row, column }) {\n    const { options, optionGroups, optionProps = {}, optionGroupProps = {} } = renderOpts;\n    const cellValue = XEUtils.get(row, column.field);\n    let selectItem;\n    const labelProp = optionProps.label || 'label';\n    const valueProp = optionProps.value || 'value';\n    if (!(cellValue === null || cellValue === undefined)) {\n        return XEUtils.map(XEUtils.isArray(cellValue) ? cellValue : [cellValue], optionGroups\n            ? (value) => {\n                const groupOptions = optionGroupProps.options || 'options';\n                for (let index = 0; index < optionGroups.length; index++) {\n                    /* eslint-disable eqeqeq */\n                    selectItem = XEUtils.find(optionGroups[index][groupOptions], item => item[valueProp] == value);\n                    if (selectItem) {\n                        break;\n                    }\n                }\n                return selectItem ? selectItem[labelProp] : value;\n            }\n            : (value) => {\n                /* eslint-disable eqeqeq */\n                selectItem = XEUtils.find(options, item => item[valueProp] == value);\n                return selectItem ? selectItem[labelProp] : value;\n            }).join(', ');\n    }\n    return '';\n}\nfunction handleExportSelectMethod(params) {\n    const { row, column, options } = params;\n    return options.original ? getCellValue(row, column) : getSelectCellValue(column.editRender || column.cellRender, params);\n}\nfunction getTreeSelectCellValue(renderOpts, { row, column }) {\n    const { options, optionProps = {} } = renderOpts;\n    const cellValue = XEUtils.get(row, column.field);\n    const labelProp = optionProps.label || 'label';\n    const valueProp = optionProps.value || 'value';\n    const childrenProp = optionProps.children || 'children';\n    if (!(cellValue === null || cellValue === undefined)) {\n        const keyMaps = {};\n        XEUtils.eachTree(options, item => {\n            keyMaps[XEUtils.get(item, valueProp)] = item;\n        }, { children: childrenProp });\n        return XEUtils.map(XEUtils.isArray(cellValue) ? cellValue : [cellValue], (value) => {\n            const item = keyMaps[value];\n            return item ? XEUtils.get(item, labelProp) : item;\n        }).join(', ');\n    }\n    return '';\n}\nfunction handleExportTreeSelectMethod(params) {\n    const { row, column, options } = params;\n    return options.original ? getCellValue(row, column) : getTreeSelectCellValue(column.editRender || column.cellRender, params);\n}\nfunction handleNumberCell(renderOpts, params) {\n    const { props = {}, showNegativeStatus } = renderOpts;\n    const { row, column } = params;\n    const { type } = props;\n    let cellValue = XEUtils.get(row, column.field);\n    let isNegative = false;\n    if (!isEmptyValue(cellValue)) {\n        const numberInputConfig = getConfig().numberInput || {};\n        if (type === 'float') {\n            const autoFill = handleDefaultValue(props.autoFill, numberInputConfig.autoFill, true);\n            const digits = handleDefaultValue(props.digits, numberInputConfig.digits, 1);\n            cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits);\n            if (!autoFill) {\n                cellValue = XEUtils.toNumber(cellValue);\n            }\n            if (showNegativeStatus) {\n                if (cellValue < 0) {\n                    isNegative = true;\n                }\n            }\n        }\n        else if (type === 'amount') {\n            const autoFill = handleDefaultValue(props.autoFill, numberInputConfig.autoFill, true);\n            const digits = handleDefaultValue(props.digits, numberInputConfig.digits, 2);\n            const showCurrency = handleDefaultValue(props.showCurrency, numberInputConfig.showCurrency, false);\n            cellValue = XEUtils.toNumber(cellValue);\n            if (showNegativeStatus) {\n                if (cellValue < 0) {\n                    isNegative = true;\n                }\n            }\n            cellValue = XEUtils.commafy(cellValue, { digits });\n            if (!autoFill) {\n                const [iStr, dStr] = cellValue.split('.');\n                if (dStr) {\n                    const dRest = dStr.replace(/0+$/, '');\n                    cellValue = dRest ? [iStr, '.', dRest].join('') : iStr;\n                }\n            }\n            if (showCurrency) {\n                cellValue = `${props.currencySymbol || numberInputConfig.currencySymbol || getI18n('vxe.numberInput.currencySymbol') || ''}${cellValue}`;\n            }\n        }\n        else {\n            if (showNegativeStatus) {\n                if (XEUtils.toNumber(cellValue) < 0) {\n                    isNegative = true;\n                }\n            }\n        }\n    }\n    return getCellLabelVNs(renderOpts, params, cellValue, isNegative\n        ? {\n            class: 'is--negative'\n        }\n        : {});\n}\n/**\n * 表格 - 渲染器\n */\nrenderer.mixin({\n    input: {\n        tableAutoFocus: 'input',\n        renderTableEdit: nativeEditRender,\n        renderTableDefault: nativeEditRender,\n        renderTableFilter: nativeFilterRender,\n        tableFilterDefaultMethod: handleInputFilterMethod\n    },\n    textarea: {\n        tableAutoFocus: 'textarea',\n        renderTableEdit: nativeEditRender\n    },\n    select: {\n        renderTableEdit: nativeSelectEditRender,\n        renderTableDefault: nativeSelectEditRender,\n        renderTableCell(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n        },\n        renderTableFilter(renderOpts, params) {\n            const { column } = params;\n            return column.filters.map((option, oIndex) => {\n                return h('select', Object.assign(Object.assign({ key: oIndex, class: 'vxe-default-select' }, getNativeAttrs(renderOpts)), getNativeFilterOns(renderOpts, params, option)), renderOpts.optionGroups ? renderNativeOptgroups(renderOpts, params, renderNativeOptions) : renderNativeOptions(renderOpts.options, renderOpts, params));\n            });\n        },\n        tableFilterDefaultMethod: handleFilterMethod,\n        tableExportMethod: handleExportSelectMethod\n    },\n    VxeInput: {\n        tableAutoFocus: 'input',\n        renderTableEdit: defaultEditRender,\n        renderTableCell(renderOpts, params) {\n            const { props = {} } = renderOpts;\n            const { row, column } = params;\n            const inputConfig = getConfig().input || {};\n            const digits = props.digits || inputConfig.digits || 2;\n            let cellValue = XEUtils.get(row, column.field);\n            if (cellValue) {\n                switch (props.type) {\n                    case 'date':\n                    case 'week':\n                    case 'month':\n                    case 'quarter':\n                    case 'year':\n                        cellValue = getLabelFormatDate(cellValue, props);\n                        break;\n                    case 'float':\n                        cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits);\n                        break;\n                }\n            }\n            return getCellLabelVNs(renderOpts, params, cellValue);\n        },\n        renderTableDefault: defaultEditRender,\n        renderTableFilter: defaultFilterRender,\n        tableFilterDefaultMethod: handleInputFilterMethod\n    },\n    FormatNumberInput: {\n        renderTableDefault: handleNumberCell,\n        tableFilterDefaultMethod: handleInputFilterMethod,\n        tableExportMethod(params) {\n            const { row, column } = params;\n            const cellValue = XEUtils.get(row, column.field);\n            return cellValue;\n        }\n    },\n    VxeNumberInput: {\n        tableAutoFocus: 'input',\n        renderTableEdit: defaultEditRender,\n        renderTableCell: handleNumberCell,\n        renderTableFooter(renderOpts, params) {\n            const { props = {} } = renderOpts;\n            const { row, column, _columnIndex } = params;\n            const { type } = props;\n            // 兼容老模式\n            const itemValue = XEUtils.isArray(row) ? row[_columnIndex] : XEUtils.get(row, column.field);\n            if (XEUtils.isNumber(itemValue)) {\n                const numberInputConfig = getConfig().numberInput || {};\n                if (type === 'float') {\n                    const autoFill = handleDefaultValue(props.autoFill, numberInputConfig.autoFill, true);\n                    const digits = handleDefaultValue(props.digits, numberInputConfig.digits, 1);\n                    let amountLabel = XEUtils.toFixed(XEUtils.floor(itemValue, digits), digits);\n                    if (!autoFill) {\n                        amountLabel = XEUtils.toNumber(amountLabel);\n                    }\n                    return amountLabel;\n                }\n                else if (type === 'amount') {\n                    const autoFill = handleDefaultValue(props.autoFill, numberInputConfig.autoFill, true);\n                    const digits = handleDefaultValue(props.digits, numberInputConfig.digits, 2);\n                    const showCurrency = handleDefaultValue(props.showCurrency, numberInputConfig.showCurrency, false);\n                    let amountLabel = XEUtils.commafy(XEUtils.toNumber(itemValue), { digits });\n                    if (!autoFill) {\n                        const [iStr, dStr] = amountLabel.split('.');\n                        if (dStr) {\n                            const dRest = dStr.replace(/0+$/, '');\n                            amountLabel = dRest ? [iStr, '.', dRest].join('') : iStr;\n                        }\n                    }\n                    if (showCurrency) {\n                        amountLabel = `${props.currencySymbol || numberInputConfig.currencySymbol || getI18n('vxe.numberInput.currencySymbol') || ''}${amountLabel}`;\n                    }\n                    return amountLabel;\n                }\n            }\n            return getFuncText(itemValue, 1);\n        },\n        renderTableDefault: defaultEditRender,\n        renderTableFilter: defaultFilterRender,\n        tableFilterDefaultMethod: handleInputFilterMethod,\n        tableExportMethod(params) {\n            const { row, column } = params;\n            const cellValue = XEUtils.get(row, column.field);\n            return cellValue;\n        }\n    },\n    VxeDatePicker: {\n        tableAutoFocus: 'input',\n        renderTableEdit: defaultEditRender,\n        renderTableCell(renderOpts, params) {\n            const { props = {} } = renderOpts;\n            const { row, column } = params;\n            let cellValue = XEUtils.get(row, column.field);\n            if (cellValue) {\n                if (props.type !== 'time') {\n                    cellValue = getLabelFormatDate(cellValue, props);\n                }\n            }\n            return getCellLabelVNs(renderOpts, params, cellValue);\n        },\n        renderTableDefault: defaultEditRender,\n        renderTableFilter: defaultFilterRender,\n        tableFilterDefaultMethod: handleFilterMethod\n    },\n    VxeTextarea: {\n        tableAutoFocus: 'textarea',\n        renderTableEdit: defaultEditRender,\n        renderTableCell(renderOpts, params) {\n            const { row, column } = params;\n            const cellValue = XEUtils.get(row, column.field);\n            return getCellLabelVNs(renderOpts, params, cellValue);\n        }\n    },\n    VxeButton: {\n        renderTableDefault: buttonCellRender\n    },\n    VxeButtonGroup: {\n        renderTableDefault(renderOpts, params) {\n            const { options } = renderOpts;\n            return [\n                h(getDefaultComponent(renderOpts), Object.assign(Object.assign({ options }, getCellEditProps(renderOpts, params, null)), getComponentOns(renderOpts, params)))\n            ];\n        }\n    },\n    VxeSelect: {\n        tableAutoFocus: 'input',\n        renderTableEdit: defaultSelectEditRender,\n        renderTableDefault: defaultSelectEditRender,\n        renderTableCell(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n        },\n        renderTableFilter(renderOpts, params) {\n            const { column } = params;\n            const { options, optionProps, optionGroups, optionGroupProps } = renderOpts;\n            return column.filters.map((option, oIndex) => {\n                const optionValue = option.data;\n                return h(getDefaultComponent(renderOpts), Object.assign(Object.assign({ key: oIndex }, getCellEditFilterProps(renderOpts, params, optionValue, { options, optionProps, optionGroups, optionGroupProps })), getFilterOns(renderOpts, params, option)));\n            });\n        },\n        tableFilterDefaultMethod: handleFilterMethod,\n        tableExportMethod: handleExportSelectMethod\n    },\n    /**\n     * 已废弃，被 FormatSelect 替换\n     * @deprecated\n     */\n    formatOption: {\n        renderTableDefault(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n        }\n    },\n    FormatSelect: {\n        renderTableDefault(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n        },\n        tableFilterDefaultMethod: handleFilterMethod,\n        tableExportMethod: handleExportSelectMethod\n    },\n    VxeTreeSelect: {\n        tableAutoFocus: 'input',\n        renderTableEdit: defaultTableOrTreeSelectEditRender,\n        renderTableCell(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getTreeSelectCellValue(renderOpts, params));\n        },\n        tableExportMethod: handleExportTreeSelectMethod\n    },\n    /**\n     * 已废弃，被 FormatTreeSelect 替换\n     * @deprecated\n     */\n    formatTree: {\n        renderTableDefault(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getTreeSelectCellValue(renderOpts, params));\n        }\n    },\n    FormatTreeSelect: {\n        renderTableDefault(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getTreeSelectCellValue(renderOpts, params));\n        },\n        tableExportMethod: handleExportTreeSelectMethod\n    },\n    VxeTableSelect: {\n        tableAutoFocus: 'input',\n        renderTableEdit: defaultTableOrTreeSelectEditRender,\n        renderTableCell(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getTreeSelectCellValue(renderOpts, params));\n        },\n        tableExportMethod: handleExportTreeSelectMethod\n    },\n    VxeColorPicker: {\n        tableAutoFocus: 'input',\n        renderTableEdit(renderOpts, params) {\n            const { row, column } = params;\n            const { options } = renderOpts;\n            const cellValue = getCellValue(row, column);\n            return [\n                h(getDefaultComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, cellValue, { colors: options })), getEditOns(renderOpts, params)))\n            ];\n        },\n        renderTableCell(renderOpts, params) {\n            const { row, column } = params;\n            const cellValue = XEUtils.get(row, column.field);\n            return h('span', {\n                class: 'vxe-color-picker--readonly'\n            }, [\n                h('div', {\n                    class: 'vxe-color-picker--readonly-color',\n                    style: {\n                        backgroundColor: cellValue\n                    }\n                })\n            ]);\n        }\n    },\n    VxeIconPicker: {\n        tableAutoFocus: 'input',\n        renderTableEdit(renderOpts, params) {\n            const { row, column } = params;\n            const { options } = renderOpts;\n            const cellValue = getCellValue(row, column);\n            return [\n                h(getDefaultComponent(renderOpts), Object.assign(Object.assign({}, getCellEditProps(renderOpts, params, cellValue, { icons: options })), getEditOns(renderOpts, params)))\n            ];\n        },\n        renderTableCell(renderOpts, params) {\n            const { row, column } = params;\n            const cellValue = XEUtils.get(row, column.field);\n            return h('i', {\n                class: cellValue\n            });\n        }\n    },\n    VxeRadioGroup: {\n        renderTableDefault: radioAndCheckboxEditRender\n    },\n    VxeCheckboxGroup: {\n        renderTableDefault: radioAndCheckboxEditRender\n    },\n    VxeSwitch: {\n        tableAutoFocus: 'button',\n        renderTableEdit: defaultEditRender,\n        renderTableDefault: defaultEditRender\n    },\n    VxeUpload: {\n        renderTableEdit: defaultEditRender,\n        renderTableCell: defaultEditRender,\n        renderTableDefault: defaultEditRender\n    },\n    VxeImage: {\n        renderTableDefault(renderOpts, params) {\n            const { row, column } = params;\n            const { props } = renderOpts;\n            const cellValue = getCellValue(row, column);\n            return [\n                h(getDefaultComponent(renderOpts), Object.assign(Object.assign(Object.assign({}, props), { src: cellValue }), getEditOns(renderOpts, params)))\n            ];\n        }\n    },\n    VxeImageGroup: {\n        renderTableDefault(renderOpts, params) {\n            const { row, column } = params;\n            const { props } = renderOpts;\n            const cellValue = getCellValue(row, column);\n            return [\n                h(getDefaultComponent(renderOpts), Object.assign(Object.assign(Object.assign({}, props), { urlList: cellValue }), getEditOns(renderOpts, params)))\n            ];\n        }\n    },\n    VxeTextEllipsis: {\n        renderTableDefault(renderOpts, params) {\n            const { row, column } = params;\n            const { props } = renderOpts;\n            const cellValue = getCellValue(row, column);\n            return [\n                h(getDefaultComponent(renderOpts), Object.assign(Object.assign(Object.assign({}, props), { content: cellValue }), getEditOns(renderOpts, params)))\n            ];\n        }\n    },\n    VxeRate: {\n        renderTableDefault: defaultEditRender\n    },\n    VxeSlider: {\n        renderTableDefault: defaultEditRender\n    },\n    // 以下已废弃\n    $input: {\n        tableAutoFocus: '.vxe-input--inner',\n        renderTableEdit: oldEditRender,\n        renderTableCell(renderOpts, params) {\n            var _a;\n            const { props = {} } = renderOpts;\n            const { row, column } = params;\n            const digits = props.digits || ((_a = getConfig().input) === null || _a === void 0 ? void 0 : _a.digits) || 2;\n            let cellValue = XEUtils.get(row, column.field);\n            if (cellValue) {\n                switch (props.type) {\n                    case 'date':\n                    case 'week':\n                    case 'month':\n                    case 'year':\n                        cellValue = getLabelFormatDate(cellValue, props);\n                        break;\n                    case 'float':\n                        cellValue = XEUtils.toFixed(XEUtils.floor(cellValue, digits), digits);\n                        break;\n                }\n            }\n            return getCellLabelVNs(renderOpts, params, cellValue);\n        },\n        renderTableDefault: oldEditRender,\n        renderTableFilter: oldFilterRender,\n        tableFilterDefaultMethod: handleInputFilterMethod\n    },\n    $textarea: {\n        tableAutoFocus: '.vxe-textarea--inner'\n    },\n    $button: {\n        renderTableDefault: oldButtonEditRender\n    },\n    $buttons: {\n        renderTableDefault: oldButtonsEditRender\n    },\n    $select: {\n        tableAutoFocus: '.vxe-input--inner',\n        renderTableEdit: oldSelectEditRender,\n        renderTableDefault: oldSelectEditRender,\n        renderTableCell(renderOpts, params) {\n            return getCellLabelVNs(renderOpts, params, getSelectCellValue(renderOpts, params));\n        },\n        renderTableFilter(renderOpts, params) {\n            const { column } = params;\n            const { options, optionProps, optionGroups, optionGroupProps } = renderOpts;\n            return column.filters.map((option, oIndex) => {\n                const optionValue = option.data;\n                return h(getOldComponent(renderOpts), Object.assign(Object.assign({ key: oIndex }, getCellEditFilterProps(renderOpts, params, optionValue, { options, optionProps, optionGroups, optionGroupProps })), getFilterOns(renderOpts, params, option)));\n            });\n        },\n        tableFilterDefaultMethod: handleFilterMethod,\n        tableExportMethod: handleExportSelectMethod\n    },\n    $radio: {\n        tableAutoFocus: '.vxe-radio--input'\n    },\n    $checkbox: {\n        tableAutoFocus: '.vxe-checkbox--input'\n    },\n    $switch: {\n        tableAutoFocus: '.vxe-switch--button',\n        renderTableEdit: oldEditRender,\n        renderTableDefault: oldEditRender\n    }\n    // 以上已废弃\n});\n", "import { VxeUI } from '../ui';\nimport VxeTableComponent from './src/table';\nimport { useCellView } from './src/use';\nimport './module/filter/hook';\nimport './module/menu/hook';\nimport './module/edit/hook';\nimport './module/export/hook';\nimport './module/keyboard/hook';\nimport './module/validator/hook';\nimport './module/custom/hook';\nimport './render';\nexport const VxeTable = Object.assign({}, VxeTableComponent, {\n    install(app) {\n        app.component(VxeTableComponent.name, VxeTableComponent);\n    }\n});\nconst tableHandle = {\n    useCellView\n};\nif (VxeUI.dynamicApp) {\n    VxeUI.dynamicApp.component(VxeTableComponent.name, VxeTableComponent);\n}\nVxeUI.component(VxeTableComponent);\nVxeUI.tableHandle = tableHandle;\nexport const Table = VxeTable;\nexport default VxeTable;\n", "import { defineComponent, h, ref, computed, provide, reactive, onUnmounted, watch, nextTick, onMounted } from 'vue';\nimport XEUtils from 'xe-utils';\nimport { getLastZIndex, nextZIndex, isEnableConf } from '../../ui/src/utils';\nimport { getOffsetHeight, getPaddingTopBottomSize, getDomNode, toCssUnit } from '../../ui/src/dom';\nimport { VxeUI } from '../../ui';\nimport VxeTableComponent from '../../table';\nimport VxeToolbarComponent from '../../toolbar';\nimport tableComponentProps from '../../table/src/props';\nimport tableComponentEmits from '../../table/src/emits';\nimport { getSlotVNs } from '../../ui/src/vn';\nimport { errLog } from '../../ui/src/log';\nconst { getConfig, getI18n, commands, hooks, useFns, createEvent, globalEvents, GLOBAL_EVENT_KEYS, renderEmptyElement } = VxeUI;\nconst tableComponentPropKeys = Object.keys(tableComponentProps);\nconst tableComponentMethodKeys = ['clearAll', 'syncData', 'updateData', 'loadData', 'reloadData', 'reloadRow', 'loadColumn', 'reloadColumn', 'getRowNode', 'getColumnNode', 'getRowIndex', 'getVTRowIndex', 'getVMRowIndex', 'getColumnIndex', 'getVTColumnIndex', 'getVMColumnIndex', 'setRow', 'createData', 'createRow', 'revertData', 'clearData', 'isRemoveByRow', 'isInsertByRow', 'isUpdateByRow', 'getColumns', 'getColumnById', 'getColumnByField', 'getTableColumn', 'getFullColumns', 'getData', 'getCheckboxRecords', 'getParentRow', 'getTreeParentRow', 'getRowSeq', 'getRowById', 'getRowid', 'getTableData', 'getFullData', 'setColumnFixed', 'clearColumnFixed', 'setColumnWidth', 'getColumnWidth', 'setRowHeightConf', 'getRowHeightConf', 'setRowHeight', 'getRowHeight', 'hideColumn', 'showColumn', 'resetColumn', 'refreshColumn', 'refreshScroll', 'recalculate', 'closeTooltip', 'isAllCheckboxChecked', 'isAllCheckboxIndeterminate', 'getCheckboxIndeterminateRecords', 'setCheckboxRow', 'setCheckboxRowKey', 'isCheckedByCheckboxRow', 'isCheckedByCheckboxRowKey', 'isIndeterminateByCheckboxRow', 'isIndeterminateByCheckboxRowKey', 'toggleCheckboxRow', 'setAllCheckboxRow', 'getRadioReserveRecord', 'clearRadioReserve', 'getCheckboxReserveRecords', 'clearCheckboxReserve', 'toggleAllCheckboxRow', 'clearCheckboxRow', 'setCurrentRow', 'isCheckedByRadioRow', 'isCheckedByRadioRowKey', 'setRadioRow', 'setRadioRowKey', 'clearCurrentRow', 'clearRadioRow', 'getCurrentRecord', 'getRadioRecord', 'getCurrentColumn', 'setCurrentColumn', 'clearCurrentColumn', 'setPendingRow', 'togglePendingRow', 'hasPendingByRow', 'isPendingByRow', 'getPendingRecords', 'clearPendingRow', 'sort', 'setSort', 'clearSort', 'isSort', 'getSortColumns', 'closeFilter', 'isFilter', 'isActiveFilterByColumn', 'isRowExpandLoaded', 'clearRowExpandLoaded', 'reloadRowExpand', 'reloadRowExpand', 'toggleRowExpand', 'setAllRowExpand', 'setRowExpand', 'isExpandByRow', 'isRowExpandByRow', 'clearRowExpand', 'clearRowExpandReserve', 'getRowExpandRecords', 'getTreeExpandRecords', 'isTreeExpandLoaded', 'clearTreeExpandLoaded', 'reloadTreeExpand', 'reloadTreeChilds', 'toggleTreeExpand', 'setAllTreeExpand', 'setTreeExpand', 'isTreeExpandByRow', 'clearTreeExpand', 'clearTreeExpandReserve', 'getScroll', 'scrollTo', 'scrollToRow', 'scrollToColumn', 'clearScroll', 'updateFooter', 'updateStatus', 'setMergeCells', 'removeInsertRow', 'removeMergeCells', 'getMergeCells', 'clearMergeCells', 'setMergeFooterItems', 'removeMergeFooterItems', 'getMergeFooterItems', 'clearMergeFooterItems', 'getCustomStoreData', 'openTooltip', 'moveColumnTo', 'moveRowTo', 'getCellLabel', 'getCellElement', 'focus', 'blur', 'connect'];\nconst gridComponentEmits = [\n    ...tableComponentEmits,\n    'page-change',\n    'form-submit',\n    'form-submit-invalid',\n    'form-reset',\n    'form-collapse',\n    'form-toggle-collapse',\n    'proxy-query',\n    'proxy-delete',\n    'proxy-save',\n    'toolbar-button-click',\n    'toolbar-tool-click',\n    'zoom'\n];\nexport default defineComponent({\n    name: 'VxeGrid',\n    props: Object.assign(Object.assign({}, tableComponentProps), { layouts: Array, columns: Array, pagerConfig: Object, proxyConfig: Object, toolbarConfig: Object, formConfig: Object, zoomConfig: Object, size: {\n            type: String,\n            default: () => getConfig().grid.size || getConfig().size\n        } }),\n    emits: gridComponentEmits,\n    setup(props, context) {\n        var _a;\n        const { slots, emit } = context;\n        const xID = XEUtils.uniqueId();\n        // 使用已安装的组件，如果未安装则不渲染\n        const VxeUIFormComponent = VxeUI.getComponent('VxeForm');\n        const VxeUIPagerComponent = VxeUI.getComponent('VxePager');\n        const defaultLayouts = [['Form'], ['Toolbar', 'Top', 'Table', 'Bottom', 'Pager']];\n        const { computeSize } = useFns.useSize(props);\n        const reactData = reactive({\n            tableLoading: false,\n            proxyInited: false,\n            isZMax: false,\n            tableData: [],\n            filterData: [],\n            formData: {},\n            sortData: [],\n            tZindex: 0,\n            tablePage: {\n                total: 0,\n                pageSize: ((_a = getConfig().pager) === null || _a === void 0 ? void 0 : _a.pageSize) || 10,\n                currentPage: 1\n            }\n        });\n        const refElem = ref();\n        const refTable = ref();\n        const refForm = ref();\n        const refToolbar = ref();\n        const refPager = ref();\n        const refFormWrapper = ref();\n        const refToolbarWrapper = ref();\n        const refTopWrapper = ref();\n        const refBottomWrapper = ref();\n        const refPagerWrapper = ref();\n        const extendTableMethods = (methodKeys) => {\n            const funcs = {};\n            methodKeys.forEach(name => {\n                funcs[name] = (...args) => {\n                    const $xeTable = refTable.value;\n                    if ($xeTable && $xeTable[name]) {\n                        return $xeTable[name](...args);\n                    }\n                };\n            });\n            return funcs;\n        };\n        const gridExtendTableMethods = extendTableMethods(tableComponentMethodKeys);\n        tableComponentMethodKeys.forEach(name => {\n            gridExtendTableMethods[name] = (...args) => {\n                const $xeTable = refTable.value;\n                if ($xeTable && $xeTable[name]) {\n                    return $xeTable && $xeTable[name](...args);\n                }\n            };\n        });\n        const computeProxyOpts = computed(() => {\n            return XEUtils.merge({}, XEUtils.clone(getConfig().grid.proxyConfig, true), props.proxyConfig);\n        });\n        const computeIsRespMsg = computed(() => {\n            const proxyOpts = computeProxyOpts.value;\n            return XEUtils.isBoolean(proxyOpts.message) ? proxyOpts.message : proxyOpts.showResponseMsg;\n        });\n        const computeIsActiveMsg = computed(() => {\n            const proxyOpts = computeProxyOpts.value;\n            return proxyOpts.showActiveMsg;\n        });\n        const computePagerOpts = computed(() => {\n            return Object.assign({}, getConfig().grid.pagerConfig, props.pagerConfig);\n        });\n        const computeFormOpts = computed(() => {\n            return Object.assign({}, getConfig().grid.formConfig, props.formConfig);\n        });\n        const computeToolbarOpts = computed(() => {\n            return Object.assign({}, getConfig().grid.toolbarConfig, props.toolbarConfig);\n        });\n        const computeZoomOpts = computed(() => {\n            return Object.assign({}, getConfig().grid.zoomConfig, props.zoomConfig);\n        });\n        const computeStyles = computed(() => {\n            const { height, maxHeight } = props;\n            const { isZMax, tZindex } = reactData;\n            const stys = {};\n            if (isZMax) {\n                stys.zIndex = tZindex;\n            }\n            else {\n                if (height) {\n                    stys.height = height === 'auto' || height === '100%' ? '100%' : toCssUnit(height);\n                }\n                if (maxHeight) {\n                    stys.maxHeight = maxHeight === 'auto' || maxHeight === '100%' ? '100%' : toCssUnit(maxHeight);\n                }\n            }\n            return stys;\n        });\n        const computeTableExtendProps = computed(() => {\n            const rest = {};\n            const gridProps = props;\n            tableComponentPropKeys.forEach((key) => {\n                rest[key] = gridProps[key];\n            });\n            return rest;\n        });\n        const computeTableProps = computed(() => {\n            const { seqConfig, pagerConfig, loading, editConfig, proxyConfig } = props;\n            const { isZMax, tableLoading, tablePage } = reactData;\n            const tableExtendProps = computeTableExtendProps.value;\n            const proxyOpts = computeProxyOpts.value;\n            const pagerOpts = computePagerOpts.value;\n            const tProps = Object.assign({}, tableExtendProps);\n            if (isZMax) {\n                if (tableExtendProps.maxHeight) {\n                    tProps.maxHeight = '100%';\n                }\n                else {\n                    tProps.height = '100%';\n                }\n            }\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                tProps.loading = loading || tableLoading;\n                if (pagerConfig && proxyOpts.seq && isEnableConf(pagerOpts)) {\n                    tProps.seqConfig = Object.assign({}, seqConfig, { startIndex: (tablePage.currentPage - 1) * tablePage.pageSize });\n                }\n            }\n            if (editConfig) {\n                tProps.editConfig = Object.assign({}, editConfig);\n            }\n            return tProps;\n        });\n        const computeCurrLayoutConf = computed(() => {\n            const { layouts } = props;\n            let confs = [];\n            if (layouts && layouts.length) {\n                confs = layouts;\n            }\n            else {\n                confs = getConfig().grid.layouts || defaultLayouts;\n            }\n            let headKeys = [];\n            let bodyKeys = [];\n            let footKeys = [];\n            if (confs.length) {\n                if (XEUtils.isArray(confs[0])) {\n                    headKeys = confs[0];\n                    bodyKeys = (confs[1] || []);\n                    footKeys = (confs[2] || []);\n                }\n                else {\n                    bodyKeys = confs;\n                }\n            }\n            return {\n                headKeys,\n                bodyKeys,\n                footKeys\n            };\n        });\n        const computePageConfFlag = computed(() => {\n            const pagerOpts = computePagerOpts.value;\n            return `${pagerOpts.currentPage}${pagerOpts.pageSize}`;\n        });\n        const refMaps = {\n            refElem,\n            refTable,\n            refForm,\n            refToolbar,\n            refPager\n        };\n        const computeMaps = {\n            computeProxyOpts,\n            computePagerOpts,\n            computeFormOpts,\n            computeToolbarOpts,\n            computeZoomOpts\n        };\n        const $xeGrid = {\n            xID,\n            props: props,\n            context,\n            reactData,\n            getRefMaps: () => refMaps,\n            getComputeMaps: () => computeMaps\n        };\n        const initToolbar = () => {\n            const toolbarOpts = computeToolbarOpts.value;\n            if (props.toolbarConfig && isEnableConf(toolbarOpts)) {\n                nextTick(() => {\n                    const $xeTable = refTable.value;\n                    const $xeToolbar = refToolbar.value;\n                    if ($xeTable && $xeToolbar) {\n                        $xeTable.connect($xeToolbar);\n                    }\n                });\n            }\n        };\n        const getFormData = () => {\n            const { proxyConfig } = props;\n            const { formData } = reactData;\n            const proxyOpts = computeProxyOpts.value;\n            const formOpts = computeFormOpts.value;\n            return proxyConfig && isEnableConf(proxyOpts) && proxyOpts.form ? formData : formOpts.data;\n        };\n        const initPages = () => {\n            const { tablePage } = reactData;\n            const { pagerConfig } = props;\n            const pagerOpts = computePagerOpts.value;\n            const { currentPage, pageSize } = pagerOpts;\n            if (pagerConfig && isEnableConf(pagerOpts)) {\n                if (currentPage) {\n                    tablePage.currentPage = currentPage;\n                }\n                if (pageSize) {\n                    tablePage.pageSize = pageSize;\n                }\n            }\n        };\n        const triggerPendingEvent = (code) => {\n            const isActiveMsg = computeIsActiveMsg.value;\n            const $xeTable = refTable.value;\n            const selectRecords = $xeTable.getCheckboxRecords();\n            if (selectRecords.length) {\n                $xeTable.togglePendingRow(selectRecords);\n                gridExtendTableMethods.clearCheckboxRow();\n            }\n            else {\n                if (isActiveMsg) {\n                    if (VxeUI.modal) {\n                        VxeUI.modal.message({ id: code, content: getI18n('vxe.grid.selectOneRecord'), status: 'warning' });\n                    }\n                }\n            }\n        };\n        const getRespMsg = (rest, defaultMsg) => {\n            const proxyOpts = computeProxyOpts.value;\n            const resConfigs = proxyOpts.response || proxyOpts.props || {};\n            const messageProp = resConfigs.message;\n            let msg;\n            if (rest && messageProp) {\n                msg = XEUtils.isFunction(messageProp) ? messageProp({ data: rest, $grid: $xeGrid }) : XEUtils.get(rest, messageProp);\n            }\n            return msg || getI18n(defaultMsg);\n        };\n        const handleDeleteRow = (code, alertKey, callback) => {\n            const isActiveMsg = computeIsActiveMsg.value;\n            const selectRecords = gridExtendTableMethods.getCheckboxRecords();\n            if (isActiveMsg) {\n                if (selectRecords.length) {\n                    if (VxeUI.modal) {\n                        return VxeUI.modal.confirm({ id: `cfm_${code}`, content: getI18n(alertKey), escClosable: true }).then((type) => {\n                            if (type === 'confirm') {\n                                return callback();\n                            }\n                        });\n                    }\n                }\n                else {\n                    if (VxeUI.modal) {\n                        VxeUI.modal.message({ id: `msg_${code}`, content: getI18n('vxe.grid.selectOneRecord'), status: 'warning' });\n                    }\n                }\n            }\n            else {\n                if (selectRecords.length) {\n                    callback();\n                }\n            }\n            return Promise.resolve();\n        };\n        const pageChangeEvent = (params) => {\n            const { proxyConfig } = props;\n            const { tablePage } = reactData;\n            const { $event, currentPage, pageSize } = params;\n            const proxyOpts = computeProxyOpts.value;\n            tablePage.currentPage = currentPage;\n            tablePage.pageSize = pageSize;\n            $xeGrid.dispatchEvent('page-change', params, $event);\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                $xeGrid.commitProxy('query').then((rest) => {\n                    $xeGrid.dispatchEvent('proxy-query', rest, $event);\n                });\n            }\n        };\n        const sortChangeEvent = (params) => {\n            const $xeTable = refTable.value;\n            const { proxyConfig } = props;\n            const { computeSortOpts } = $xeTable.getComputeMaps();\n            const proxyOpts = computeProxyOpts.value;\n            const sortOpts = computeSortOpts.value;\n            // 如果是服务端排序\n            if (sortOpts.remote) {\n                reactData.sortData = params.sortList;\n                if (proxyConfig && isEnableConf(proxyOpts)) {\n                    reactData.tablePage.currentPage = 1;\n                    gridMethods.commitProxy('query').then((rest) => {\n                        gridMethods.dispatchEvent('proxy-query', rest, params.$event);\n                    });\n                }\n            }\n            gridMethods.dispatchEvent('sort-change', params, params.$event);\n        };\n        const filterChangeEvent = (params) => {\n            const $xeTable = refTable.value;\n            const { proxyConfig } = props;\n            const { computeFilterOpts } = $xeTable.getComputeMaps();\n            const proxyOpts = computeProxyOpts.value;\n            const filterOpts = computeFilterOpts.value;\n            // 如果是服务端过滤\n            if (filterOpts.remote) {\n                reactData.filterData = params.filterList;\n                if (proxyConfig && isEnableConf(proxyOpts)) {\n                    reactData.tablePage.currentPage = 1;\n                    gridMethods.commitProxy('query').then((rest) => {\n                        gridMethods.dispatchEvent('proxy-query', rest, params.$event);\n                    });\n                }\n            }\n            gridMethods.dispatchEvent('filter-change', params, params.$event);\n        };\n        const submitFormEvent = (params) => {\n            const { proxyConfig } = props;\n            const proxyOpts = computeProxyOpts.value;\n            if (reactData.tableLoading) {\n                return;\n            }\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                gridMethods.commitProxy('reload').then((rest) => {\n                    gridMethods.dispatchEvent('proxy-query', Object.assign(Object.assign({}, rest), { isReload: true }), params.$event);\n                });\n            }\n            gridMethods.dispatchEvent('form-submit', params, params.$event);\n        };\n        const resetFormEvent = (params) => {\n            const { proxyConfig } = props;\n            const { $event } = params;\n            const proxyOpts = computeProxyOpts.value;\n            const $xeTable = refTable.value;\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                $xeTable.clearScroll();\n                gridMethods.commitProxy('reload').then((rest) => {\n                    gridMethods.dispatchEvent('proxy-query', Object.assign(Object.assign({}, rest), { isReload: true }), $event);\n                });\n            }\n            gridMethods.dispatchEvent('form-reset', params, $event);\n        };\n        const submitInvalidEvent = (params) => {\n            gridMethods.dispatchEvent('form-submit-invalid', params, params.$event);\n        };\n        const collapseEvent = (params) => {\n            const { $event } = params;\n            nextTick(() => gridExtendTableMethods.recalculate(true));\n            gridMethods.dispatchEvent('form-toggle-collapse', params, $event);\n            gridMethods.dispatchEvent('form-collapse', params, $event);\n        };\n        const handleZoom = (isMax) => {\n            const { isZMax } = reactData;\n            if (isMax ? !isZMax : isZMax) {\n                reactData.isZMax = !isZMax;\n                if (reactData.tZindex < getLastZIndex()) {\n                    reactData.tZindex = nextZIndex();\n                }\n            }\n            return nextTick()\n                .then(() => gridExtendTableMethods.recalculate(true))\n                .then(() => {\n                setTimeout(() => gridExtendTableMethods.recalculate(true), 15);\n                return reactData.isZMax;\n            });\n        };\n        const getFuncSlot = (optSlots, slotKey) => {\n            const funcSlot = optSlots[slotKey];\n            if (funcSlot) {\n                if (XEUtils.isString(funcSlot)) {\n                    if (slots[funcSlot]) {\n                        return slots[funcSlot];\n                    }\n                    else {\n                        errLog('vxe.error.notSlot', [funcSlot]);\n                    }\n                }\n                else {\n                    return funcSlot;\n                }\n            }\n            return null;\n        };\n        const getConfigSlot = (slotConfigs) => {\n            const slotConf = {};\n            XEUtils.objectMap(slotConfigs, (slotFunc, slotKey) => {\n                if (slotFunc) {\n                    if (XEUtils.isString(slotFunc)) {\n                        if (slots[slotFunc]) {\n                            slotConf[slotKey] = slots[slotFunc];\n                        }\n                        else {\n                            errLog('vxe.error.notSlot', [slotFunc]);\n                        }\n                    }\n                    else {\n                        slotConf[slotKey] = slotFunc;\n                    }\n                }\n            });\n            return slotConf;\n        };\n        /**\n         * 渲染表单\n         */\n        const renderForm = () => {\n            const { formConfig, proxyConfig } = props;\n            const { formData } = reactData;\n            const proxyOpts = computeProxyOpts.value;\n            const formOpts = computeFormOpts.value;\n            if ((formConfig && isEnableConf(formOpts)) || slots.form) {\n                let slotVNs = [];\n                if (slots.form) {\n                    slotVNs = slots.form({ $grid: $xeGrid });\n                }\n                else {\n                    if (formOpts.items) {\n                        const formSlots = {};\n                        if (!formOpts.inited) {\n                            formOpts.inited = true;\n                            const beforeItem = proxyOpts.beforeItem;\n                            if (proxyOpts && beforeItem) {\n                                formOpts.items.forEach((item) => {\n                                    beforeItem({ $grid: $xeGrid, item });\n                                });\n                            }\n                        }\n                        // 处理插槽\n                        formOpts.items.forEach((item) => {\n                            XEUtils.each(item.slots, (func) => {\n                                if (!XEUtils.isFunction(func)) {\n                                    if (slots[func]) {\n                                        formSlots[func] = slots[func];\n                                    }\n                                }\n                            });\n                        });\n                        if (VxeUIFormComponent) {\n                            slotVNs.push(h(VxeUIFormComponent, Object.assign(Object.assign({ ref: refForm }, Object.assign({}, formOpts, {\n                                data: proxyConfig && isEnableConf(proxyOpts) && proxyOpts.form ? formData : formOpts.data\n                            })), { onSubmit: submitFormEvent, onReset: resetFormEvent, onSubmitInvalid: submitInvalidEvent, onCollapse: collapseEvent }), formSlots));\n                        }\n                    }\n                }\n                return h('div', {\n                    ref: refFormWrapper,\n                    key: 'form',\n                    class: 'vxe-grid--form-wrapper'\n                }, slotVNs);\n            }\n            return renderEmptyElement($xeGrid);\n        };\n        /**\n         * 渲染工具栏\n         */\n        const renderToolbar = () => {\n            const { toolbarConfig } = props;\n            const toolbarOpts = computeToolbarOpts.value;\n            if ((toolbarConfig && isEnableConf(toolbarOpts)) || slots.toolbar) {\n                let slotVNs = [];\n                if (slots.toolbar) {\n                    slotVNs = slots.toolbar({ $grid: $xeGrid });\n                }\n                else {\n                    const toolbarOptSlots = toolbarOpts.slots;\n                    let buttonsSlot;\n                    let toolsSlot;\n                    const toolbarSlots = {};\n                    if (toolbarOptSlots) {\n                        buttonsSlot = getFuncSlot(toolbarOptSlots, 'buttons');\n                        toolsSlot = getFuncSlot(toolbarOptSlots, 'tools');\n                        if (buttonsSlot) {\n                            toolbarSlots.buttons = buttonsSlot;\n                        }\n                        if (toolsSlot) {\n                            toolbarSlots.tools = toolsSlot;\n                        }\n                    }\n                    slotVNs.push(h(VxeToolbarComponent, Object.assign({ ref: refToolbar }, toolbarOpts), toolbarSlots));\n                }\n                return h('div', {\n                    ref: refToolbarWrapper,\n                    key: 'toolbar',\n                    class: 'vxe-grid--toolbar-wrapper'\n                }, slotVNs);\n            }\n            return renderEmptyElement($xeGrid);\n        };\n        /**\n         * 渲染表格顶部区域\n         */\n        const renderTop = () => {\n            if (slots.top) {\n                return h('div', {\n                    ref: refTopWrapper,\n                    key: 'top',\n                    class: 'vxe-grid--top-wrapper'\n                }, slots.top({ $grid: $xeGrid }));\n            }\n            return renderEmptyElement($xeGrid);\n        };\n        const renderTableLeft = () => {\n            const leftSlot = slots.left;\n            if (leftSlot) {\n                return h('div', {\n                    class: 'vxe-grid--left-wrapper'\n                }, leftSlot({ $grid: $xeGrid }));\n            }\n            return renderEmptyElement($xeGrid);\n        };\n        const renderTableRight = () => {\n            const rightSlot = slots.right;\n            if (rightSlot) {\n                return h('div', {\n                    class: 'vxe-grid--right-wrapper'\n                }, rightSlot({ $grid: $xeGrid }));\n            }\n            return renderEmptyElement($xeGrid);\n        };\n        /**\n         * 渲染表格\n         */\n        const renderTable = () => {\n            const { proxyConfig } = props;\n            const tableProps = computeTableProps.value;\n            const proxyOpts = computeProxyOpts.value;\n            const tableOns = Object.assign({}, tableCompEvents);\n            const emptySlot = slots.empty;\n            const loadingSlot = slots.loading;\n            const rowDragIconSlot = slots.rowDragIcon || slots['row-drag-icon'];\n            const columnDragIconSlot = slots.columnDragIcon || slots['column-drag-icon'];\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                if (proxyOpts.sort) {\n                    tableOns.onSortChange = sortChangeEvent;\n                }\n                if (proxyOpts.filter) {\n                    tableOns.onFilterChange = filterChangeEvent;\n                }\n            }\n            const slotObj = {};\n            if (emptySlot) {\n                slotObj.empty = emptySlot;\n            }\n            if (loadingSlot) {\n                slotObj.loading = loadingSlot;\n            }\n            if (rowDragIconSlot) {\n                slotObj.rowDragIcon = rowDragIconSlot;\n            }\n            if (columnDragIconSlot) {\n                slotObj.columnDragIcon = columnDragIconSlot;\n            }\n            return h('div', {\n                class: 'vxe-grid--table-wrapper'\n            }, [\n                h(VxeTableComponent, Object.assign(Object.assign({ ref: refTable }, tableProps), tableOns), slotObj)\n            ]);\n        };\n        /**\n         * 渲染表格底部区域\n         */\n        const renderBottom = () => {\n            if (slots.bottom) {\n                return h('div', {\n                    ref: refBottomWrapper,\n                    key: 'bottom',\n                    class: 'vxe-grid--bottom-wrapper'\n                }, slots.bottom({ $grid: $xeGrid }));\n            }\n            return renderEmptyElement($xeGrid);\n        };\n        /**\n         * 渲染分页\n         */\n        const renderPager = () => {\n            const { proxyConfig, pagerConfig } = props;\n            const proxyOpts = computeProxyOpts.value;\n            const pagerOpts = computePagerOpts.value;\n            const pagerSlot = slots.pager;\n            if ((pagerConfig && isEnableConf(pagerOpts)) || slots.pager) {\n                return h('div', {\n                    ref: refPagerWrapper,\n                    key: 'pager',\n                    class: 'vxe-grid--pager-wrapper'\n                }, pagerSlot\n                    ? pagerSlot({ $grid: $xeGrid })\n                    : [\n                        VxeUIPagerComponent\n                            ? h(VxeUIPagerComponent, Object.assign(Object.assign(Object.assign({ ref: refPager }, pagerOpts), (proxyConfig && isEnableConf(proxyOpts) ? reactData.tablePage : {})), { onPageChange: pageChangeEvent }), getConfigSlot(pagerOpts.slots))\n                            : renderEmptyElement($xeGrid)\n                    ]);\n            }\n            return renderEmptyElement($xeGrid);\n        };\n        const renderChildLayout = (layoutKeys) => {\n            const childVNs = [];\n            layoutKeys.forEach(key => {\n                switch (key) {\n                    case 'Form':\n                        childVNs.push(renderForm());\n                        break;\n                    case 'Toolbar':\n                        childVNs.push(renderToolbar());\n                        break;\n                    case 'Top':\n                        childVNs.push(renderTop());\n                        break;\n                    case 'Table':\n                        childVNs.push(h('div', {\n                            key: 'table',\n                            class: 'vxe-grid--table-container'\n                        }, [\n                            renderTableLeft(),\n                            renderTable(),\n                            renderTableRight()\n                        ]));\n                        break;\n                    case 'Bottom':\n                        childVNs.push(renderBottom());\n                        break;\n                    case 'Pager':\n                        childVNs.push(renderPager());\n                        break;\n                    default:\n                        errLog('vxe.error.notProp', [`layouts -> ${key}`]);\n                        break;\n                }\n            });\n            return childVNs;\n        };\n        const renderLayout = () => {\n            const currLayoutConf = computeCurrLayoutConf.value;\n            const { headKeys, bodyKeys, footKeys } = currLayoutConf;\n            const asideLeftSlot = slots.asideLeft || slots['aside-left'];\n            const asideRightSlot = slots.asideRight || slots['aside-right'];\n            return [\n                h('div', {\n                    class: 'vxe-grid--layout-header-wrapper'\n                }, renderChildLayout(headKeys)),\n                h('div', {\n                    class: 'vxe-grid--layout-body-wrapper'\n                }, [\n                    asideLeftSlot\n                        ? h('div', {\n                            class: 'vxe-grid--layout-aside-left-wrapper'\n                        }, asideLeftSlot({}))\n                        : renderEmptyElement($xeGrid),\n                    h('div', {\n                        class: 'vxe-grid--layout-body-content-wrapper'\n                    }, renderChildLayout(bodyKeys)),\n                    asideRightSlot\n                        ? h('div', {\n                            class: 'vxe-grid--layout-aside-right-wrapper'\n                        }, asideRightSlot({}))\n                        : renderEmptyElement($xeGrid)\n                ]),\n                h('div', {\n                    class: 'vxe-grid--layout-footer-wrapper'\n                }, renderChildLayout(footKeys))\n            ];\n        };\n        const tableCompEvents = {};\n        tableComponentEmits.forEach(name => {\n            const type = XEUtils.camelCase(`on-${name}`);\n            tableCompEvents[type] = (...args) => emit(name, ...args);\n        });\n        const initProxy = () => {\n            const { proxyConfig, formConfig } = props;\n            const { proxyInited } = reactData;\n            const proxyOpts = computeProxyOpts.value;\n            const formOpts = computeFormOpts.value;\n            if (proxyConfig && isEnableConf(proxyOpts)) {\n                if (formConfig && isEnableConf(formOpts) && proxyOpts.form && formOpts.items) {\n                    const fData = {};\n                    formOpts.items.forEach(item => {\n                        const { field, itemRender } = item;\n                        if (field) {\n                            let itemValue = null;\n                            if (itemRender) {\n                                const { defaultValue } = itemRender;\n                                if (XEUtils.isFunction(defaultValue)) {\n                                    itemValue = defaultValue({ item });\n                                }\n                                else if (!XEUtils.isUndefined(defaultValue)) {\n                                    itemValue = defaultValue;\n                                }\n                            }\n                            fData[field] = itemValue;\n                        }\n                    });\n                    reactData.formData = fData;\n                }\n                if (!proxyInited) {\n                    reactData.proxyInited = true;\n                    if (proxyOpts.autoLoad !== false) {\n                        nextTick().then(() => gridMethods.commitProxy('_init')).then((rest) => {\n                            gridMethods.dispatchEvent('proxy-query', Object.assign(Object.assign({}, rest), { isInited: true }), new Event('init'));\n                        });\n                    }\n                }\n            }\n        };\n        const handleGlobalKeydownEvent = (evnt) => {\n            const zoomOpts = computeZoomOpts.value;\n            const isEsc = globalEvents.hasKey(evnt, GLOBAL_EVENT_KEYS.ESCAPE);\n            if (isEsc && reactData.isZMax && zoomOpts.escRestore !== false) {\n                gridPrivateMethods.triggerZoomEvent(evnt);\n            }\n        };\n        const dispatchEvent = (type, params, evnt) => {\n            emit(type, createEvent(evnt, { $grid: $xeGrid }, params));\n        };\n        const gridMethods = {\n            dispatchEvent,\n            getEl() {\n                return refElem.value;\n            },\n            /**\n             * 提交指令，支持 code 或 button\n             * @param {String/Object} code 字符串或对象\n             */\n            commitProxy(proxyTarget, ...args) {\n                const { toolbarConfig, pagerConfig, editRules, validConfig } = props;\n                const { tablePage } = reactData;\n                const isActiveMsg = computeIsActiveMsg.value;\n                const isRespMsg = computeIsRespMsg.value;\n                const proxyOpts = computeProxyOpts.value;\n                const pagerOpts = computePagerOpts.value;\n                const toolbarOpts = computeToolbarOpts.value;\n                const { beforeQuery, afterQuery, beforeDelete, afterDelete, beforeSave, afterSave, ajax = {} } = proxyOpts;\n                const resConfigs = proxyOpts.response || proxyOpts.props || {};\n                const $xeTable = refTable.value;\n                const formData = getFormData();\n                let button = null;\n                let code = null;\n                if (XEUtils.isString(proxyTarget)) {\n                    const { buttons } = toolbarOpts;\n                    const matchObj = toolbarConfig && isEnableConf(toolbarOpts) && buttons ? XEUtils.findTree(buttons, (item) => item.code === proxyTarget, { children: 'dropdowns' }) : null;\n                    button = matchObj ? matchObj.item : null;\n                    code = proxyTarget;\n                }\n                else {\n                    button = proxyTarget;\n                    code = button.code;\n                }\n                const btnParams = button ? button.params : null;\n                switch (code) {\n                    case 'insert':\n                        return $xeTable.insert({});\n                    case 'insert_edit':\n                        return $xeTable.insert({}).then(({ row }) => $xeTable.setEditRow(row));\n                    // 已废弃\n                    case 'insert_actived':\n                        return $xeTable.insert({}).then(({ row }) => $xeTable.setEditRow(row));\n                    // 已废弃\n                    case 'mark_cancel':\n                        triggerPendingEvent(code);\n                        break;\n                    case 'remove':\n                        return handleDeleteRow(code, 'vxe.grid.removeSelectRecord', () => $xeTable.removeCheckboxRow());\n                    case 'import':\n                        $xeTable.importData(btnParams);\n                        break;\n                    case 'open_import':\n                        $xeTable.openImport(btnParams);\n                        break;\n                    case 'export':\n                        $xeTable.exportData(btnParams);\n                        break;\n                    case 'open_export':\n                        $xeTable.openExport(btnParams);\n                        break;\n                    case 'reset_custom':\n                        return $xeTable.resetCustom(true);\n                    case '_init':\n                    case 'reload':\n                    case 'query': {\n                        const ajaxMethods = ajax.query;\n                        const querySuccessMethods = ajax.querySuccess;\n                        const queryErrorMethods = ajax.queryError;\n                        if (ajaxMethods) {\n                            const isInited = code === '_init';\n                            const isReload = code === 'reload';\n                            if (!isInited && reactData.tableLoading) {\n                                return nextTick();\n                            }\n                            let sortList = [];\n                            let filterList = [];\n                            let pageParams = {};\n                            if (pagerConfig) {\n                                if (isInited || isReload) {\n                                    tablePage.currentPage = 1;\n                                }\n                                if (isEnableConf(pagerOpts)) {\n                                    pageParams = Object.assign({}, tablePage);\n                                }\n                            }\n                            if (isInited) {\n                                let defaultSort = null;\n                                if ($xeTable) {\n                                    const { computeSortOpts } = $xeTable.getComputeMaps();\n                                    const sortOpts = computeSortOpts.value;\n                                    defaultSort = sortOpts.defaultSort;\n                                }\n                                // 如果使用默认排序\n                                if (defaultSort) {\n                                    if (!XEUtils.isArray(defaultSort)) {\n                                        defaultSort = [defaultSort];\n                                    }\n                                    sortList = defaultSort.map((item) => {\n                                        return {\n                                            field: item.field,\n                                            property: item.field,\n                                            order: item.order\n                                        };\n                                    });\n                                }\n                                if ($xeTable) {\n                                    filterList = $xeTable.getCheckedFilters();\n                                }\n                            }\n                            else {\n                                if ($xeTable) {\n                                    if (isReload) {\n                                        $xeTable.clearAll();\n                                    }\n                                    else {\n                                        sortList = $xeTable.getSortColumns();\n                                        filterList = $xeTable.getCheckedFilters();\n                                    }\n                                }\n                            }\n                            const commitParams = {\n                                code,\n                                button,\n                                isInited,\n                                isReload,\n                                $grid: $xeGrid,\n                                page: pageParams,\n                                sort: sortList.length ? sortList[0] : {},\n                                sorts: sortList,\n                                filters: filterList,\n                                form: formData,\n                                options: ajaxMethods\n                            };\n                            reactData.sortData = sortList;\n                            reactData.filterData = filterList;\n                            reactData.tableLoading = true;\n                            return Promise.resolve((beforeQuery || ajaxMethods)(commitParams, ...args))\n                                .then(rest => {\n                                let tableData = [];\n                                reactData.tableLoading = false;\n                                if (rest) {\n                                    if (pagerConfig && isEnableConf(pagerOpts)) {\n                                        const totalProp = resConfigs.total;\n                                        const total = (XEUtils.isFunction(totalProp) ? totalProp({ data: rest, $grid: $xeGrid }) : XEUtils.get(rest, totalProp || 'page.total')) || 0;\n                                        tablePage.total = XEUtils.toNumber(total);\n                                        const resultProp = resConfigs.result;\n                                        tableData = (XEUtils.isFunction(resultProp) ? resultProp({ data: rest, $grid: $xeGrid }) : XEUtils.get(rest, resultProp || 'result')) || [];\n                                        // 检验当前页码，不能超出当前最大页数\n                                        const pageCount = Math.max(Math.ceil(total / tablePage.pageSize), 1);\n                                        if (tablePage.currentPage > pageCount) {\n                                            tablePage.currentPage = pageCount;\n                                        }\n                                    }\n                                    else {\n                                        const listProp = resConfigs.list;\n                                        tableData = (listProp ? (XEUtils.isFunction(listProp) ? listProp({ data: rest, $grid: $xeGrid }) : XEUtils.get(rest, listProp)) : rest) || [];\n                                    }\n                                }\n                                if ($xeTable) {\n                                    $xeTable.loadData(tableData);\n                                }\n                                else {\n                                    nextTick(() => {\n                                        if ($xeTable) {\n                                            $xeTable.loadData(tableData);\n                                        }\n                                    });\n                                }\n                                if (afterQuery) {\n                                    afterQuery(commitParams, ...args);\n                                }\n                                if (querySuccessMethods) {\n                                    querySuccessMethods(Object.assign(Object.assign({}, commitParams), { response: rest }));\n                                }\n                                return { status: true };\n                            }).catch((rest) => {\n                                reactData.tableLoading = false;\n                                if (queryErrorMethods) {\n                                    queryErrorMethods(Object.assign(Object.assign({}, commitParams), { response: rest }));\n                                }\n                                return { status: false };\n                            });\n                        }\n                        else {\n                            errLog('vxe.error.notFunc', ['proxy-config.ajax.query']);\n                        }\n                        break;\n                    }\n                    case 'delete': {\n                        const ajaxMethods = ajax.delete;\n                        const deleteSuccessMethods = ajax.deleteSuccess;\n                        const deleteErrorMethods = ajax.deleteError;\n                        if (ajaxMethods) {\n                            const selectRecords = gridExtendTableMethods.getCheckboxRecords();\n                            const removeRecords = selectRecords.filter(row => !$xeTable.isInsertByRow(row));\n                            const body = { removeRecords };\n                            const commitParams = { $grid: $xeGrid, code, button, body, form: formData, options: ajaxMethods };\n                            if (selectRecords.length) {\n                                return handleDeleteRow(code, 'vxe.grid.deleteSelectRecord', () => {\n                                    if (!removeRecords.length) {\n                                        return $xeTable.remove(selectRecords);\n                                    }\n                                    reactData.tableLoading = true;\n                                    return Promise.resolve((beforeDelete || ajaxMethods)(commitParams, ...args))\n                                        .then(rest => {\n                                        reactData.tableLoading = false;\n                                        $xeTable.setPendingRow(removeRecords, false);\n                                        if (isRespMsg) {\n                                            if (VxeUI.modal) {\n                                                VxeUI.modal.message({ content: getRespMsg(rest, 'vxe.grid.delSuccess'), status: 'success' });\n                                            }\n                                        }\n                                        if (afterDelete) {\n                                            afterDelete(commitParams, ...args);\n                                        }\n                                        else {\n                                            gridMethods.commitProxy('query');\n                                        }\n                                        if (deleteSuccessMethods) {\n                                            deleteSuccessMethods(Object.assign(Object.assign({}, commitParams), { response: rest }));\n                                        }\n                                        return { status: true };\n                                    })\n                                        .catch(rest => {\n                                        reactData.tableLoading = false;\n                                        if (isRespMsg) {\n                                            if (VxeUI.modal) {\n                                                VxeUI.modal.message({ id: code, content: getRespMsg(rest, 'vxe.grid.operError'), status: 'error' });\n                                            }\n                                        }\n                                        if (deleteErrorMethods) {\n                                            deleteErrorMethods(Object.assign(Object.assign({}, commitParams), { response: rest }));\n                                        }\n                                        return { status: false };\n                                    });\n                                });\n                            }\n                            else {\n                                if (isActiveMsg) {\n                                    if (VxeUI.modal) {\n                                        VxeUI.modal.message({ id: code, content: getI18n('vxe.grid.selectOneRecord'), status: 'warning' });\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            errLog('vxe.error.notFunc', ['proxy-config.ajax.delete']);\n                        }\n                        break;\n                    }\n                    case 'save': {\n                        const ajaxMethods = ajax.save;\n                        const saveSuccessMethods = ajax.saveSuccess;\n                        const saveErrorMethods = ajax.saveError;\n                        if (ajaxMethods) {\n                            const body = $xeTable.getRecordset();\n                            const { insertRecords, removeRecords, updateRecords, pendingRecords } = body;\n                            const commitParams = { $grid: $xeGrid, code, button, body, form: formData, options: ajaxMethods };\n                            // 排除掉新增且标记为删除的数据\n                            if (insertRecords.length) {\n                                body.pendingRecords = pendingRecords.filter((row) => $xeTable.findRowIndexOf(insertRecords, row) === -1);\n                            }\n                            // 排除已标记为删除的数据\n                            if (pendingRecords.length) {\n                                body.insertRecords = insertRecords.filter((row) => $xeTable.findRowIndexOf(pendingRecords, row) === -1);\n                            }\n                            let restPromise = Promise.resolve();\n                            if (editRules) {\n                                // 只校验新增和修改的数据\n                                restPromise = $xeTable[validConfig && validConfig.msgMode === 'full' ? 'fullValidate' : 'validate'](body.insertRecords.concat(updateRecords));\n                            }\n                            return restPromise.then((errMap) => {\n                                if (errMap) {\n                                    // 如果校验不通过\n                                    return;\n                                }\n                                if (body.insertRecords.length || removeRecords.length || updateRecords.length || body.pendingRecords.length) {\n                                    reactData.tableLoading = true;\n                                    return Promise.resolve((beforeSave || ajaxMethods)(commitParams, ...args))\n                                        .then(rest => {\n                                        reactData.tableLoading = false;\n                                        $xeTable.clearPendingRow();\n                                        if (isRespMsg) {\n                                            if (VxeUI.modal) {\n                                                VxeUI.modal.message({ content: getRespMsg(rest, 'vxe.grid.saveSuccess'), status: 'success' });\n                                            }\n                                        }\n                                        if (afterSave) {\n                                            afterSave(commitParams, ...args);\n                                        }\n                                        else {\n                                            gridMethods.commitProxy('query');\n                                        }\n                                        if (saveSuccessMethods) {\n                                            saveSuccessMethods(Object.assign(Object.assign({}, commitParams), { response: rest }));\n                                        }\n                                        return { status: true };\n                                    })\n                                        .catch(rest => {\n                                        reactData.tableLoading = false;\n                                        if (isRespMsg) {\n                                            if (VxeUI.modal) {\n                                                VxeUI.modal.message({ id: code, content: getRespMsg(rest, 'vxe.grid.operError'), status: 'error' });\n                                            }\n                                        }\n                                        if (saveErrorMethods) {\n                                            saveErrorMethods(Object.assign(Object.assign({}, commitParams), { response: rest }));\n                                        }\n                                        return { status: false };\n                                    });\n                                }\n                                else {\n                                    if (isActiveMsg) {\n                                        if (VxeUI.modal) {\n                                            VxeUI.modal.message({ id: code, content: getI18n('vxe.grid.dataUnchanged'), status: 'info' });\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                        else {\n                            errLog('vxe.error.notFunc', ['proxy-config.ajax.save']);\n                        }\n                        break;\n                    }\n                    default: {\n                        const gCommandOpts = commands.get(code);\n                        if (gCommandOpts) {\n                            const tCommandMethod = gCommandOpts.tableCommandMethod || gCommandOpts.commandMethod;\n                            if (tCommandMethod) {\n                                tCommandMethod({ code, button, $grid: $xeGrid, $table: $xeTable }, ...args);\n                            }\n                            else {\n                                errLog('vxe.error.notCommands', [code]);\n                            }\n                        }\n                    }\n                }\n                return nextTick();\n            },\n            zoom() {\n                if (reactData.isZMax) {\n                    return gridMethods.revert();\n                }\n                return gridMethods.maximize();\n            },\n            isMaximized() {\n                return reactData.isZMax;\n            },\n            maximize() {\n                return handleZoom(true);\n            },\n            revert() {\n                return handleZoom();\n            },\n            getFormData,\n            getFormItems(itemIndex) {\n                const formOpts = computeFormOpts.value;\n                const { formConfig } = props;\n                const { items } = formOpts;\n                const itemList = [];\n                XEUtils.eachTree(formConfig && isEnableConf(formOpts) && items ? items : [], item => {\n                    itemList.push(item);\n                }, { children: 'children' });\n                return XEUtils.isUndefined(itemIndex) ? itemList : itemList[itemIndex];\n            },\n            getProxyInfo() {\n                const $xeTable = refTable.value;\n                if (props.proxyConfig) {\n                    const { sortData } = reactData;\n                    return {\n                        data: $xeTable ? $xeTable.getFullData() : [],\n                        filter: reactData.filterData,\n                        form: getFormData(),\n                        sort: sortData.length ? sortData[0] : {},\n                        sorts: sortData,\n                        pager: reactData.tablePage,\n                        pendingRecords: $xeTable ? $xeTable.getPendingRecords() : []\n                    };\n                }\n                return null;\n            }\n            // setProxyInfo (options) {\n            //   if (props.proxyConfig && options) {\n            //     const { pager, form } = options\n            //     const proxyOpts = computeProxyOpts.value\n            //     if (pager) {\n            //       if (pager.currentPage) {\n            //         reactData.tablePage.currentPage = Number(pager.currentPage)\n            //       }\n            //       if (pager.pageSize) {\n            //         reactData.tablePage.pageSize = Number(pager.pageSize)\n            //       }\n            //     }\n            //     if (proxyOpts.form && form) {\n            //       Object.assign(reactData.formData, form)\n            //     }\n            //   }\n            //   return nextTick()\n            // }\n        };\n        // 检查插槽\n        if (process.env.NODE_ENV === 'development') {\n            gridMethods.loadColumn = (columns) => {\n                const $xeTable = refTable.value;\n                XEUtils.eachTree(columns, (column) => {\n                    if (column.slots) {\n                        XEUtils.each(column.slots, (func) => {\n                            if (!XEUtils.isFunction(func)) {\n                                if (!slots[func]) {\n                                    errLog('vxe.error.notSlot', [func]);\n                                }\n                            }\n                        });\n                    }\n                });\n                if ($xeTable) {\n                    return $xeTable.loadColumn(columns);\n                }\n                return nextTick();\n            };\n            gridMethods.reloadColumn = (columns) => {\n                gridExtendTableMethods.clearAll();\n                return gridMethods.loadColumn(columns);\n            };\n        }\n        const gridPrivateMethods = {\n            extendTableMethods,\n            callSlot(slotFunc, params) {\n                if (slotFunc) {\n                    if (XEUtils.isString(slotFunc)) {\n                        slotFunc = slots[slotFunc] || null;\n                    }\n                    if (XEUtils.isFunction(slotFunc)) {\n                        return getSlotVNs(slotFunc(params));\n                    }\n                }\n                return [];\n            },\n            /**\n             * 获取需要排除的高度\n             */\n            getExcludeHeight() {\n                const { isZMax } = reactData;\n                const el = refElem.value;\n                if (el) {\n                    const formWrapper = refFormWrapper.value;\n                    const toolbarWrapper = refToolbarWrapper.value;\n                    const topWrapper = refTopWrapper.value;\n                    const bottomWrapper = refBottomWrapper.value;\n                    const pagerWrapper = refPagerWrapper.value;\n                    const parentEl = el.parentElement;\n                    const parentPaddingSize = isZMax ? 0 : (parentEl ? getPaddingTopBottomSize(parentEl) : 0);\n                    return parentPaddingSize + getPaddingTopBottomSize(el) + getOffsetHeight(formWrapper) + getOffsetHeight(toolbarWrapper) + getOffsetHeight(topWrapper) + getOffsetHeight(bottomWrapper) + getOffsetHeight(pagerWrapper);\n                }\n                return 0;\n            },\n            getParentHeight() {\n                const el = refElem.value;\n                if (el) {\n                    const parentEl = el.parentElement;\n                    return (reactData.isZMax ? getDomNode().visibleHeight : (parentEl ? XEUtils.toNumber(getComputedStyle(parentEl).height) : 0)) - gridPrivateMethods.getExcludeHeight();\n                }\n                return 0;\n            },\n            triggerToolbarCommitEvent(params, evnt) {\n                const { code } = params;\n                return gridMethods.commitProxy(params, evnt).then((rest) => {\n                    if (code && rest && rest.status && ['query', 'reload', 'delete', 'save'].includes(code)) {\n                        gridMethods.dispatchEvent(code === 'delete' || code === 'save' ? `proxy-${code}` : 'proxy-query', Object.assign(Object.assign({}, rest), { isReload: code === 'reload' }), evnt);\n                    }\n                });\n            },\n            triggerToolbarBtnEvent(button, evnt) {\n                gridPrivateMethods.triggerToolbarCommitEvent(button, evnt);\n                gridMethods.dispatchEvent('toolbar-button-click', { code: button.code, button }, evnt);\n            },\n            triggerToolbarTolEvent(tool, evnt) {\n                gridPrivateMethods.triggerToolbarCommitEvent(tool, evnt);\n                gridMethods.dispatchEvent('toolbar-tool-click', { code: tool.code, tool }, evnt);\n            },\n            triggerZoomEvent(evnt) {\n                gridMethods.zoom();\n                gridMethods.dispatchEvent('zoom', { type: reactData.isZMax ? 'max' : 'revert' }, evnt);\n            }\n        };\n        Object.assign($xeGrid, gridExtendTableMethods, gridMethods, gridPrivateMethods);\n        const columnFlag = ref(0);\n        watch(() => props.columns ? props.columns.length : -1, () => {\n            columnFlag.value++;\n        });\n        watch(() => props.columns, () => {\n            columnFlag.value++;\n        });\n        watch(columnFlag, () => {\n            nextTick(() => $xeGrid.loadColumn(props.columns || []));\n        });\n        watch(() => props.toolbarConfig, () => {\n            initToolbar();\n        });\n        watch(computePageConfFlag, () => {\n            initPages();\n        });\n        watch(() => props.proxyConfig, () => {\n            initProxy();\n        });\n        hooks.forEach((options) => {\n            const { setupGrid } = options;\n            if (setupGrid) {\n                const hookRest = setupGrid($xeGrid);\n                if (hookRest && XEUtils.isObject(hookRest)) {\n                    Object.assign($xeGrid, hookRest);\n                }\n            }\n        });\n        initPages();\n        onMounted(() => {\n            nextTick(() => {\n                const { columns } = props;\n                if (props.formConfig) {\n                    if (!VxeUIFormComponent) {\n                        errLog('vxe.error.reqComp', ['vxe-form']);\n                    }\n                }\n                if (props.pagerConfig) {\n                    if (!VxeUIPagerComponent) {\n                        errLog('vxe.error.reqComp', ['vxe-pager']);\n                    }\n                }\n                // const { data, columns, proxyConfig } = props\n                // const proxyOpts = computeProxyOpts.value\n                // const formOpts = computeFormOpts.value\n                // if (isEnableConf(proxyConfig) && (data || (proxyOpts.form && formOpts.data))) {\n                //   errLog('vxe.error.errConflicts', ['grid.data', 'grid.proxy-config'])\n                // }\n                //   if (proxyOpts.props) {\n                //     warnLog('vxe.error.delProp', ['proxy-config.props', 'proxy-config.response'])\n                //   }\n                if (columns && columns.length) {\n                    $xeGrid.loadColumn(columns);\n                }\n                initToolbar();\n                initProxy();\n            });\n            globalEvents.on($xeGrid, 'keydown', handleGlobalKeydownEvent);\n        });\n        onUnmounted(() => {\n            globalEvents.off($xeGrid, 'keydown');\n        });\n        const renderVN = () => {\n            const vSize = computeSize.value;\n            const styles = computeStyles.value;\n            return h('div', {\n                ref: refElem,\n                class: ['vxe-grid', {\n                        [`size--${vSize}`]: vSize,\n                        'is--animat': !!props.animat,\n                        'is--round': props.round,\n                        'is--maximize': reactData.isZMax,\n                        'is--loading': props.loading || reactData.tableLoading\n                    }],\n                style: styles\n            }, renderLayout());\n        };\n        $xeGrid.renderVN = renderVN;\n        provide('$xeGrid', $xeGrid);\n        return $xeGrid;\n    },\n    render() {\n        return this.renderVN();\n    }\n});\n", "import { VxeUI } from '../ui';\nimport VxeGridComponent from './src/grid';\nexport const VxeGrid = Object.assign({}, VxeGridComponent, {\n    install(app) {\n        app.component(VxeGridComponent.name, VxeGridComponent);\n    }\n});\nif (VxeUI.dynamicApp) {\n    VxeUI.dynamicApp.component(VxeGridComponent.name, VxeGridComponent);\n}\nVxeUI.component(VxeGridComponent);\nexport const Grid = VxeGrid;\nexport default VxeGrid;\n"],
  "mappings": "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",
  "names": ["import_xe_utils", "XEUtils", "import_xe_utils", "renderer", "renderEmptyElement", "renderType", "XEUtils", "import_xe_utils", "renderer", "renderEmptyElement", "renderType", "XEUtils", "import_xe_utils", "getI18n", "renderEmptyElement", "XEUtils", "column", "getI18n", "getIcon", "renderer", "panel_default", "import_xe_utils", "getI18n", "getIcon", "XEUtils", "import_xe_utils", "getI18n", "getIcon", "XEUtils", "column", "import_xe_utils", "getIcon", "panel_default", "XEUtils", "getConfig", "getIcon", "getI18n", "renderer", "renderEmptyElement", "XEUtils", "browseObj", "item", "storeData", "treeExpandLazyLoadedMaps", "rowExpandLazyLoadedMaps", "rowid", "column", "beforeEditMethod", "evnt", "dragRow", "row", "expandOpts", "panel_default", "rowOpts", "customOpts", "import_xe_utils", "XEUtils", "import_xe_utils", "renderer", "hooks", "XEUtils", "import_xe_utils", "hooks", "globalEvents", "GLOBAL_EVENT_KEYS", "XEUtils", "import_xe_utils", "getConfig", "renderer", "hooks", "getI18n", "browseObj", "XEUtils", "column", "item", "import_xe_utils", "getI18n", "hooks", "renderer", "XEUtils", "item", "type", "proxyOpts", "import_xe_utils", "hooks", "XEUtils", "triggerEvent", "evnt", "import_xe_utils", "getConfig", "hooks", "XEUtils", "import_xe_utils", "XEUtils", "import_xe_utils", "getConfig", "renderer", "getI18n", "XEUtils", "table_default", "import_xe_utils", "getConfig", "getI18n", "hooks", "useFns", "createEvent", "globalEvents", "GLOBAL_EVENT_KEYS", "renderEmptyElement", "XEUtils", "table_default", "grid_default"]
}
